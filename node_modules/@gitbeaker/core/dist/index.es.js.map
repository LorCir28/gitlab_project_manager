{"version":3,"file":"index.es.js","sources":["../src/infrastructure/Utils.ts","../src/infrastructure/RequestHelper.ts","../src/resources/Groups.ts","../src/templates/ResourceAccessRequests.ts","../src/templates/ResourceAwardEmojis.ts","../src/templates/ResourceNoteAwardEmojis.ts","../src/templates/ResourceBadges.ts","../src/templates/ResourceCustomAttributes.ts","../src/templates/ResourceDeployTokens.ts","../src/templates/ResourceDiscussions.ts","../src/templates/ResourceIssueBoards.ts","../src/templates/ResourceLabels.ts","../src/templates/ResourceMembers.ts","../src/templates/ResourceMilestones.ts","../src/templates/ResourceNotes.ts","../src/templates/ResourceTemplates.ts","../src/templates/ResourceVariables.ts","../src/resources/GroupAccessRequests.ts","../src/resources/GroupBadges.ts","../src/resources/GroupCustomAttributes.ts","../src/resources/GroupIssueBoards.ts","../src/resources/GroupMembers.ts","../src/resources/GroupMilestones.ts","../src/resources/GroupRunners.ts","../src/resources/GroupVariables.ts","../src/resources/GroupLabels.ts","../src/resources/GroupDeployTokens.ts","../src/resources/Epics.ts","../src/resources/EpicIssues.ts","../src/resources/EpicNotes.ts","../src/resources/EpicDiscussions.ts","../src/resources/Users.ts","../src/resources/UserCustomAttributes.ts","../src/resources/UserEmails.ts","../src/resources/UserImpersonationTokens.ts","../src/resources/UserSSHKeys.ts","../src/resources/UserGPGKeys.ts","../src/resources/Branches.ts","../src/resources/Commits.ts","../src/resources/CommitDiscussions.ts","../src/resources/ContainerRegistry.ts","../src/resources/Deployments.ts","../src/resources/DeployKeys.ts","../src/resources/Environments.ts","../src/resources/FreezePeriods.ts","../src/resources/Issues.ts","../src/resources/IssuesStatistics.ts","../src/resources/IssueNotes.ts","../src/resources/IssueNoteAwardEmojis.ts","../src/resources/IssueDiscussions.ts","../src/resources/IssueAwardEmojis.ts","../src/resources/Jobs.ts","../src/resources/Labels.ts","../src/resources/MergeRequests.ts","../src/resources/MergeRequestApprovals.ts","../src/resources/MergeRequestAwardEmojis.ts","../src/resources/MergeRequestDiscussions.ts","../src/resources/MergeRequestNotes.ts","../src/resources/Packages.ts","../src/resources/PackageRegistry.ts","../src/resources/Pipelines.ts","../src/resources/PipelineSchedules.ts","../src/resources/PipelineScheduleVariables.ts","../src/resources/ProjectImportExport.ts","../src/resources/Projects.ts","../src/resources/ProjectAccessRequests.ts","../src/resources/ProjectBadges.ts","../src/resources/ProjectCustomAttributes.ts","../src/resources/ProjectIssueBoards.ts","../src/resources/ProjectHooks.ts","../src/resources/ProjectMembers.ts","../src/resources/ProjectMilestones.ts","../src/resources/ProjectSnippets.ts","../src/resources/ProjectSnippetNotes.ts","../src/resources/ProjectSnippetDiscussions.ts","../src/resources/ProjectSnippetAwardEmojis.ts","../src/resources/ProtectedBranches.ts","../src/resources/ProtectedTags.ts","../src/resources/ProjectVariables.ts","../src/resources/ProjectDeployTokens.ts","../src/resources/PushRules.ts","../src/resources/Releases.ts","../src/resources/ReleaseLinks.ts","../src/resources/Repositories.ts","../src/resources/RepositoryFiles.ts","../src/resources/RepositorySubmodules.ts","../src/resources/Runners.ts","../src/resources/Services.ts","../src/resources/Tags.ts","../src/resources/Todos.ts","../src/resources/Triggers.ts","../src/resources/VulnerabilityFindings.ts","../src/resources/ApplicationSettings.ts","../src/resources/BroadcastMessages.ts","../src/resources/Events.ts","../src/resources/FeatureFlags.ts","../src/resources/GeoNodes.ts","../src/resources/GitignoreTemplates.ts","../src/resources/GitLabCIYMLTemplates.ts","../src/resources/Keys.ts","../src/resources/License.ts","../src/resources/LicenseTemplates.ts","../src/resources/Lint.ts","../src/resources/Namespaces.ts","../src/resources/NotificationSettings.ts","../src/resources/Markdown.ts","../src/resources/PagesDomains.ts","../src/resources/Search.ts","../src/resources/SidekiqMetrics.ts","../src/resources/Snippets.ts","../src/resources/SystemHooks.ts","../src/resources/Version.ts","../src/resources/Wikis.ts","../src/resources/Gitlab.ts","../src/resources/index.ts"],"sourcesContent":["import FormData from 'form-data';\n\nexport type CamelizeString<T extends PropertyKey> = T extends string\n  ? string extends T\n    ? string\n    : T extends `${infer F}_${infer R}`\n    ? `${F}${Capitalize<CamelizeString<R>>}`\n    : T\n  : T;\n\nexport type Camelize<T> = { [K in keyof T as CamelizeString<K>]: T[K] };\n\nexport function appendFormFromObject(object: Record<string, unknown>): FormData {\n  /* eslint @typescript-eslint/ban-ts-comment: 0 */\n  // @ts-ignore\n  const form = new FormData();\n\n  Object.entries(object).forEach(([k, v]) => {\n    if (Array.isArray(v)) form.append(k, v[0], v[1]);\n    else form.append(k, v as any);\n  });\n\n  return form;\n}\n\nexport function getAPIMap(): Record<string, unknown> {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires, global-require, import/no-unresolved\n    return require('../../dist/map.json') as Record<string, unknown>;\n  } catch (e) {\n    throw new Error('This function is only available in the distributed code');\n  }\n}\n\n/**\n * Normalize GitLab API endpoint by encoding route parameters.\n * @param strings\n * @param values\n */\nexport function endpoint<T extends (string | number)[]>(\n  strings: TemplateStringsArray,\n  ...values: T\n): T extends number[] ? void : string;\nexport function endpoint(strings: TemplateStringsArray, ...values: (string | number)[]): string {\n  return values.reduce<string>(\n    (string, value, index) => string + encodeURIComponent(value) + strings[index + 1],\n    strings[0],\n  );\n}\n","import { parse as parseLink } from 'li';\nimport { parseUrl as parseQueryString } from 'query-string';\nimport { camelizeKeys } from 'xcase';\nimport { BaseResource } from '@gitbeaker/requester-utils';\nimport { appendFormFromObject, Camelize } from './Utils';\n\n// Request Options\nexport type IsForm = {\n  isForm?: boolean;\n};\n\nexport type Sudo = {\n  sudo?: string | number;\n};\n\nexport type ShowExpanded<T extends boolean = boolean> = {\n  showExpanded?: T;\n};\n\nexport type BaseRequestOptions = Sudo & Record<string, unknown>;\n\nexport type BasePaginationRequestOptions<P extends 'keyset' | 'offset' = 'keyset' | 'offset'> =\n  BaseRequestOptions & {\n    pagination?: P;\n    perPage?: number;\n  };\n\nexport type OffsetPaginationRequestOptions = {\n  page?: number;\n  maxPages?: number;\n};\n\nexport type PaginatedRequestOptions<P extends 'keyset' | 'offset' = 'keyset' | 'offset'> =\n  P extends 'keyset'\n    ? BasePaginationRequestOptions<P>\n    : BasePaginationRequestOptions<P> & OffsetPaginationRequestOptions;\n\n// Response Formats\nexport interface ExpandedResponse<T = Record<string, unknown>> {\n  data: T;\n  headers: Record<string, unknown>;\n  status: number;\n}\nexport interface PaginationResponse<T = Record<string, unknown>[]> {\n  data: T;\n  paginationInfo: {\n    total: number;\n    next: number | null;\n    current: number;\n    previous: number | null;\n    perPage: number;\n    totalPages: number;\n  };\n}\n\nexport type CamelizedRecord<C, T> = C extends true ? Camelize<T> : T;\n\nexport type ExtendedRecordReturn<\n  C extends boolean,\n  E extends boolean,\n  T extends Record<string, unknown> | void,\n> = T extends void\n  ? void\n  : E extends false\n  ? CamelizedRecord<C, T>\n  : ExpandedResponse<CamelizedRecord<C, T>>;\n\nexport type ExtendedArrayReturn<\n  C extends boolean,\n  E extends boolean,\n  T,\n  P extends 'keyset' | 'offset',\n> = E extends false\n  ? CamelizedRecord<C, T>[]\n  : P extends 'keyset'\n  ? CamelizedRecord<C, T>[]\n  : PaginationResponse<CamelizedRecord<C, T>[]>;\n\nexport type ExtendedReturn<\n  C extends boolean,\n  E extends boolean,\n  P extends 'keyset' | 'offset',\n  T extends Record<string, unknown> | Record<string, unknown>[],\n> = T extends Record<string, unknown>\n  ? ExtendedRecordReturn<C, E, T>\n  : T extends (infer R)[]\n  ? ExtendedArrayReturn<C, E, R, P>\n  : never;\n\nasync function getHelper<P extends 'keyset' | 'offset', E extends boolean>(\n  service: BaseResource<boolean>,\n  endpoint: string,\n  {\n    sudo,\n    showExpanded,\n    maxPages,\n    ...query\n  }: BasePaginationRequestOptions<P> & ShowExpanded<E> & { maxPages?: number } = {},\n  acc: Record<string, unknown>[] = [],\n): Promise<any> {\n  const response = await service.requester.get(endpoint, { query, sudo });\n  const { headers, status } = response;\n  let { body } = response;\n\n  // Camelize response body if specified\n  if (service.camelize) body = camelizeKeys(body);\n\n  // Handle object responses\n  if (!Array.isArray(body)) {\n    if (!showExpanded) return body;\n\n    return {\n      data: body,\n      headers,\n      status,\n    };\n  }\n\n  // Handle array responses\n  const newAcc = [...acc, ...body];\n  const { next }: { next: string } = parseLink(headers.link);\n  const { query: qs = {} } = next\n    ? parseQueryString(next, { parseNumbers: true, arrayFormat: 'bracket' })\n    : {};\n  const withinBounds = maxPages\n    ? newAcc.length / ((qs.per_page as unknown as number) || 20) < maxPages\n    : true;\n\n  // Recurse through pagination results\n  if (!(query.page && acc.length === 0) && next && withinBounds) {\n    return getHelper(\n      service,\n      endpoint,\n      {\n        ...qs,\n        maxPages,\n        sudo,\n      },\n      newAcc,\n    );\n  }\n\n  if (!showExpanded || query.pagination === 'keyset') return newAcc;\n\n  return {\n    data: newAcc,\n    paginationInfo: {\n      total: parseInt(headers['x-total'], 10),\n      next: parseInt(headers['x-next-page'], 10) || null,\n      current: parseInt(headers['x-page'], 10) || 1,\n      previous: parseInt(headers['x-prev-page'], 10) || null,\n      perPage: parseInt(headers['x-per-page'], 10),\n      totalPages: parseInt(headers['x-total-pages'], 10),\n    },\n  };\n}\n\nexport function get<\n  T extends Record<string, unknown> | Record<string, unknown>[] = Record<string, unknown>,\n>() {\n  return <C extends boolean, P extends 'keyset' | 'offset' = 'offset', E extends boolean = false>(\n    service: BaseResource<C>,\n    endpoint: string,\n    options?: PaginatedRequestOptions<P> & ShowExpanded<E> & Record<string, any>,\n  ): Promise<ExtendedReturn<C, E, P, T>> => getHelper(service, endpoint, options);\n}\n\nexport function post<T extends Record<string, unknown> | void = Record<string, unknown>>() {\n  return async <C extends boolean, E extends boolean = false>(\n    service: BaseResource<C>,\n    endpoint: string,\n    {\n      query,\n      isForm,\n      sudo,\n      showExpanded,\n      ...options\n    }: IsForm & BaseRequestOptions & ShowExpanded<E> = {},\n  ): Promise<ExtendedRecordReturn<C, E, T>> => {\n    const body = isForm ? appendFormFromObject(options) : options;\n\n    const r = await service.requester.post(endpoint, {\n      query,\n      body,\n      sudo,\n    });\n\n    return showExpanded\n      ? {\n          data: r.body,\n          status: r.status,\n          headers: r.headers,\n        }\n      : r.body;\n  };\n}\n\nexport function put<T extends Record<string, unknown> = Record<string, unknown>>() {\n  return async <C extends boolean, E extends boolean = false>(\n    service: BaseResource<C>,\n    endpoint: string,\n    {\n      query,\n      isForm,\n      sudo,\n      showExpanded,\n      ...options\n    }: IsForm & BaseRequestOptions & ShowExpanded<E> = {},\n  ): Promise<ExtendedRecordReturn<C, E, T>> => {\n    const body = isForm ? appendFormFromObject(options) : options;\n\n    const r = await service.requester.put(endpoint, {\n      body,\n      query,\n      sudo,\n    });\n\n    return showExpanded\n      ? {\n          data: r.body,\n          status: r.status,\n          headers: r.headers,\n        }\n      : r.body;\n  };\n}\n\nexport function del<T extends Record<string, unknown> | void = void>() {\n  return async <C extends boolean, E extends boolean = false>(\n    service: BaseResource<C>,\n    endpoint: string,\n    { sudo, showExpanded, query, ...options }: BaseRequestOptions & ShowExpanded<E> = {},\n  ): Promise<ExtendedRecordReturn<C, E, T>> => {\n    const body = options;\n\n    const r = await service.requester.delete(endpoint, {\n      body,\n      query,\n      sudo,\n    });\n\n    return showExpanded\n      ? {\n          data: r.body,\n          status: r.status,\n          headers: r.headers,\n        }\n      : r.body;\n  };\n}\n\nfunction stream<C extends boolean>(\n  service: BaseResource<C>,\n  endpoint: string,\n  options?: BaseRequestOptions,\n): NodeJS.ReadableStream {\n  if (typeof service.requester.stream !== 'function') {\n    throw new Error('Stream method is not implementated in requester!');\n  }\n\n  return service.requester.stream(endpoint, {\n    query: options,\n  });\n}\n\nexport const RequestHelper = {\n  post,\n  put,\n  get,\n  del,\n  stream,\n};\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  ShowExpanded,\n  RequestHelper,\n  Sudo,\n  endpoint,\n} from '../infrastructure';\nimport { ProjectSchema } from './Projects';\n\nexport interface GroupSchema extends Record<string, unknown> {\n  id: number;\n  name: string;\n  path: string;\n  full_name: string;\n  full_path: string;\n  parent_id: number;\n  visibility: string;\n  avatar_url: string;\n  web_url: string;\n  description: string;\n  share_with_group_lock: boolean;\n  require_two_factor_authentication: boolean;\n  two_factor_grace_period: number;\n  project_creation_level: string;\n  auto_devops_enabled: boolean;\n  subgroup_creation_level: string;\n  emails_disabled: boolean;\n  mentions_disabled: boolean;\n  lfs_enabled: boolean;\n  default_branch_protection: number;\n  request_access_enabled: boolean;\n  file_template_project_id: number;\n  created_at: string;\n}\n\nexport type GroupDetailSchema = {\n  id: number;\n  name: string;\n  path: string;\n  full_name: string;\n  full_path: string;\n  parent_id: number;\n  visibility: string;\n  avatar_url: string;\n  web_url: string;\n  description: string;\n  request_access_enabled: boolean;\n  file_template_project_id: number;\n  runners_token: string;\n  shared_with_groups: {\n    group_id: number;\n    group_name: string;\n    group_full_path: string;\n    group_access_level: number;\n    expires_at: string;\n  }[];\n  created_at: string;\n};\n\nexport class Groups<C extends boolean = false> extends BaseResource<C> {\n  all(options?: PaginatedRequestOptions) {\n    return RequestHelper.get<GroupSchema[]>()(this, 'groups', options);\n  }\n\n  create(name: string, path: string, options?: BaseRequestOptions) {\n    return RequestHelper.post<GroupSchema>()(this, 'groups', { name, path, ...options });\n  }\n\n  createLDAPLink(\n    groupId: string | number,\n    cn: string,\n    groupAccess: number,\n    provider: string,\n    options?: Sudo & ShowExpanded,\n  ) {\n    return RequestHelper.post()(this, endpoint`groups/${groupId}/ldap_group_links`, {\n      cn,\n      groupAccess,\n      provider,\n      ...options,\n    });\n  }\n\n  edit(groupId: string | number, options?: BaseRequestOptions) {\n    return RequestHelper.put<GroupSchema>()(this, endpoint`groups/${groupId}`, options);\n  }\n\n  projects(groupId: string | number, options?: BaseRequestOptions) {\n    return RequestHelper.get<ProjectSchema[]>()(\n      this,\n      endpoint`groups/${groupId}/projects`,\n      options,\n    );\n  }\n\n  remove(groupId: string | number, options?: Sudo & ShowExpanded) {\n    return RequestHelper.del()(this, endpoint`groups/${groupId}`, options);\n  }\n\n  removeLDAPLink(\n    groupId: string | number,\n    cn: string,\n    { provider, ...options }: Sudo & ShowExpanded & { provider?: string } = {},\n  ) {\n    const gId = encodeURIComponent(groupId);\n    const url = provider ? `${provider}/${cn}` : `${cn}`;\n\n    return RequestHelper.del()(\n      this,\n      `groups/${gId}/ldap_group_links/${url}`,\n      options as Record<string, unknown>,\n    );\n  }\n\n  search(nameOrPath: string, options?: Sudo) {\n    return RequestHelper.get()(this, 'groups', {\n      search: nameOrPath,\n      ...options,\n    });\n  }\n\n  show(groupId: string | number, options?: BaseRequestOptions) {\n    return RequestHelper.get<GroupDetailSchema>()(this, endpoint`groups/${groupId}`, options);\n  }\n\n  subgroups(groupId: string | number, options?: PaginatedRequestOptions) {\n    return RequestHelper.get()(this, endpoint`groups/${groupId}/subgroups`, options);\n  }\n\n  syncLDAP(groupId: string | number, options?: Sudo & ShowExpanded) {\n    return RequestHelper.post()(this, endpoint`groups/${groupId}/ldap_sync`, options);\n  }\n\n  transferProject(\n    groupId: string | number,\n    projectId: string | number,\n    options?: BaseRequestOptions & ShowExpanded,\n  ) {\n    return RequestHelper.post()(this, endpoint`groups/${groupId}/projects/${projectId}`, options);\n  }\n}\n","import { BaseResource, BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { endpoint, RequestHelper, Sudo } from '../infrastructure';\n\nexport type AccessLevel = 0 | 5 | 10 | 20 | 30 | 40 | 50;\n\nexport interface AccessRequestSchema extends Record<string, unknown> {\n  id: number;\n  username: string;\n  name: string;\n  state: string;\n  created_at: string;\n  requested_at: string;\n}\n\nexport class ResourceAccessRequests<C extends boolean = false> extends BaseResource<C> {\n  constructor(resourceType: string, options: BaseResourceOptions<C>) {\n    super({ prefixUrl: resourceType, ...options });\n  }\n\n  all(resourceId: string | number) {\n    return RequestHelper.get<AccessRequestSchema[]>()(\n      this,\n      endpoint`${resourceId}/access_requests`,\n    );\n  }\n\n  request(resourceId: string | number) {\n    return RequestHelper.post<AccessRequestSchema>()(this, endpoint`${resourceId}/access_requests`);\n  }\n\n  approve(\n    resourceId: string | number,\n    userId: number,\n    options?: { accessLevel?: AccessLevel } & Sudo,\n  ) {\n    return RequestHelper.post<AccessRequestSchema>()(\n      this,\n      endpoint`${resourceId}/access_requests/${userId}/approve`,\n      options,\n    );\n  }\n\n  deny(resourceId: string | number, userId: number) {\n    return RequestHelper.del()(this, endpoint`${resourceId}/access_requests/${userId}`);\n  }\n}\n","import { BaseResource, BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { UserSchema } from '../resources/Users';\nimport { PaginatedRequestOptions, RequestHelper, Sudo } from '../infrastructure';\n\nexport interface AwardEmojiSchema extends Record<string, unknown> {\n  id: number;\n  name: string;\n  user: UserSchema;\n  created_at: string;\n  updated_at: string;\n  awardable_id: number;\n  awardable_type: string;\n}\n\nexport function url(\n  projectId: number | string,\n  resourceType: string,\n  resourceId: number | string,\n  awardId?: number | null,\n  noteId?: number,\n) {\n  const [pId, rId] = [projectId, resourceId].map(encodeURIComponent);\n  const output = [pId, resourceType, rId];\n\n  if (noteId) output.push('notes', encodeURIComponent(noteId));\n\n  output.push('award_emoji');\n\n  if (awardId) output.push(encodeURIComponent(awardId));\n\n  return output.join('/');\n}\n\nexport class ResourceAwardEmojis<C extends boolean = false> extends BaseResource<C> {\n  protected resourceType: string;\n\n  constructor(resourceType: string, options: BaseResourceOptions<C>) {\n    super({ prefixUrl: 'projects', ...options });\n\n    this.resourceType = resourceType;\n  }\n\n  all(projectId: string | number, resourceIId: number, options?: PaginatedRequestOptions) {\n    return RequestHelper.get<AwardEmojiSchema[]>()(\n      this,\n      url(projectId, this.resourceType, resourceIId),\n      options,\n    );\n  }\n\n  award(projectId: string | number, resourceIId: number, name: string, options?: Sudo) {\n    return RequestHelper.post<AwardEmojiSchema>()(\n      this,\n      url(projectId, this.resourceType, resourceIId),\n      {\n        name,\n        ...options,\n      },\n    );\n  }\n\n  remove(projectId: string | number, resourceIId: number, awardId: number, options?: Sudo) {\n    return RequestHelper.del()(\n      this,\n      url(projectId, this.resourceType, resourceIId, awardId),\n      options,\n    );\n  }\n\n  show(projectId: string | number, resourceIId: number, awardId: number, options?: Sudo) {\n    return RequestHelper.get<AwardEmojiSchema>()(\n      this,\n      url(projectId, this.resourceType, resourceIId, awardId),\n      options,\n    );\n  }\n}\n","import { BaseResource, BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { PaginatedRequestOptions, RequestHelper, Sudo } from '../infrastructure';\nimport { AwardEmojiSchema, url } from './ResourceAwardEmojis';\n\nexport class ResourceNoteAwardEmojis<C extends boolean = false> extends BaseResource<C> {\n  protected resourceType: string;\n\n  constructor(resourceType: string, options: BaseResourceOptions<C>) {\n    super({ prefixUrl: 'projects', ...options });\n\n    this.resourceType = resourceType;\n  }\n\n  all(\n    projectId: string | number,\n    resourceIId: number,\n    noteId: number,\n    options?: PaginatedRequestOptions,\n  ) {\n    return RequestHelper.get<AwardEmojiSchema[]>()(\n      this,\n      url(projectId, this.resourceType, resourceIId, null, noteId),\n      options,\n    );\n  }\n\n  award(\n    projectId: string | number,\n    resourceIId: number,\n    noteId: number,\n    name: string,\n    options?: Sudo,\n  ) {\n    return RequestHelper.post<AwardEmojiSchema>()(\n      this,\n      url(projectId, this.resourceType, resourceIId, null, noteId),\n      {\n        name,\n        ...options,\n      },\n    );\n  }\n\n  remove(\n    projectId: string | number,\n    resourceIId: number,\n    noteId: number,\n    awardId: number,\n    options?: Sudo,\n  ) {\n    return RequestHelper.del()(\n      this,\n      url(projectId, this.resourceType, resourceIId, awardId, noteId),\n      options,\n    );\n  }\n\n  show(\n    projectId: string | number,\n    resourceIId: number,\n    noteId: number,\n    awardId: number,\n    options?: Sudo,\n  ) {\n    return RequestHelper.get<AwardEmojiSchema>()(\n      this,\n      url(projectId, this.resourceType, resourceIId, awardId, noteId),\n      options,\n    );\n  }\n}\n","import { BaseResource, BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  endpoint,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface BadgeSchema extends Record<string, unknown> {\n  name: string;\n  id: number;\n  link_url: string;\n  image_url: string;\n  rendered_link_url: string;\n  rendered_image_url: string;\n  kind: 'project' | 'group';\n}\n\nexport class ResourceBadges<C extends boolean = false> extends BaseResource<C> {\n  constructor(resourceType: string, options: BaseResourceOptions<C>) {\n    super({ prefixUrl: resourceType, ...options });\n  }\n\n  add(resourceId: string | number, options?: BaseRequestOptions) {\n    return RequestHelper.post<BadgeSchema>()(this, endpoint`${resourceId}/badges`, options);\n  }\n\n  all(resourceId: string | number, options?: PaginatedRequestOptions) {\n    return RequestHelper.get<BadgeSchema[]>()(this, endpoint`${resourceId}/badges`, options);\n  }\n\n  edit(resourceId: string | number, badgeId: number, options?: BaseRequestOptions) {\n    return RequestHelper.put<BadgeSchema>()(\n      this,\n      endpoint`${resourceId}/badges/${badgeId}`,\n      options,\n    );\n  }\n\n  preview(resourceId: string | number, linkUrl: string, imageUrl: string, options?: Sudo) {\n    return RequestHelper.get<Omit<BadgeSchema, 'id' | 'name' | 'kind'>>()(\n      this,\n      endpoint`${resourceId}/badges/render`,\n      { linkUrl, imageUrl, ...options },\n    );\n  }\n\n  remove(resourceId: string | number, badgeId: number, options?: Sudo) {\n    return RequestHelper.del()(this, endpoint`${resourceId}/badges/${badgeId}`, options);\n  }\n\n  show(resourceId: string | number, badgeId: number, options?: Sudo) {\n    return RequestHelper.get<BadgeSchema>()(\n      this,\n      endpoint`${resourceId}/badges/${badgeId}`,\n      options,\n    );\n  }\n}\n","import { BaseResource, BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { endpoint, PaginatedRequestOptions, RequestHelper, Sudo } from '../infrastructure';\n\nexport interface CustomAttributeSchema extends Record<string, unknown> {\n  key: string;\n  value: string;\n}\n\nexport class ResourceCustomAttributes<C extends boolean = false> extends BaseResource<C> {\n  constructor(resourceType: string, options: BaseResourceOptions<C>) {\n    super({ prefixUrl: resourceType, ...options });\n  }\n\n  all(resourceId: string | number, options?: PaginatedRequestOptions) {\n    return RequestHelper.get<CustomAttributeSchema[]>()(\n      this,\n      endpoint`${resourceId}/custom_attributes`,\n      options,\n    );\n  }\n\n  set(resourceId: string | number, customAttributeId: number, value: string, options?: Sudo) {\n    return RequestHelper.put<CustomAttributeSchema>()(\n      this,\n      endpoint`${resourceId}/custom_attributes/${customAttributeId}`,\n      {\n        value,\n        ...options,\n      },\n    );\n  }\n\n  remove(resourceId: string | number, customAttributeId: number, options?: Sudo) {\n    return RequestHelper.del()(\n      this,\n      endpoint`${resourceId}/custom_attributes/${customAttributeId}`,\n      options,\n    );\n  }\n\n  show(resourceId: string | number, customAttributeId: number, options?: Sudo) {\n    return RequestHelper.get<CustomAttributeSchema>()(\n      this,\n      endpoint`${resourceId}/custom_attributes/${customAttributeId}`,\n      options,\n    );\n  }\n}\n","import { BaseResource, BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  endpoint,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport type DeployTokenScope =\n  | 'read_repository'\n  | 'read_registry'\n  | 'write_registry'\n  | 'read_package_registry'\n  | 'write_package_registry';\n\nexport interface DeployTokenSchema extends Record<string, unknown> {\n  id: number;\n  name: string;\n  username: string;\n  expires_at: string;\n  scopes?: string[];\n}\n\n// https://docs.gitlab.com/ee/api/deploy_tokens.html\nexport class ResourceDeployTokens<C extends boolean = false> extends BaseResource<C> {\n  constructor(resourceType: string, options: BaseResourceOptions<C>) {\n    super({ prefixUrl: resourceType, ...options });\n  }\n\n  add(\n    resourceId: string | number,\n    tokenName: string,\n    tokenScopes: DeployTokenScope[],\n    options?: BaseRequestOptions,\n  ) {\n    return RequestHelper.post<DeployTokenSchema>()(this, endpoint`${resourceId}/deploy_tokens`, {\n      name: tokenName,\n      scopes: tokenScopes,\n      ...options,\n    });\n  }\n\n  all({\n    resourceId,\n    projectId,\n    groupId,\n    ...options\n  }: {\n    resourceId?: string | number;\n    projectId?: string | number;\n    groupId?: string | number;\n  } & PaginatedRequestOptions = {}) {\n    const prefix =\n      resourceId || projectId || groupId\n        ? endpoint`${(resourceId || projectId || groupId) as string}/`\n        : '';\n\n    return RequestHelper.get<DeployTokenSchema[]>()(this, `${prefix}deploy_tokens`, options);\n  }\n\n  remove(resourceId: string | number, tokenId: number, options?: Sudo) {\n    return RequestHelper.del()(this, endpoint`${resourceId}/deploy_tokens/${tokenId}`, options);\n  }\n}\n","import { decamelizeKeys } from 'xcase';\nimport { BaseResource, BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { UserSchema } from '../resources/Users';\nimport {\n  BaseRequestOptions,\n  endpoint,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface DiscussionNotePosition {\n  base_sha: string;\n  start_sha: string;\n  head_sha: string;\n  old_path: string;\n  new_path: string;\n  position_type: string;\n  old_line: number;\n  new_line: number;\n}\n\nexport interface DiscussionNote {\n  id: number;\n  type?: string;\n  body: string;\n  attachment?: string;\n  author: Omit<UserSchema, 'created_at'>;\n  created_at: string;\n  updated_at: string;\n  system: boolean;\n  noteable_id: number;\n  noteable_type: string;\n  noteable_iid?: number;\n  resolvable: boolean;\n  position?: DiscussionNotePosition;\n}\n\nexport interface DiscussionSchema extends Record<string, unknown> {\n  id: string;\n  individual_note: boolean;\n  notes?: DiscussionNote[];\n}\n\nexport class ResourceDiscussions<C extends boolean = false> extends BaseResource<C> {\n  protected resource2Type: string;\n\n  constructor(resourceType: string, resource2Type: string, options: BaseResourceOptions<C>) {\n    super({ prefixUrl: resourceType, ...options });\n\n    this.resource2Type = resource2Type;\n  }\n\n  addNote(\n    resourceId: string | number,\n    resource2Id: string | number,\n    discussionId: string | number,\n    noteId: number,\n    body: string,\n    options?: BaseRequestOptions,\n  ) {\n    return RequestHelper.post()(\n      this,\n      endpoint`${resourceId}/${this.resource2Type}/${resource2Id}/discussions/${discussionId}/notes`,\n      { query: { body }, noteId, ...options },\n    );\n  }\n\n  all(\n    resourceId: string | number,\n    resource2Id: string | number,\n    options?: PaginatedRequestOptions,\n  ) {\n    return RequestHelper.get<DiscussionSchema[]>()(\n      this,\n      endpoint`${resourceId}/${this.resource2Type}/${resource2Id}/discussions`,\n      options,\n    );\n  }\n\n  create(\n    resourceId: string | number,\n    resource2Id: string | number,\n    body: string,\n    { position, ...options }: { position?: DiscussionNotePosition } & BaseRequestOptions = {},\n  ) {\n    const opts = { ...options };\n\n    if (position) {\n      const p = decamelizeKeys(position);\n\n      opts.isForm = true;\n      opts.body = body;\n\n      Object.entries(p).forEach(([k, v]) => {\n        opts[`position[${k}]`] = v;\n      });\n    } else {\n      opts.query = { body };\n    }\n\n    return RequestHelper.post<DiscussionSchema>()(\n      this,\n      endpoint`${resourceId}/${this.resource2Type}/${resource2Id}/discussions`,\n      opts,\n    );\n  }\n\n  editNote(\n    resourceId: string | number,\n    resource2Id: string | number,\n    discussionId: string | number,\n    noteId: number,\n    { body, ...options }: BaseRequestOptions & { body?: string } = {},\n  ) {\n    return RequestHelper.put<DiscussionSchema>()(\n      this,\n      endpoint`${resourceId}/${this.resource2Type}/${resource2Id}/discussions/${discussionId}/notes/${noteId}`,\n      {\n        query: { body },\n        ...options,\n      },\n    );\n  }\n\n  removeNote(\n    resourceId: string | number,\n    resource2Id: string | number,\n    discussionId: string | number,\n    noteId: number,\n    options?: Sudo,\n  ) {\n    return RequestHelper.del()(\n      this,\n      endpoint`${resourceId}/${this.resource2Type}/${resource2Id}/discussions/${discussionId}/notes/${noteId}`,\n      options,\n    );\n  }\n\n  show(\n    resourceId: string | number,\n    resource2Id: string | number,\n    discussionId: string | number,\n    options?: Sudo,\n  ) {\n    return RequestHelper.get<DiscussionSchema>()(\n      this,\n      endpoint`${resourceId}/${this.resource2Type}/${resource2Id}/discussions/${discussionId}`,\n      options,\n    );\n  }\n}\n","import { BaseResource, BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { MilestoneSchema } from './ResourceMilestones';\nimport { LabelSchema } from './ResourceLabels';\nimport {\n  BaseRequestOptions,\n  endpoint,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface IssueBoardListSchema extends Record<string, unknown> {\n  id: number;\n  label: Pick<LabelSchema, 'name' | 'color' | 'description'>;\n  position: number;\n  max_issue_count: number;\n  max_issue_weight: number;\n  limit_metric?: string;\n}\n\nexport interface IssueBoardSchema extends Record<string, unknown> {\n  id: number;\n  name: string;\n  milestone: Pick<MilestoneSchema, 'id' | 'title'>;\n  lists?: IssueBoardListSchema[];\n}\n\nexport class ResourceIssueBoards<C extends boolean = false> extends BaseResource<C> {\n  constructor(resourceType: string, options: BaseResourceOptions<C>) {\n    super({ prefixUrl: resourceType, ...options });\n  }\n\n  all(resourceId: string | number, options?: PaginatedRequestOptions) {\n    return RequestHelper.get<IssueBoardSchema[]>()(this, endpoint`${resourceId}/boards`, options);\n  }\n\n  create(resourceId: string | number, name: string, options?: Sudo) {\n    return RequestHelper.post<IssueBoardSchema>()(this, endpoint`${resourceId}/boards`, {\n      name,\n      ...options,\n    });\n  }\n\n  createList(\n    resourceId: string | number,\n    boardId: number,\n    labelId: number | string,\n    options?: Sudo,\n  ) {\n    return RequestHelper.post<IssueBoardListSchema>()(\n      this,\n      endpoint`${resourceId}/boards/${boardId}/lists`,\n      {\n        labelId,\n        ...options,\n      },\n    );\n  }\n\n  edit(resourceId: string | number, boardId: number, options?: BaseRequestOptions) {\n    return RequestHelper.put()(this, endpoint`${resourceId}/boards/${boardId}`, options);\n  }\n\n  editList(\n    resourceId: string | number,\n    boardId: number,\n    listId: number,\n    position: number,\n    options?: Sudo,\n  ) {\n    return RequestHelper.put<IssueBoardListSchema>()(\n      this,\n      endpoint`${resourceId}/boards/${boardId}/lists/${listId}`,\n      {\n        position,\n        ...options,\n      },\n    );\n  }\n\n  lists(resourceId: string | number, boardId: number, options?: Sudo) {\n    return RequestHelper.get<IssueBoardListSchema[]>()(\n      this,\n      endpoint`${resourceId}/boards/${boardId}/lists`,\n      options,\n    );\n  }\n\n  remove(resourceId: string | number, boardId: number, options?: Sudo) {\n    return RequestHelper.del()(this, endpoint`${resourceId}/boards/${boardId}`, options);\n  }\n\n  removeList(resourceId: string | number, boardId: number, listId: number, options?: Sudo) {\n    return RequestHelper.del()(\n      this,\n      endpoint`${resourceId}/boards/${boardId}/lists/${listId}`,\n      options,\n    );\n  }\n\n  show(resourceId: string | number, boardId: number, options?: Sudo) {\n    return RequestHelper.get<IssueBoardSchema>()(\n      this,\n      endpoint`${resourceId}/boards/${boardId}`,\n      options,\n    );\n  }\n\n  showList(resourceId: string | number, boardId: number, listId: number, options?: Sudo) {\n    return RequestHelper.get<IssueBoardListSchema>()(\n      this,\n      endpoint`${resourceId}/boards/${boardId}/lists/${listId}`,\n      options,\n    );\n  }\n}\n","import { BaseResource, BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n  ShowExpanded,\n  endpoint,\n} from '../infrastructure';\n\nexport interface LabelSchema extends Record<string, unknown> {\n  id: number;\n  name: string;\n  color: string;\n  text_color: string;\n  description: string;\n  description_html: string;\n  open_issues_count: number;\n  closed_issues_count: number;\n  open_merge_requests_count: number;\n  subscribed: boolean;\n  priority: number;\n  is_project_label: boolean;\n}\n\nexport class ResourceLabels<C extends boolean = false> extends BaseResource<C> {\n  constructor(resourceType: string, options: BaseResourceOptions<C>) {\n    super({ prefixUrl: resourceType, ...options });\n  }\n\n  all(resourceId: string | number, options?: PaginatedRequestOptions) {\n    return RequestHelper.get<LabelSchema[]>()(this, endpoint`${resourceId}/labels`, options);\n  }\n\n  create(\n    resourceId: string | number,\n    labelName: string,\n    color: string,\n    options?: BaseRequestOptions,\n  ) {\n    return RequestHelper.post<LabelSchema>()(this, endpoint`${resourceId}/labels`, {\n      name: labelName,\n      color,\n      ...options,\n    });\n  }\n\n  edit(resourceId: string | number, labelId: number | string, options?: BaseRequestOptions) {\n    return RequestHelper.put<LabelSchema>()(\n      this,\n      endpoint`${resourceId}/labels/${labelId}`,\n      options,\n    );\n  }\n\n  remove(resourceId: string | number, labelId: number | string, options?: Sudo & ShowExpanded) {\n    return RequestHelper.del()(this, endpoint`${resourceId}/labels/${labelId}`, options);\n  }\n\n  subscribe(resourceId: string | number, labelId: number | string, options?: Sudo & ShowExpanded) {\n    return RequestHelper.post<LabelSchema>()(\n      this,\n      endpoint`${resourceId}/issues/${labelId}/subscribe`,\n      options,\n    );\n  }\n\n  unsubscribe(\n    resourceId: string | number,\n    labelId: number | string,\n    options?: Sudo & ShowExpanded,\n  ) {\n    return RequestHelper.post<LabelSchema>()(\n      this,\n      endpoint`${resourceId}/issues/${labelId}/unsubscribe`,\n      options,\n    );\n  }\n}\n","import { BaseResource, BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  endpoint,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\nimport { AccessLevel } from './ResourceAccessRequests';\n\nexport interface IncludeInherited {\n  includeInherited?: boolean;\n}\n\nexport interface MemberSchema extends Record<string, unknown> {\n  id: number;\n  username: string;\n  name: string;\n  state: string;\n  avatar_url: string;\n  web_url: string;\n  expires_at: string;\n  access_level: AccessLevel;\n  email: string;\n  group_saml_identity: {\n    extern_uid: string;\n    provider: string;\n    saml_provider_id: number;\n  };\n}\n\nexport class ResourceMembers<C extends boolean = false> extends BaseResource<C> {\n  constructor(resourceType: string, options: BaseResourceOptions<C>) {\n    super({ prefixUrl: resourceType, ...options });\n  }\n\n  add(\n    resourceId: string | number,\n    userId: number,\n    accessLevel: AccessLevel,\n    options?: BaseRequestOptions,\n  ) {\n    return RequestHelper.post<MemberSchema>()(this, endpoint`${resourceId}/members`, {\n      userId: String(userId),\n      accessLevel,\n      ...options,\n    });\n  }\n\n  all(\n    resourceId: string | number,\n    { includeInherited, ...options }: IncludeInherited & PaginatedRequestOptions = {},\n  ) {\n    const rId = encodeURIComponent(resourceId);\n    const url = [rId, 'members'];\n\n    if (includeInherited) url.push('all');\n\n    return RequestHelper.get<MemberSchema[]>()(this, url.join('/'), options);\n  }\n\n  edit(\n    resourceId: string | number,\n    userId: number,\n    accessLevel: AccessLevel,\n    options?: BaseRequestOptions,\n  ) {\n    return RequestHelper.put<MemberSchema>()(this, endpoint`${resourceId}/members/${userId}`, {\n      accessLevel,\n      ...options,\n    });\n  }\n\n  show(\n    resourceId: string | number,\n    userId: number,\n    { includeInherited, ...options }: IncludeInherited & Sudo = {},\n  ) {\n    const [rId, uId] = [resourceId, userId].map(encodeURIComponent);\n    const url = [rId, 'members'];\n\n    if (includeInherited) url.push('all');\n\n    url.push(uId);\n\n    return RequestHelper.get<MemberSchema>()(\n      this,\n      url.join('/'),\n      options as Record<string, unknown>,\n    );\n  }\n\n  remove(resourceId: string | number, userId: number, options?: Sudo) {\n    return RequestHelper.del()(this, endpoint`${resourceId}/members/${userId}`, options);\n  }\n}\n","import { BaseResource, BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport {\n  RequestHelper,\n  PaginatedRequestOptions,\n  BaseRequestOptions,\n  Sudo,\n  endpoint,\n} from '../infrastructure';\nimport { IssueSchema } from '../resources/Issues';\nimport { MergeRequestSchema } from '../resources/MergeRequests';\n\nexport interface MilestoneSchema extends Record<string, unknown> {\n  id: number;\n  iid: number;\n  project_id: number;\n  title: string;\n  description: string;\n  due_date?: string;\n  start_date: string;\n  state: string;\n  updated_at: string;\n  created_at: string;\n  expired: boolean;\n  web_url?: string;\n}\n\nexport class ResourceMilestones<C extends boolean = false> extends BaseResource<C> {\n  constructor(resourceType: string, options: BaseResourceOptions<C>) {\n    super({ prefixUrl: resourceType, ...options });\n  }\n\n  all(resourceId: string | number, options?: PaginatedRequestOptions) {\n    return RequestHelper.get<MilestoneSchema[]>()(\n      this,\n      endpoint`${resourceId}/milestones`,\n      options,\n    );\n  }\n\n  create(resourceId: string | number, title: string, options?: BaseRequestOptions) {\n    return RequestHelper.post<MilestoneSchema>()(this, endpoint`${resourceId}/milestones`, {\n      title,\n      ...options,\n    });\n  }\n\n  edit(resourceId: string | number, milestoneId: number, options?: BaseRequestOptions) {\n    return RequestHelper.put<MilestoneSchema>()(\n      this,\n      endpoint`${resourceId}/milestones/${milestoneId}`,\n      options,\n    );\n  }\n\n  issues(resourceId: string | number, milestoneId: number, options?: Sudo) {\n    return RequestHelper.get<IssueSchema[]>()(\n      this,\n      endpoint`${resourceId}/milestones/${milestoneId}/issues`,\n      options,\n    );\n  }\n\n  mergeRequests(resourceId: string | number, milestoneId: number, options?: Sudo) {\n    return RequestHelper.get<MergeRequestSchema[]>()(\n      this,\n      endpoint`${resourceId}/milestones/${milestoneId}/merge_requests`,\n      options,\n    );\n  }\n\n  show(resourceId: string | number, milestoneId: number, options?: Sudo) {\n    return RequestHelper.get<MilestoneSchema>()(\n      this,\n      endpoint`${resourceId}/milestones/${milestoneId}`,\n      options,\n    );\n  }\n}\n","import { BaseResource, BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { UserSchema } from '../resources/Users';\nimport {\n  RequestHelper,\n  PaginatedRequestOptions,\n  BaseRequestOptions,\n  Sudo,\n  endpoint,\n} from '../infrastructure';\n\nexport interface NoteSchema extends Record<string, unknown> {\n  id: number;\n  body: string;\n  author: UserSchema;\n  created_at: string;\n  updated_at: string;\n  confidential: boolean;\n}\n\nexport class ResourceNotes<C extends boolean = false> extends BaseResource<C> {\n  protected resource2Type: string;\n\n  constructor(resourceType: string, resource2Type: string, options: BaseResourceOptions<C>) {\n    super({ prefixUrl: resourceType, ...options });\n\n    this.resource2Type = resource2Type;\n  }\n\n  all(\n    resourceId: string | number,\n    resource2Id: string | number,\n    options?: PaginatedRequestOptions,\n  ) {\n    return RequestHelper.get<NoteSchema[]>()(\n      this,\n      endpoint`${resourceId}/${this.resource2Type}/${resource2Id}/notes`,\n      options,\n    );\n  }\n\n  create(\n    resourceId: string | number,\n    resource2Id: string | number,\n    body: string,\n    options?: BaseRequestOptions,\n  ) {\n    return RequestHelper.post<NoteSchema>()(\n      this,\n      endpoint`${resourceId}/${this.resource2Type}/${resource2Id}/notes`,\n      {\n        body,\n        ...options,\n      },\n    );\n  }\n\n  edit(\n    resourceId: string | number,\n    resource2Id: string | number,\n    noteId: number,\n    body: string,\n    options?: BaseRequestOptions,\n  ) {\n    return RequestHelper.put<NoteSchema>()(\n      this,\n      endpoint`${resourceId}/${this.resource2Type}/${resource2Id}/notes/${noteId}`,\n      {\n        body,\n        ...options,\n      },\n    );\n  }\n\n  remove(\n    resourceId: string | number,\n    resource2Id: string | number,\n    noteId: number,\n    options?: Sudo,\n  ) {\n    return RequestHelper.del()(\n      this,\n      endpoint`${resourceId}/${this.resource2Type}/${resource2Id}/notes/${noteId}`,\n      options,\n    );\n  }\n\n  show(resourceId: string | number, resource2Id: string | number, noteId: number, options?: Sudo) {\n    return RequestHelper.get<NoteSchema>()(\n      this,\n      endpoint`${resourceId}/${this.resource2Type}/${resource2Id}/notes/${noteId}`,\n      options,\n    );\n  }\n}\n","import { BaseResource, BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { RequestHelper, PaginatedRequestOptions, Sudo } from '../infrastructure';\n\nexport interface TemplateSchema extends Record<string, unknown> {\n  name: string;\n  content: string;\n}\n\nexport class ResourceTemplates<C extends boolean = false> extends BaseResource<C> {\n  constructor(resourceType: string, options: BaseResourceOptions<C>) {\n    super({ prefixUrl: ['templates', resourceType].join('/'), ...options });\n  }\n\n  all(options?: PaginatedRequestOptions) {\n    return RequestHelper.get<TemplateSchema[]>()(this, '', options);\n  }\n\n  show(key: string | number, options?: Sudo) {\n    return RequestHelper.get<TemplateSchema>()(this, encodeURIComponent(key), options);\n  }\n}\n","import { BaseResource, BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { RequestHelper, Sudo, PaginatedRequestOptions, endpoint } from '../infrastructure';\n\nexport interface VariableSchema extends Record<string, unknown> {\n  variable_type: 'env_var' | 'file';\n  value: string;\n  protected: boolean;\n  masked: boolean;\n  environment_scope?: string; // Environment scope is only available for projects.\n  key: string;\n}\n\nexport class ResourceVariables<C extends boolean> extends BaseResource<C> {\n  constructor(resourceType: string, options: BaseResourceOptions<C>) {\n    super({ prefixUrl: resourceType, ...options });\n  }\n\n  all(resourceId: string | number, options?: PaginatedRequestOptions) {\n    return RequestHelper.get<VariableSchema[]>()(this, endpoint`${resourceId}/variables`, options);\n  }\n\n  create(resourceId: string | number, options?: VariableSchema) {\n    return RequestHelper.post<VariableSchema>()(this, endpoint`${resourceId}/variables`, options);\n  }\n\n  edit(resourceId: string | number, keyId: string, options?: Omit<VariableSchema, 'key'>) {\n    return RequestHelper.put<VariableSchema>()(\n      this,\n      endpoint`${resourceId}/variables/${keyId}`,\n      options,\n    );\n  }\n\n  show(resourceId: string | number, keyId: string, options?: PaginatedRequestOptions) {\n    return RequestHelper.get<VariableSchema>()(\n      this,\n      endpoint`${resourceId}/variables/${keyId}`,\n      options,\n    );\n  }\n\n  remove(resourceId: string | number, keyId: string, options?: Sudo) {\n    return RequestHelper.del()(this, endpoint`${resourceId}/variables/${keyId}`, options);\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceAccessRequests } from '../templates';\nimport { AccessRequestSchema, AccessLevel } from '../templates/types';\nimport { Sudo, CamelizedRecord } from '../infrastructure';\n\nexport interface GroupAccessRequests<C extends boolean = false> extends ResourceAccessRequests<C> {\n  all(groupId: string | number): Promise<CamelizedRecord<C, AccessRequestSchema>[]>;\n\n  request(groupId: string | number): Promise<CamelizedRecord<C, AccessRequestSchema>>;\n\n  approve(\n    groupId: string | number,\n    userId: number,\n    options?: { accessLevel?: AccessLevel } & Sudo,\n  ): Promise<CamelizedRecord<C, AccessRequestSchema>>;\n\n  deny(groupId: string | number, userId: number): Promise<void>;\n}\n\nexport class GroupAccessRequests<C extends boolean = false> extends ResourceAccessRequests<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('groups', options);\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceBadges } from '../templates';\nimport { BadgeSchema } from '../templates/types';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  Sudo,\n  CamelizedRecord,\n} from '../infrastructure';\n\nexport interface GroupBadgeSchema extends BadgeSchema {\n  kind: 'group';\n}\n\nexport interface GroupBadges<C extends boolean = false> extends ResourceBadges<C> {\n  add(\n    groupId: string | number,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, GroupBadgeSchema>>;\n\n  all(\n    groupId: string | number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, GroupBadgeSchema>[]>;\n\n  edit(\n    groupId: string | number,\n    badgeId: number,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, GroupBadgeSchema>>;\n\n  preview(\n    groupId: string | number,\n    linkUrl: string,\n    imageUrl: string,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, Omit<GroupBadgeSchema, 'id' | 'name' | 'kind'>>>;\n\n  remove(groupId: string | number, badgeId: number, options?: Sudo): Promise<void>;\n\n  show(\n    groupId: string | number,\n    badgeId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, GroupBadgeSchema>>;\n}\n\nexport class GroupBadges<C extends boolean = false> extends ResourceBadges<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('groups', options);\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceCustomAttributes } from '../templates';\nimport { CustomAttributeSchema } from '../templates/types';\nimport { PaginatedRequestOptions, Sudo, CamelizedRecord } from '../infrastructure';\n\nexport interface GroupCustomAttributes<C extends boolean = false>\n  extends ResourceCustomAttributes<C> {\n  all(\n    groupId: string | number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, CustomAttributeSchema>[]>;\n\n  set(\n    groupId: string | number,\n    customAttributeId: number,\n    value: string,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, CustomAttributeSchema>>;\n\n  remove(groupId: string | number, customAttributeId: number, options?: Sudo): Promise<void>;\n\n  show(\n    groupId: string | number,\n    customAttributeId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, CustomAttributeSchema>>;\n}\n\nexport class GroupCustomAttributes<C extends boolean = false> extends ResourceCustomAttributes<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('groups', options);\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { GroupSchema } from './Groups';\nimport { ResourceIssueBoards } from '../templates';\nimport { IssueBoardSchema, IssueBoardListSchema } from '../templates/types';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  Sudo,\n  CamelizedRecord,\n} from '../infrastructure';\n\nexport interface GroupIssueBoardSchema extends IssueBoardSchema {\n  group: Pick<GroupSchema, 'id' | 'name' | 'web_url'>;\n}\n\nexport interface GroupIssueBoards<C extends boolean = false> extends ResourceIssueBoards<C> {\n  all(\n    groupId: string | number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, IssueBoardSchema>[]>;\n\n  create(\n    groupId: string | number,\n    name: string,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, GroupIssueBoardSchema>>;\n\n  createList(\n    groupId: string | number,\n    boardId: number,\n    labelId: number | string,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, IssueBoardListSchema>>;\n\n  edit(\n    groupId: string | number,\n    boardId: number,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, GroupIssueBoardSchema>>;\n\n  editList(\n    groupId: string | number,\n    boardId: number,\n    listId: number,\n    position: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, IssueBoardListSchema>>;\n\n  lists(\n    groupId: string | number,\n    boardId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, IssueBoardListSchema>[]>;\n\n  remove(groupId: string | number, boardId: number, options?: Sudo): Promise<void>;\n\n  removeList(\n    groupId: string | number,\n    boardId: number,\n    listId: number,\n    options?: Sudo,\n  ): Promise<void>;\n\n  show(\n    groupId: string | number,\n    boardId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, GroupIssueBoardSchema>>;\n\n  showList(\n    groupId: string | number,\n    boardId: number,\n    listId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, IssueBoardListSchema>>;\n}\n\nexport class GroupIssueBoards<C extends boolean = false> extends ResourceIssueBoards<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('groups', options);\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceMembers } from '../templates';\nimport { MemberSchema, AccessLevel, IncludeInherited } from '../templates/types';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  CamelizedRecord,\n  Sudo,\n} from '../infrastructure';\n\nexport interface GroupMembers<C extends boolean = false> extends ResourceMembers<C> {\n  add(\n    groupId: string | number,\n    userId: number,\n    accessLevel: AccessLevel,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, MemberSchema>>;\n\n  all(\n    groupId: string | number,\n    options?: IncludeInherited & PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, MemberSchema>[]>;\n\n  edit(\n    groupId: string | number,\n    userId: number,\n    accessLevel: AccessLevel,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, MemberSchema>>;\n\n  show(\n    groupId: string | number,\n    userId: number,\n    options?: IncludeInherited & Sudo,\n  ): Promise<CamelizedRecord<C, MemberSchema>>;\n\n  remove(groupId: string | number, userId: number, options?: Sudo): Promise<void>;\n}\n\nexport class GroupMembers<C extends boolean = false> extends ResourceMembers<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('groups', options);\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceMilestones } from '../templates';\nimport { MilestoneSchema } from '../templates/types';\nimport {\n  PaginatedRequestOptions,\n  BaseRequestOptions,\n  Sudo,\n  CamelizedRecord,\n} from '../infrastructure';\nimport { IssueSchema } from './Issues';\nimport { MergeRequestSchema } from './MergeRequests';\n\nexport interface GroupMilestones<C extends boolean = false> extends ResourceMilestones<C> {\n  all(\n    groupId: string | number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, MilestoneSchema>[]>;\n\n  create(\n    groupId: string | number,\n    title: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, MilestoneSchema>>;\n\n  edit(\n    groupId: string | number,\n    milestoneId: number,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, MilestoneSchema>>;\n\n  issues(\n    groupId: string | number,\n    milestoneId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, IssueSchema>[]>;\n\n  mergeRequests(\n    groupId: string | number,\n    milestoneId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, MergeRequestSchema>[]>;\n\n  show(\n    groupId: string | number,\n    milestoneId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, MilestoneSchema>>;\n}\n\nexport class GroupMilestones<C extends boolean = false> extends ResourceMilestones<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('groups', options);\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { PaginatedRequestOptions, ShowExpanded, RequestHelper, endpoint } from '../infrastructure';\nimport { RunnerSchema } from './Runners';\n\nexport class GroupRunners<C extends boolean = false> extends BaseResource<C> {\n  all(groupId: string | number, options?: PaginatedRequestOptions & ShowExpanded) {\n    return RequestHelper.get<RunnerSchema[]>()(this, endpoint`groups/${groupId}/runners`, options);\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceVariables } from '../templates';\nimport { VariableSchema } from '../templates/types';\nimport { PaginatedRequestOptions, BaseRequestOptions, CamelizedRecord } from '../infrastructure';\n\nexport interface GroupVariables<C extends boolean = false> extends ResourceVariables<C> {\n  all(\n    groupId: string | number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, VariableSchema>[]>;\n\n  create(\n    groupId: string | number,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, VariableSchema>>;\n\n  edit(\n    groupId: string | number,\n    key: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, VariableSchema>>;\n\n  show(\n    groupId: string | number,\n    key: string,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, VariableSchema>>;\n\n  remove(groupId: string | number, key: string, options?: PaginatedRequestOptions): Promise<void>;\n}\n\nexport class GroupVariables<C extends boolean = false> extends ResourceVariables<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('groups', options);\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  CamelizedRecord,\n  Sudo,\n} from '../infrastructure';\nimport { ResourceLabels } from '../templates';\nimport { LabelSchema } from '../templates/types';\n\nexport interface GroupLabels<C extends boolean = false> extends ResourceLabels<C> {\n  all(\n    groupId: string | number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, LabelSchema>[]>;\n\n  create(\n    groupId: string | number,\n    labelName: string,\n    color: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, LabelSchema>>;\n\n  edit(\n    groupId: string | number,\n    labelId: number | string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, LabelSchema>>;\n\n  remove(groupId: string | number, labelId: number | string, options?: Sudo): Promise<void>;\n\n  subscribe(\n    groupId: string | number,\n    labelId: number | string,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, LabelSchema>>;\n\n  unsubscribe(\n    groupId: string | number,\n    labelId: number | string,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, LabelSchema>>;\n}\n\nexport class GroupLabels<C extends boolean = false> extends ResourceLabels<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('groups', options);\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceDeployTokens } from '../templates';\nimport { DeployTokenScope, DeployTokenSchema } from '../templates/types';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  CamelizedRecord,\n  Sudo,\n} from '../infrastructure';\n\nexport interface GroupDeployTokens<C extends boolean = false> extends ResourceDeployTokens<C> {\n  add(\n    groupId: string | number,\n    tokenName: string,\n    tokenScopes: DeployTokenScope[],\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, DeployTokenSchema>>;\n\n  all(\n    options?: { groupId?: string | number } & PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, DeployTokenSchema>[]>;\n\n  remove(groupId: string | number, tokenId: number, options?: Sudo): Promise<void>;\n}\n\nexport class GroupDeployTokens<C extends boolean = false> extends ResourceDeployTokens<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('groups', options);\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { UserSchema } from './Users';\nimport {\n  BaseRequestOptions,\n  endpoint,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface EpicSchema extends Record<string, unknown> {\n  id: number;\n  iid: number;\n  group_id: number;\n  parent_id: number;\n  title: string;\n  description: string;\n  state: string;\n  confidential: string;\n  web_url: string;\n  reference: string;\n  references: {\n    short: string;\n    relative: string;\n    full: string;\n  };\n  author: Omit<UserSchema, 'created_at'>;\n  start_date?: string;\n  start_date_is_fixed: boolean;\n  start_date_fixed?: string;\n  start_date_from_inherited_source?: string;\n  due_date: string;\n  due_date_is_fixed: boolean;\n  due_date_fixed?: string;\n  due_date_from_inherited_source: string;\n  created_at: string;\n  updated_at: string;\n  closed_at: string;\n  labels?: string[];\n  upvotes: number;\n  downvotes: number;\n  _links: {\n    self: string;\n    epic_issues: string;\n    group: string;\n  };\n}\n\nexport class Epics<C extends boolean = false> extends BaseResource<C> {\n  all(groupId: string | number, options?: PaginatedRequestOptions) {\n    return RequestHelper.get<EpicSchema[]>()(this, endpoint`groups/${groupId}/epics`, options);\n  }\n\n  create(groupId: string | number, title: string, options?: BaseRequestOptions) {\n    return RequestHelper.post<EpicSchema>()(this, endpoint`groups/${groupId}/epics`, {\n      title,\n      ...options,\n    });\n  }\n\n  edit(groupId: string | number, epicId: number, options?: BaseRequestOptions) {\n    return RequestHelper.put<EpicSchema>()(\n      this,\n      endpoint`groups/${groupId}/epics/${epicId}`,\n      options,\n    );\n  }\n\n  remove(groupId: string | number, epicId: number, options?: Sudo) {\n    return RequestHelper.del()(this, endpoint`groups/${groupId}/epics/${epicId}`, options);\n  }\n\n  show(groupId: string | number, epicId: number, options?: Sudo) {\n    return RequestHelper.get<EpicSchema>()(\n      this,\n      endpoint`groups/${groupId}/epics/${epicId}`,\n      options,\n    );\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { IssueSchema } from './Issues';\nimport {\n  BaseRequestOptions,\n  endpoint,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface EpicIssueSchema\n  extends Omit<IssueSchema, 'references' | 'task_completion_status'> {\n  epic_issue_id: number;\n}\n\nexport class EpicIssues<C extends boolean = false> extends BaseResource<C> {\n  all(groupId: string | number, epicIId: number, options?: PaginatedRequestOptions) {\n    return RequestHelper.get<EpicIssueSchema[]>()(\n      this,\n      endpoint`groups/${groupId}/epics/${epicIId}/issues`,\n      options,\n    );\n  }\n\n  assign(groupId: string | number, epicIId: number, epicIssueId: number, options?: Sudo) {\n    return RequestHelper.post<EpicIssueSchema>()(\n      this,\n      endpoint`groups/${groupId}/epics/${epicIId}/issues/${epicIssueId}`,\n      options,\n    );\n  }\n\n  edit(\n    groupId: string | number,\n    epicIId: number,\n    epicIssueId: number,\n    options?: BaseRequestOptions,\n  ) {\n    return RequestHelper.put<EpicIssueSchema>()(\n      this,\n      endpoint`groups/${groupId}/epics/${epicIId}/issues/${epicIssueId}`,\n      options,\n    );\n  }\n\n  remove(groupId: string | number, epicIId: number, epicIssueId: number, options?: Sudo) {\n    return RequestHelper.del()(\n      this,\n      endpoint`groups/${groupId}/epics/${epicIId}/issues/${epicIssueId}`,\n      options,\n    );\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceNotes } from '../templates';\nimport { NoteSchema } from '../templates/types';\nimport {\n  PaginatedRequestOptions,\n  BaseRequestOptions,\n  Sudo,\n  CamelizedRecord,\n} from '../infrastructure';\n\nexport interface EpicNoteSchema extends NoteSchema {\n  file_name: string;\n  expires_at: string;\n}\n\nexport interface EpicNotes<C extends boolean = false> extends ResourceNotes<C> {\n  all(\n    groupId: string | number,\n    epicId: number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, EpicNoteSchema>[]>;\n\n  create(\n    groupId: string | number,\n    epicId: number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, EpicNoteSchema>>;\n\n  edit(\n    groupId: string | number,\n    epicId: number,\n    noteId: number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, EpicNoteSchema>>;\n\n  remove(groupId: string | number, epicId: number, noteId: number, options?: Sudo): Promise<void>;\n\n  show(\n    groupId: string | number,\n    epicId: number,\n    noteId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, EpicNoteSchema>>;\n}\n\nexport class EpicNotes<C extends boolean = false> extends ResourceNotes<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('groups', 'epics', options);\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceDiscussions } from '../templates';\nimport { DiscussionSchema } from '../templates/types';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  Sudo,\n  CamelizedRecord,\n} from '../infrastructure';\n\nexport interface EpicDiscussions<C extends boolean = false> extends ResourceDiscussions<C> {\n  addNote(\n    groupId: string | number,\n    epicId: number,\n    discussionId: number,\n    noteId: number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n\n  all(\n    groupId: string | number,\n    epicId: number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>[]>;\n\n  create(\n    groupId: string | number,\n    epicId: number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n\n  editNote(\n    groupId: string | number,\n    epicId: number,\n    discussionId: number,\n    noteId: number,\n    options: BaseRequestOptions & { body: string },\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n\n  removeNote(\n    groupId: string | number,\n    epicId: number,\n    discussionId: number,\n    noteId: number,\n    options?: Sudo,\n  ): Promise<void>;\n\n  show(\n    groupId: string | number,\n    epicId: number,\n    discussionId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n}\n\nexport class EpicDiscussions<C extends boolean = false> extends ResourceDiscussions<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('groups', 'epics', options);\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\nimport { ProjectExtendedSchema } from './Projects';\nimport { EventOptions, EventSchema } from './Events';\n\nexport interface UserSchema extends Record<string, unknown> {\n  id: number;\n  name: string;\n  username: string;\n  state: string;\n  avatar_url: string;\n  web_url: string;\n  created_at?: string;\n}\n\nexport interface UserExtendedSchema extends UserSchema {\n  bio?: string;\n  location?: string;\n  public_email: string;\n  skype: string;\n  linkedin: string;\n  twitter: string;\n  website_url: string;\n  organization?: string;\n  last_sign_in_at: string;\n  confirmed_at: string;\n  last_activity_on: string;\n  email: string;\n  theme_id: number;\n  color_scheme_id: number;\n  projects_limit: number;\n  current_sign_in_at?: string;\n  identities?: string[];\n  can_create_group: boolean;\n  can_create_project: boolean;\n  two_factor_enabled: boolean;\n  external: boolean;\n  private_profile?: string;\n}\n\nexport interface UserActivitySchema extends Record<string, unknown> {\n  username: string;\n  last_activity_on: string;\n  last_activity_at: string;\n}\n\nexport class Users<C extends boolean = false> extends BaseResource<C> {\n  all(options?: PaginatedRequestOptions) {\n    return RequestHelper.get<UserSchema[]>()(this, 'users', options);\n  }\n\n  activities(options?: Sudo) {\n    return RequestHelper.get<UserActivitySchema[]>()(this, 'users/activities', options);\n  }\n\n  projects(userId: number, options?: Sudo) {\n    return RequestHelper.get<ProjectExtendedSchema[]>()(this, `users/${userId}/projects`, options);\n  }\n\n  block(userId: number, options?: Sudo) {\n    return RequestHelper.post()(this, `users/${userId}/block`, options);\n  }\n\n  create(options?: BaseRequestOptions) {\n    return RequestHelper.post<UserSchema>()(this, 'users', options);\n  }\n\n  current(options?: Sudo) {\n    return RequestHelper.get<UserSchema>()(this, 'user', options);\n  }\n\n  edit(userId: number, options?: BaseRequestOptions) {\n    return RequestHelper.put<UserSchema>()(this, `users/${userId}`, options);\n  }\n\n  events(userId: number, options?: BaseRequestOptions & EventOptions) {\n    return RequestHelper.get<EventSchema[]>()(this, `users/${userId}/events`, options);\n  }\n\n  search(emailOrUsername: string, options?: Sudo) {\n    return RequestHelper.get<UserSchema[]>()(this, 'users', {\n      search: emailOrUsername,\n      ...options,\n    });\n  }\n\n  show(userId: number, options?: BaseRequestOptions) {\n    return RequestHelper.get<UserSchema>()(this, `users/${userId}`, options);\n  }\n\n  remove(userId: number, options?: Sudo) {\n    return RequestHelper.del()(this, `users/${userId}`, options);\n  }\n\n  unblock(userId: number, options?: Sudo) {\n    return RequestHelper.post()(this, `users/${userId}/unblock`, options);\n  }\n\n  username(username: string, options?: Sudo) {\n    return RequestHelper.get<UserSchema[]>()(this, 'users', {\n      username,\n      ...options,\n    });\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceCustomAttributes } from '../templates';\nimport { CustomAttributeSchema } from '../templates/types';\nimport { PaginatedRequestOptions, CamelizedRecord, Sudo } from '../infrastructure';\n\nexport interface UserCustomAttributes<C extends boolean = false>\n  extends ResourceCustomAttributes<C> {\n  all(\n    userId: string | number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, CustomAttributeSchema>[]>;\n\n  set(\n    userId: string | number,\n    customAttributeId: number,\n    value: string,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, CustomAttributeSchema>>;\n\n  remove(userId: string | number, customAttributeId: number, options?: Sudo): Promise<void>;\n\n  show(\n    userId: string | number,\n    customAttributeId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, CustomAttributeSchema>>;\n}\n\nexport class UserCustomAttributes<C extends boolean = false> extends ResourceCustomAttributes<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('users', options);\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  Sudo,\n  PaginatedRequestOptions,\n  RequestHelper,\n} from '../infrastructure';\n\nexport interface UserEmailSchema extends Record<string, unknown> {\n  id: number;\n  email: string;\n  confirmed_at: string;\n}\n\nconst url = (userId?: number) => (userId ? `users/${userId}/emails` : 'user/emails');\n\nexport class UserEmails<C extends boolean = false> extends BaseResource<C> {\n  all({ userId, ...options }: { userId?: number } & PaginatedRequestOptions = {}) {\n    return RequestHelper.get<UserEmailSchema[]>()(this, url(userId), options);\n  }\n\n  add(email: string, { userId, ...options }: { userId?: number } & BaseRequestOptions = {}) {\n    return RequestHelper.post<UserEmailSchema>()(this, url(userId), {\n      email,\n      ...options,\n    });\n  }\n\n  show(emailId: number, options?: BaseRequestOptions) {\n    return RequestHelper.get<UserEmailSchema>()(this, `user/emails/${emailId}`, options);\n  }\n\n  remove(emailId: number, { userId, ...options }: { userId?: number } & Sudo = {}) {\n    const eId = encodeURIComponent(emailId);\n\n    return RequestHelper.del()(this, `${url(userId)}/${eId}`, options as Sudo);\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { RequestHelper, PaginatedRequestOptions, Sudo } from '../infrastructure';\n\nexport type ImpersonationTokenScope = 'api' | 'read_user';\nexport type ImpersonationTokenState = 'all' | 'active' | 'inactive';\n\nexport interface UserImpersonationTokenSchema extends Record<string, unknown> {\n  active: boolean;\n  user_id: number;\n  scopes?: string[];\n  revoked: boolean;\n  name: string;\n  id: number;\n  created_at: string;\n  impersonation: boolean;\n  expires_at: string;\n}\n\nexport class UserImpersonationTokens<C extends boolean = false> extends BaseResource<C> {\n  all(userId: number, options?: { state?: ImpersonationTokenState } & PaginatedRequestOptions) {\n    return RequestHelper.get<UserImpersonationTokenSchema[]>()(\n      this,\n      `users/${userId}/impersonation_tokens`,\n      options,\n    );\n  }\n\n  // TODO: change required params\n  add(\n    userId: number,\n    name: string,\n    scopes: ImpersonationTokenScope,\n    expiresAt: string,\n    options?: Sudo,\n  ) {\n    return RequestHelper.post<UserImpersonationTokenSchema>()(\n      this,\n      `users/${userId}/impersonation_tokens`,\n      {\n        name,\n        expiresAt,\n        scopes,\n        ...options,\n      },\n    );\n  }\n\n  show(userId: number, tokenId: number, options?: Sudo) {\n    return RequestHelper.get<UserImpersonationTokenSchema>()(\n      this,\n      `users/${userId}/impersonation_tokens/${tokenId}`,\n      options,\n    );\n  }\n\n  revoke(userId: number, tokenId: number, options?: Sudo) {\n    return RequestHelper.del()(this, `users/${userId}/impersonation_tokens/${tokenId}`, options);\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  Sudo,\n  PaginatedRequestOptions,\n  RequestHelper,\n} from '../infrastructure';\n\nexport interface UserSSHKeySchema extends Record<string, unknown> {\n  id: number;\n  key: string;\n  title: string;\n  created_at: string;\n}\n\nconst url = (userId?: number) => (userId ? `users/${userId}/keys` : 'user/keys');\n\nexport class UserSSHKeys<C extends boolean = false> extends BaseResource<C> {\n  all({ userId, ...options }: { userId?: number } & PaginatedRequestOptions = {}) {\n    return RequestHelper.get<UserSSHKeySchema[]>()(this, url(userId), options);\n  }\n\n  create(\n    title: string,\n    key: string,\n    { userId, ...options }: { userId?: number } & BaseRequestOptions = {},\n  ) {\n    return RequestHelper.post<UserSSHKeySchema>()(this, url(userId), {\n      title,\n      key,\n      ...options,\n    });\n  }\n\n  show(keyId: number, { userId, ...options }: { userId?: number } & BaseRequestOptions = {}) {\n    const kId = encodeURIComponent(keyId);\n\n    return RequestHelper.get<UserSSHKeySchema>()(this, `${url(userId)}/${kId}`, options);\n  }\n\n  remove(keyId: number, { userId, ...options }: { userId?: number } & Sudo = {}) {\n    const kId = encodeURIComponent(keyId);\n\n    return RequestHelper.del()(this, `${url(userId)}/${kId}`, options as Sudo);\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  Sudo,\n  PaginatedRequestOptions,\n  RequestHelper,\n} from '../infrastructure';\n\nexport interface UserGPGKeySchema extends Record<string, unknown> {\n  id: number;\n  key: string;\n  created_at: string;\n}\n\nconst url = (userId?: number) => (userId ? `users/${userId}/gpg_keys` : 'user/gpg_keys');\n\nexport class UserGPGKeys<C extends boolean = false> extends BaseResource<C> {\n  all({ userId, ...options }: { userId?: number } & PaginatedRequestOptions = {}) {\n    return RequestHelper.get<UserGPGKeySchema[]>()(this, url(userId), options);\n  }\n\n  add(key: string, { userId, ...options }: { userId?: number } & BaseRequestOptions = {}) {\n    return RequestHelper.post<UserGPGKeySchema>()(this, url(userId), {\n      key,\n      ...options,\n    });\n  }\n\n  show(keyId: number, { userId, ...options }: { userId?: number } & BaseRequestOptions = {}) {\n    const kId = encodeURIComponent(keyId);\n\n    return RequestHelper.get<UserGPGKeySchema>()(this, `${url(userId)}/${kId}`, options);\n  }\n\n  remove(keyId: number, { userId, ...options }: { userId?: number } & Sudo = {}) {\n    const kId = encodeURIComponent(keyId);\n\n    return RequestHelper.del()(this, `${url(userId)}/${kId}`, options as Sudo);\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { CommitSchema } from './Commits';\nimport { endpoint, PaginatedRequestOptions, RequestHelper, Sudo } from '../infrastructure';\n\nexport interface BranchSchema extends Record<string, unknown> {\n  name: string;\n  merged: boolean;\n  protected: boolean;\n  default: boolean;\n  developers_can_push: boolean;\n  developers_can_merge: boolean;\n  can_push: boolean;\n  web_url: string;\n  commit: Omit<CommitSchema, 'web_url' | 'created_at'>;\n}\n\nexport class Branches<C extends boolean = false> extends BaseResource<C> {\n  all(projectId: string | number, options?: PaginatedRequestOptions) {\n    return RequestHelper.get<BranchSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/repository/branches`,\n      options,\n    );\n  }\n\n  create(projectId: string | number, branchName: string, ref: string, options?: Sudo) {\n    const branchKey = this.url.includes('v3') ? 'branchName' : 'branch';\n\n    return RequestHelper.post<BranchSchema>()(\n      this,\n      endpoint`projects/${projectId}/repository/branches`,\n      {\n        [branchKey]: branchName,\n        ref,\n        ...options,\n      },\n    );\n  }\n\n  remove(projectId: string | number, branchName: string, options?: Sudo) {\n    return RequestHelper.del()(\n      this,\n      endpoint`projects/${projectId}/repository/branches/${branchName}`,\n      options,\n    );\n  }\n\n  show(projectId: string | number, branchName: string, options?: Sudo) {\n    return RequestHelper.get<BranchSchema>()(\n      this,\n      endpoint`projects/${projectId}/repository/branches/${branchName}`,\n      options,\n    );\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { UserSchema } from './Users';\nimport { MergeRequestSchema } from './MergeRequests';\nimport {\n  BaseRequestOptions,\n  endpoint,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface CommitAction {\n  /** The action to perform */\n  action: 'create' | 'delete' | 'move' | 'update' | 'chmod';\n  /** Full path to the file. Ex. lib/class.rb */\n  filePath: string;\n  /** Original full path to the file being moved.Ex.lib / class1.rb */\n  previousPath?: string;\n  /** File content, required for all except delete. Optional for move */\n  content?: string;\n  /** text or base64. text is default. */\n  encoding?: string;\n  /** Last known file commit id. Will be only considered in update, move and delete actions. */\n  lastCommitId?: string;\n  /** When true/false enables/disables the execute flag on the file. Only considered for chmod action. */\n  execute_filemode?: boolean;\n}\n\n// Response structures\nexport interface CommitSchema extends Record<string, unknown> {\n  id: string;\n  short_id: string;\n  created_at: Date;\n  parent_ids?: string[];\n  title: string;\n  message: string;\n  author_name: string;\n  author_email: string;\n  authored_date?: Date;\n  committer_name?: string;\n  committer_email?: string;\n  committed_date?: Date;\n  web_url: string;\n}\n\nexport interface CommitExtendedSchema extends CommitSchema {\n  last_pipeline: {\n    id: number;\n    ref: string;\n    sha: string;\n    status: string;\n  };\n  stats: {\n    additions: number;\n    deletions: number;\n    total: number;\n  };\n  status: string;\n}\n\nexport interface GPGSignatureSchema extends Record<string, unknown> {\n  signature_type: 'PGP';\n  verification_status: 'verified' | 'unverified';\n  gpg_key_id: number;\n  gpg_key_primary_keyid: string;\n  gpg_key_user_name: string;\n  gpg_key_user_email: string;\n  gpg_key_subkey_id?: number;\n  commit_source: string;\n}\n\nexport interface X509SignatureSchema extends Record<string, unknown> {\n  signature_type: 'X509';\n  verification_status: 'verified' | 'unverified';\n  x509_certificate: {\n    id: number;\n    subject: string;\n    subject_key_identifier: string;\n    email: string;\n    serial_number: string;\n    certificate_status: string;\n    x509_issuer: {\n      id: number;\n      subject: string;\n      subject_key_identifier: string;\n      crl_url: string;\n    };\n  };\n  commit_source: string;\n}\n\nexport interface MissingSignatureSchema extends Record<string, unknown> {\n  message: string;\n}\n\nexport type CommitSignatureSchema =\n  | GPGSignatureSchema\n  | X509SignatureSchema\n  | MissingSignatureSchema;\n\nexport interface CommentSchema extends Record<string, unknown> {\n  note: string;\n  line_type: 'new' | 'old';\n  path: string;\n  line: number;\n  author: Omit<UserSchema, 'created_at'>;\n}\n\nexport interface CommitDiffSchema extends Record<string, unknown> {\n  diff: string;\n  new_path: string;\n  old_path: string;\n  a_mode?: string;\n  b_mode: string;\n  new_file: boolean;\n  renamed_file: boolean;\n  deleted_file: boolean;\n}\n\nexport interface CommitStatusSchema extends Record<string, unknown> {\n  status: string;\n  created_at: string;\n  started_at?: string;\n  name: string;\n  allow_failure: boolean;\n  author: Omit<UserSchema, 'created_at'>;\n  description?: string;\n  sha: string;\n  target_url: string;\n  finished_at?: string;\n  id: number;\n  ref: string;\n}\n\nexport interface CommitReferenceSchema extends Record<string, unknown> {\n  type: 'branch' | 'tag' | 'all';\n  name: string;\n}\n\nexport class Commits<C extends boolean = false> extends BaseResource<C> {\n  all(projectId: string | number, options?: PaginatedRequestOptions) {\n    return RequestHelper.get<CommitSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/repository/commits`,\n      options,\n    );\n  }\n\n  cherryPick(projectId: string | number, sha: string, branch: string, options?: Sudo) {\n    return RequestHelper.post<CommitSchema>()(\n      this,\n      endpoint`projects/${projectId}/repository/commits/${sha}/cherry_pick`,\n      {\n        branch,\n        ...options,\n      },\n    );\n  }\n\n  comments(projectId: string | number, sha: string, options?: Sudo) {\n    return RequestHelper.get<CommentSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/repository/commits/${sha}/comments`,\n      options,\n    );\n  }\n\n  create(\n    projectId: string | number,\n    branch: string,\n    message: string,\n    actions: CommitAction[] = [],\n    options: BaseRequestOptions = {},\n  ) {\n    return RequestHelper.post<CommitExtendedSchema>()(\n      this,\n      endpoint`projects/${projectId}/repository/commits`,\n      {\n        branch,\n        commitMessage: message,\n        actions,\n        ...options,\n      },\n    );\n  }\n\n  createComment(\n    projectId: string | number,\n    sha: string,\n    note: string,\n    options?: BaseRequestOptions,\n  ) {\n    return RequestHelper.post<CommentSchema>()(\n      this,\n      endpoint`projects/${projectId}/repository/commits/${sha}/comments`,\n      {\n        note,\n        ...options,\n      },\n    );\n  }\n\n  diff(projectId: string | number, sha: string, options?: Sudo) {\n    return RequestHelper.get<CommitDiffSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/repository/commits/${sha}/diff`,\n      options,\n    );\n  }\n\n  editStatus(projectId: string | number, sha: string, options?: BaseRequestOptions) {\n    return RequestHelper.post<CommitStatusSchema>()(\n      this,\n      endpoint`projects/${projectId}/statuses/${sha}`,\n      options,\n    );\n  }\n\n  references(projectId: string | number, sha: string, options?: Sudo) {\n    return RequestHelper.get<CommitReferenceSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/repository/commits/${sha}/refs`,\n      options,\n    );\n  }\n\n  revert(projectId: string | number, sha: string, options?: Sudo) {\n    return RequestHelper.post<CommitSchema>()(\n      this,\n      endpoint`projects/${projectId}/repository/commits/${sha}/revert`,\n      options,\n    );\n  }\n\n  show(projectId: string | number, sha: string, options?: BaseRequestOptions) {\n    return RequestHelper.get<CommitExtendedSchema>()(\n      this,\n      endpoint`projects/${projectId}/repository/commits/${sha}`,\n      options,\n    );\n  }\n\n  statuses(projectId: string | number, sha: string, options?: BaseRequestOptions) {\n    return RequestHelper.get<CommitStatusSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/repository/commits/${sha}/statuses`,\n      options,\n    );\n  }\n\n  mergeRequests(projectId: string | number, sha: string, options?: BaseRequestOptions) {\n    return RequestHelper.get<MergeRequestSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/repository/commits/${sha}/merge_requests`,\n      options,\n    );\n  }\n\n  signature(projectId: string | number, sha: string, options?: BaseRequestOptions) {\n    return RequestHelper.get<CommitSignatureSchema>()(\n      this,\n      endpoint`projects/${projectId}/repository/commits/${sha}/signature`,\n      options,\n    );\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceDiscussions } from '../templates';\nimport { DiscussionSchema } from '../templates/types';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  Sudo,\n  CamelizedRecord,\n} from '../infrastructure';\n\nexport interface CommitDiscussions<C extends boolean = false> extends ResourceDiscussions<C> {\n  addNote(\n    projectId: string | number,\n    commitId: number,\n    discussionId: number,\n    noteId: number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n\n  all(\n    projectId: string | number,\n    commitId: number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>[]>;\n\n  create(\n    projectId: string | number,\n    commitId: number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n\n  editNote(\n    projectId: string | number,\n    commitId: number,\n    discussionId: number,\n    noteId: number,\n    options: BaseRequestOptions & { body: string },\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n\n  removeNote(\n    projectId: string | number,\n    commitId: number,\n    discussionId: number,\n    noteId: number,\n    options?: Sudo,\n  ): Promise<void>;\n\n  show(\n    projectId: string | number,\n    commitId: number,\n    discussionId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n}\n\nexport class CommitDiscussions<C extends boolean = false> extends ResourceDiscussions<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('projects', 'repository/commits', options);\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { RequestHelper, PaginatedRequestOptions, Sudo, endpoint } from '../infrastructure';\n\nexport interface RegistryRepositoryTagSchema extends Record<string, unknown> {\n  name: string;\n  path: string;\n  location: string;\n  revision: string;\n  short_revision: string;\n  digest: string;\n  created_at: string;\n  total_size: number;\n}\n\nexport interface RegistryRepositorySchema extends Record<string, unknown> {\n  id: number;\n  name: string;\n  path: string;\n  project_id: number;\n  location: string;\n  created_at: string;\n  cleanup_policy_started_at: string;\n  tags_count?: number;\n  tags?: Pick<RegistryRepositoryTagSchema, 'name' | 'path' | 'location'>[];\n}\n\nexport class ContainerRegistry<C extends boolean = false> extends BaseResource<C> {\n  projectRepositories(projectId: string | number, options?: PaginatedRequestOptions) {\n    return RequestHelper.get<Omit<RegistryRepositorySchema, 'tags' | 'tags_count'>[]>()(\n      this,\n      endpoint`projects/${projectId}/registry/repositories`,\n      options,\n    );\n  }\n\n  groupRepositories(projectId: string | number, options?: PaginatedRequestOptions) {\n    return RequestHelper.get<Omit<RegistryRepositorySchema, 'tags' | 'tags_count'>[]>()(\n      this,\n      endpoint`groups/${projectId}/registry/repositories`,\n      options,\n    );\n  }\n\n  showRepository(projectId: string | number, repositoryId: number, options?: Sudo) {\n    return RequestHelper.get<RegistryRepositorySchema>()(\n      this,\n      endpoint`projects/${projectId}/registry/repositories/${repositoryId}`,\n      options,\n    );\n  }\n\n  tags(projectId: string | number, repositoryId: number, options?: PaginatedRequestOptions) {\n    return RequestHelper.get<Pick<RegistryRepositoryTagSchema, 'name' | 'path' | 'location'>[]>()(\n      this,\n      endpoint`projects/${projectId}/registry/repositories/${repositoryId}/tags`,\n      options,\n    );\n  }\n\n  removeRepository(projectId: string | number, repositoryId: number, options?: Sudo) {\n    return RequestHelper.del()(\n      this,\n      endpoint`projects/${projectId}/registry/repositories/${repositoryId}`,\n      options,\n    );\n  }\n\n  removeTag(projectId: string | number, repositoryId: number, tagName: string, options?: Sudo) {\n    return RequestHelper.del()(\n      this,\n      endpoint`projects/${projectId}/registry/repositories/${repositoryId}/tags/${tagName}`,\n      options,\n    );\n  }\n\n  removeTags(\n    projectId: string | number,\n    repositoryId: number,\n    nameRegexDelete: string,\n    options?: Sudo & { nameRegexKeep: string; keepN: string; olderThan: string },\n  ) {\n    return RequestHelper.del()(\n      this,\n      endpoint`projects/${projectId}/registry/repositories/${repositoryId}/tags`,\n      {\n        nameRegexDelete,\n        ...options,\n      },\n    );\n  }\n\n  showTag(projectId: string | number, repositoryId: number, tagName: string, options?: Sudo) {\n    return RequestHelper.get<RegistryRepositoryTagSchema>()(\n      this,\n      endpoint`projects/${projectId}/registry/repositories/${repositoryId}/tags/${tagName}`,\n      options,\n    );\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { RequestHelper, PaginatedRequestOptions, Sudo, endpoint } from '../infrastructure';\nimport { CommitSchema } from './Commits';\nimport { PipelineSchema } from './Pipelines';\nimport { UserSchema } from './Users';\nimport { RunnerSchema } from './Runners';\nimport { EnvironmentSchema } from './Environments';\nimport { MergeRequestSchema } from './MergeRequests';\n\nexport type DeploymentStatus = 'created' | 'running' | 'success' | 'failed' | 'canceled';\n\nexport interface DeployableSchema {\n  id: number;\n  ref: string;\n  name: string;\n  runner?: RunnerSchema;\n  stage?: string;\n  started_at?: Date;\n  status?: DeploymentStatus;\n  tag: boolean;\n  commit?: CommitSchema;\n  coverage?: string;\n  created_at?: Date;\n  finished_at?: Date;\n  user?: UserSchema;\n  pipeline?: PipelineSchema;\n}\n\nexport type DeploymentSchema = {\n  id: number;\n  iid: number;\n  ref: string;\n  sha: string;\n  user: UserSchema;\n  created_at: string;\n  updated_at: string;\n  status: DeploymentStatus;\n  deployable: DeployableSchema;\n  environment: EnvironmentSchema;\n};\n\nexport class Deployments<C extends boolean = false> extends BaseResource<C> {\n  all(projectId: string | number, options?: PaginatedRequestOptions) {\n    return RequestHelper.get<DeploymentSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/deployments`,\n      options,\n    );\n  }\n\n  create(\n    projectId: string | number,\n    environment: string,\n    sha: string,\n    ref: string,\n    tag: string,\n    status: DeploymentStatus,\n    options?: Sudo,\n  ) {\n    return RequestHelper.post<DeploymentSchema>()(\n      this,\n      endpoint`projects/${projectId}/deployments`,\n      {\n        environment,\n        sha,\n        ref,\n        tag,\n        status,\n        ...options,\n      },\n    );\n  }\n\n  edit(projectId: string | number, deploymentId: number, status: DeploymentStatus, options?: Sudo) {\n    return RequestHelper.put<DeploymentSchema>()(\n      this,\n      endpoint`projects/${projectId}/deployments/${deploymentId}`,\n      {\n        status,\n        ...options,\n      },\n    );\n  }\n\n  show(projectId: string | number, deploymentId: number, options?: Sudo) {\n    return RequestHelper.get<DeploymentSchema>()(\n      this,\n      endpoint`projects/${projectId}/deployments/${deploymentId}`,\n      options,\n    );\n  }\n\n  mergeRequests(projectId: string | number, deploymentId: number, options?: Sudo) {\n    return RequestHelper.get<MergeRequestSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/deployments/${deploymentId}/merge_requests`,\n      options,\n    );\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport {\n  RequestHelper,\n  Sudo,\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  endpoint,\n} from '../infrastructure';\n\nexport interface DeployKeySchema extends Record<string, unknown> {\n  id: number;\n  title: string;\n  key: string;\n  can_push?: boolean;\n  created_at: string;\n}\n\nexport class DeployKeys<C extends boolean = false> extends BaseResource<C> {\n  add(projectId: string | number, options?: Sudo) {\n    return RequestHelper.post<DeployKeySchema>()(\n      this,\n      endpoint`projects/${projectId}/deploy_keys`,\n      options,\n    );\n  }\n\n  all({ projectId, ...options }: { projectId?: string | number } & PaginatedRequestOptions = {}) {\n    let url: string;\n\n    if (projectId) {\n      url = endpoint`projects/${projectId}/deploy_keys`;\n    } else {\n      url = 'deploy_keys';\n    }\n\n    return RequestHelper.get<Omit<DeployKeySchema, 'can_push'>[]>()(this, url, options);\n  }\n\n  edit(projectId: string | number, keyId: number, options?: BaseRequestOptions) {\n    return RequestHelper.put<DeployKeySchema>()(\n      this,\n      endpoint`projects/${projectId}/deploy_keys/${keyId}`,\n      options,\n    );\n  }\n\n  enable(projectId: string | number, keyId: number, options?: Sudo) {\n    return RequestHelper.post<Omit<DeployKeySchema, 'can_push'>>()(\n      this,\n      endpoint`projects/${projectId}/deploy_keys/${keyId}/enable`,\n      options,\n    );\n  }\n\n  remove(projectId: string | number, keyId: number, options?: Sudo) {\n    return RequestHelper.del()(this, endpoint`projects/${projectId}/deploy_keys/${keyId}`, options);\n  }\n\n  show(projectId: string | number, keyId: number, options?: Sudo) {\n    return RequestHelper.get<DeployKeySchema>()(\n      this,\n      endpoint`projects/${projectId}/deploy_keys/${keyId}`,\n      options,\n    );\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  endpoint,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\nimport { DeploymentSchema, DeployableSchema } from './Deployments';\nimport { ProjectSchema } from './Projects';\n\nexport interface EnvironmentSchema extends Record<string, unknown> {\n  id: number;\n  name: string;\n  slug?: string;\n  external_url?: string;\n  project?: ProjectSchema;\n  state?: string;\n  last_deployment?: DeploymentSchema;\n  deployable?: DeployableSchema;\n}\n\nexport class Environments<C extends boolean = false> extends BaseResource<C> {\n  all(projectId: string | number, options?: PaginatedRequestOptions) {\n    return RequestHelper.get<Omit<EnvironmentSchema, 'last_deployment' | 'deployable'>[]>()(\n      this,\n      endpoint`projects/${projectId}/environments`,\n      options,\n    );\n  }\n\n  show(projectId: string | number, environmentId: number, options?: Sudo) {\n    return RequestHelper.get<EnvironmentSchema>()(\n      this,\n      endpoint`projects/${projectId}/environments/${environmentId}`,\n      options,\n    );\n  }\n\n  create(projectId: string | number, options?: BaseRequestOptions) {\n    return RequestHelper.post<Omit<EnvironmentSchema, 'last_deployment' | 'deployable'>>()(\n      this,\n      endpoint`projects/${projectId}/environments`,\n      options,\n    );\n  }\n\n  edit(projectId: string | number, environmentId: number, options?: BaseRequestOptions) {\n    return RequestHelper.put<Omit<EnvironmentSchema, 'last_deployment' | 'deployable'>>()(\n      this,\n      endpoint`projects/${projectId}/environments/${environmentId}`,\n      options,\n    );\n  }\n\n  remove(projectId: string | number, environmentId: number, options?: Sudo) {\n    return RequestHelper.del()(\n      this,\n      endpoint`projects/${projectId}/environments/${environmentId}`,\n      options,\n    );\n  }\n\n  stop(projectId: string | number, environmentId: number, options?: Sudo) {\n    return RequestHelper.post<Omit<EnvironmentSchema, 'last_deployment' | 'deployable'>>()(\n      this,\n      endpoint`projects/${projectId}/environments/${environmentId}/stop`,\n      options,\n    );\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  Sudo,\n  ShowExpanded,\n  RequestHelper,\n  Camelize,\n  endpoint,\n} from '../infrastructure';\n\nexport interface FreezePeriodSchema extends Record<string, unknown> {\n  id: number;\n  freeze_start: string;\n  freeze_end: string;\n  cron_timezone: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport class FreezePeriods<C extends boolean = false> extends BaseResource<C> {\n  all(projectId: string | number, options?: BaseRequestOptions) {\n    return RequestHelper.get<FreezePeriodSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/freeze_periods`,\n      options,\n    );\n  }\n\n  show(projectId: string | number, freezePeriodId: number, options?: BaseRequestOptions) {\n    return RequestHelper.get<FreezePeriodSchema>()(\n      this,\n      endpoint`projects/${projectId}/freeze_periods/${freezePeriodId}`,\n      options,\n    );\n  }\n\n  create(\n    projectId: number | string,\n    freezeStart: string,\n    freezeEnd: string,\n    options?: Camelize<Pick<FreezePeriodSchema, 'cron_timezone'>> & BaseRequestOptions,\n  ) {\n    return RequestHelper.post<FreezePeriodSchema>()(\n      this,\n      endpoint`projects/${projectId}/freeze_periods`,\n      {\n        freezeStart,\n        freezeEnd,\n        ...options,\n      },\n    );\n  }\n\n  edit(\n    projectId: number | string,\n    freezePeriodId: number,\n    options?: Camelize<Omit<FreezePeriodSchema, 'id' | 'created_at' | 'updated_at'>> &\n      BaseRequestOptions,\n  ) {\n    return RequestHelper.put<FreezePeriodSchema>()(\n      this,\n      endpoint`projects/${projectId}/freeze_periods/${freezePeriodId}`,\n      options,\n    );\n  }\n\n  delete(projectId: number | string, freezePeriodId: number, options?: Sudo & ShowExpanded) {\n    return RequestHelper.del()(\n      this,\n      endpoint`projects/${projectId}/freeze_periods/${freezePeriodId}`,\n      options,\n    );\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { UserSchema } from './Users';\nimport { MergeRequestSchema } from './MergeRequests';\nimport { MilestoneSchema } from '../templates/types';\nimport {\n  ShowExpanded,\n  BaseRequestOptions,\n  endpoint,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface TimeStatsSchema extends Record<string, unknown> {\n  time_estimate: number;\n  total_time_spent: number;\n  human_time_estimate: string;\n  human_total_time_spent: string;\n}\n\nexport interface IssueLinkSchema extends Record<string, unknown> {\n  id: number;\n  iid: number;\n  project_id: number;\n  issue_link_id: number;\n  state: string;\n  description: string;\n  weight?: number;\n  author: Omit<UserSchema, 'created_at'>;\n  milestone: MilestoneSchema;\n  assignees?: Omit<UserSchema, 'created_at'>[];\n  title: string;\n  labels?: string[];\n  user_notes_count: number;\n  due_date: string;\n  web_url: string;\n  confidential: boolean;\n  updated_at: string;\n  link_type: 'relates_to' | 'blocks' | 'is_blocked_by';\n  link_created_at: string;\n  link_updated_at: string;\n}\n\nexport interface IssueSchema extends Record<string, unknown> {\n  state: string;\n  description: string;\n  weight?: number;\n  health_status?: string;\n  author: Omit<UserSchema, 'created_at'>;\n  milestone: MilestoneSchema;\n  project_id: number;\n  assignees?: Omit<UserSchema, 'created_at'>[];\n  updated_at: string;\n  closed_at?: string;\n  closed_by?: string;\n  id: number;\n  title: string;\n  created_at: string;\n  moved_to_id?: string;\n  iid: number;\n  labels?: string[];\n  upvotes: number;\n  downvotes: number;\n  merge_requests_count: number;\n  user_notes_count: number;\n  due_date: string;\n  web_url: string;\n  references: {\n    short: string;\n    relative: string;\n    full: string;\n  };\n  time_stats: TimeStatsSchema;\n  has_tasks: boolean;\n  task_status: string;\n  confidential: boolean;\n  discussion_locked: boolean;\n  _links: {\n    self: string;\n    notes: string;\n    award_emoji: string;\n    project: string;\n  };\n  task_completion_status: {\n    count: number;\n    completed_count: number;\n  };\n  subscribed: boolean;\n  epic?: {\n    id: number;\n    iid: number;\n    title: string;\n    url: string;\n    group_id: number;\n  };\n}\n\nexport class Issues<C extends boolean = false> extends BaseResource<C> {\n  addSpentTime(projectId: string | number, issueIid: number, duration: string, options?: Sudo) {\n    return RequestHelper.post<TimeStatsSchema>()(\n      this,\n      endpoint`projects/${projectId}/issues/${issueIid}/add_spent_time`,\n      {\n        duration,\n        ...options,\n      },\n    );\n  }\n\n  addTimeEstimate(projectId: string | number, issueIid: number, duration: string, options?: Sudo) {\n    return RequestHelper.post<TimeStatsSchema>()(\n      this,\n      endpoint`projects/${projectId}/issues/${issueIid}/time_estimate`,\n      {\n        duration,\n        ...options,\n      },\n    );\n  }\n\n  all({\n    projectId,\n    groupId,\n    ...options\n  }: { projectId?: string | number; groupId?: string | number } & PaginatedRequestOptions = {}) {\n    let url: string;\n\n    if (projectId) {\n      url = endpoint`projects/${projectId}/issues`;\n    } else if (groupId) {\n      url = endpoint`groups/${groupId}/issues`;\n    } else {\n      url = 'issues';\n    }\n\n    return RequestHelper.get<Omit<IssueSchema, 'epic'>[]>()(this, url, options);\n  }\n\n  create(projectId: string | number, options?: BaseRequestOptions) {\n    return RequestHelper.post<IssueSchema>()(this, endpoint`projects/${projectId}/issues`, options);\n  }\n\n  closedBy(projectId: string | number, issueIid: number, options?: BaseRequestOptions) {\n    return RequestHelper.get<MergeRequestSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/issues/${issueIid}/closed_by`,\n      options,\n    );\n  }\n\n  edit(projectId: string | number, issueIid: number, options?: BaseRequestOptions) {\n    return RequestHelper.put<IssueSchema>()(\n      this,\n      endpoint`projects/${projectId}/issues/${issueIid}`,\n      options,\n    );\n  }\n\n  // TODO move\n  link(\n    projectId: string | number,\n    issueIId: number,\n    targetProjectId: string | number,\n    targetIssueIId: number,\n    options?: BaseRequestOptions,\n  ) {\n    const [targetPId, targetIId] = [targetProjectId, targetIssueIId].map(encodeURIComponent);\n\n    return RequestHelper.post<IssueLinkSchema>()(\n      this,\n      endpoint`projects/${projectId}/issues/${issueIId}/links`,\n      {\n        targetProjectId: targetPId,\n        targetIssueIid: targetIId,\n        ...options,\n      },\n    );\n  }\n\n  // TODO move\n  links(projectId: string | number, issueIid: number) {\n    return RequestHelper.get<IssueLinkSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/issues/${issueIid}/links`,\n    );\n  }\n\n  participants(projectId: string | number, issueIid: number, options?: Sudo) {\n    return RequestHelper.get<Omit<UserSchema, 'created_at'>[]>()(\n      this,\n      endpoint`projects/${projectId}/issues/${issueIid}/participants`,\n      options,\n    );\n  }\n\n  relatedMergeRequests(projectId: string | number, issueIid: number, options?: BaseRequestOptions) {\n    return RequestHelper.get<MergeRequestSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/issues/${issueIid}/related_merge_requests`,\n      options,\n    );\n  }\n\n  // TODO move\n  removeLink(\n    projectId: string | number,\n    issueIid: number,\n    issueLinkId: string | number,\n    options?: { linkType?: string } & Sudo & ShowExpanded,\n  ) {\n    return RequestHelper.del()(\n      this,\n      endpoint`projects/${projectId}/issues/${issueIid}/links/${issueLinkId}`,\n      options,\n    );\n  }\n\n  remove(projectId: string | number, issueIid: number, options?: Sudo & ShowExpanded) {\n    return RequestHelper.del()(this, endpoint`projects/${projectId}/issues/${issueIid}`, options);\n  }\n\n  resetSpentTime(projectId: string | number, issueIid: number, options?: BaseRequestOptions) {\n    return RequestHelper.post<TimeStatsSchema>()(\n      this,\n      endpoint`projects/${projectId}/issues/${issueIid}/reset_spent_time`,\n      options,\n    );\n  }\n\n  resetTimeEstimate(projectId: string | number, issueIid: number, options?: Sudo) {\n    return RequestHelper.post<TimeStatsSchema>()(\n      this,\n      endpoint`projects/${projectId}/issues/${issueIid}/reset_time_estimate`,\n      options,\n    );\n  }\n\n  show(projectId: string | number, issueIid: number, options?: Sudo) {\n    return RequestHelper.get<IssueSchema>()(\n      this,\n      endpoint`projects/${projectId}/issues/${issueIid}`,\n      options,\n    );\n  }\n\n  subscribe(projectId: string | number, issueIid: number, options?: Sudo) {\n    return RequestHelper.post<IssueSchema>()(\n      this,\n      endpoint`projects/${projectId}/issues/${issueIid}/subscribe`,\n      options,\n    );\n  }\n\n  timeStats(projectId: string | number, issueIid: number, options?: Sudo) {\n    return RequestHelper.get<TimeStatsSchema>()(\n      this,\n      endpoint`projects/${projectId}/issues/${issueIid}/time_stats`,\n      options,\n    );\n  }\n\n  unsubscribe(projectId: string | number, issueIid: number, options?: Sudo) {\n    return RequestHelper.post<IssueSchema>()(\n      this,\n      endpoint`projects/${projectId}/issues/${issueIid}/unsubscribe`,\n      options,\n    );\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { RequestHelper, BaseRequestOptions, endpoint } from '../infrastructure';\n\nexport interface StatisticsSchema extends Record<string, unknown> {\n  statistics: {\n    counts: {\n      all: number;\n      closed: number;\n      opened: number;\n    };\n  };\n}\n\nexport class IssuesStatistics<C extends boolean = false> extends BaseResource<C> {\n  all({\n    projectId,\n    groupId,\n    ...options\n  }: { projectId?: string | number; groupId?: string | number } & BaseRequestOptions = {}) {\n    let url: string;\n\n    if (projectId) {\n      url = endpoint`projects/${projectId}/issues_statistics`;\n    } else if (groupId) {\n      url = endpoint`groups/${groupId}/issues_statistics`;\n    } else {\n      url = 'issues_statistics';\n    }\n\n    return RequestHelper.get<StatisticsSchema>()(this, url, options);\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceNotes } from '../templates';\nimport { NoteSchema } from '../templates/types';\nimport {\n  PaginatedRequestOptions,\n  BaseRequestOptions,\n  Sudo,\n  CamelizedRecord,\n} from '../infrastructure';\n\nexport interface IssueNoteSchema extends NoteSchema {\n  attachment?: string;\n  system: boolean;\n  noteable_id: number;\n  noteable_type: string;\n  noteable_iid: number;\n  resolvable: boolean;\n}\n\nexport interface IssueNotes<C extends boolean = false> extends ResourceNotes<C> {\n  all(\n    projectId: string | number,\n    issueIId: number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, IssueNoteSchema>[]>;\n\n  create(\n    projectId: string | number,\n    issueIId: number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, IssueNoteSchema>>;\n\n  edit(\n    projectId: string | number,\n    issueIId: number,\n    noteId: number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, IssueNoteSchema>>;\n\n  remove(\n    projectId: string | number,\n    issueIId: number,\n    noteId: number,\n    options?: Sudo,\n  ): Promise<void>;\n\n  show(\n    projectId: string | number,\n    issueIId: number,\n    noteId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, IssueNoteSchema>>;\n}\n\nexport class IssueNotes<C extends boolean = false> extends ResourceNotes<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('projects', 'issues', options);\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceNoteAwardEmojis } from '../templates';\nimport { AwardEmojiSchema } from '../templates/types';\nimport { PaginatedRequestOptions, CamelizedRecord, Sudo } from '../infrastructure';\n\nexport interface IssueNoteAwardEmojis<C extends boolean = false>\n  extends ResourceNoteAwardEmojis<C> {\n  all(\n    projectId: string | number,\n    issueIId: number,\n    noteId: number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, AwardEmojiSchema>[]>;\n\n  award(\n    projectId: string | number,\n    issueIId: number,\n    noteId: number,\n    name: string,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, AwardEmojiSchema>>;\n\n  remove(\n    projectId: string | number,\n    issueIId: number,\n    noteId: number,\n    awardId: number,\n    options?: Sudo,\n  ): Promise<void>;\n\n  show(\n    projectId: string | number,\n    issueIId: number,\n    noteId: number,\n    awardId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, AwardEmojiSchema>>;\n}\n\nexport class IssueNoteAwardEmojis<C extends boolean = false> extends ResourceNoteAwardEmojis<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('issues', options);\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceDiscussions } from '../templates';\nimport { DiscussionSchema } from '../templates/types';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  Sudo,\n  CamelizedRecord,\n} from '../infrastructure';\n\nexport interface IssueDiscussions<C extends boolean = false> extends ResourceDiscussions<C> {\n  addNote(\n    projectId: string | number,\n    issueIId: number,\n    discussionId: number,\n    noteId: number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n\n  all(\n    projectId: string | number,\n    issueIId: number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>[]>;\n\n  create(\n    projectId: string | number,\n    issueIId: number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n\n  editNote(\n    projectId: string | number,\n    issueIId: number,\n    discussionId: number,\n    noteId: number,\n    options: BaseRequestOptions & { body: string },\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n\n  removeNote(\n    projectId: string | number,\n    issueIId: number,\n    discussionId: number,\n    noteId: number,\n    options?: Sudo,\n  ): Promise<void>;\n\n  show(\n    projectId: string | number,\n    issueIId: number,\n    discussionId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n}\n\nexport class IssueDiscussions<C extends boolean = false> extends ResourceDiscussions<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('projects', 'issues', options);\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceAwardEmojis } from '../templates';\nimport { AwardEmojiSchema } from '../templates/types';\nimport { PaginatedRequestOptions, Sudo, CamelizedRecord } from '../infrastructure';\n\nexport interface IssueAwardEmojis<C extends boolean = false> extends ResourceAwardEmojis<C> {\n  all(\n    projectId: string | number,\n    issueIId: number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, AwardEmojiSchema>[]>;\n\n  award(\n    projectId: string | number,\n    issueIId: number,\n    name: string,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, AwardEmojiSchema>>;\n\n  remove(\n    projectId: string | number,\n    issueIId: number,\n    awardId: number,\n    options?: Sudo,\n  ): Promise<void>;\n\n  show(\n    projectId: string | number,\n    issueIId: number,\n    awardId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, AwardEmojiSchema>>;\n}\n\nexport class IssueAwardEmojis<C extends boolean = false> extends ResourceAwardEmojis<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('issues', options);\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  endpoint,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\nimport { CommitSchema } from './Commits';\nimport { RunnerSchema } from './Runners';\nimport { UserSchema } from './Users';\nimport { PipelineSchema } from './Pipelines';\n\nexport type JobScope =\n  | 'created'\n  | 'pending'\n  | 'running'\n  | 'failed'\n  | 'success'\n  | 'canceled'\n  | 'skipped'\n  | 'manual';\n\nexport interface ArtifactSchema extends Record<string, unknown> {\n  file_type: string;\n  size: number;\n  filename: string;\n  file_format?: string;\n}\n\nexport interface JobSchema extends Record<string, unknown> {\n  id: number;\n  status: string;\n  stage: string;\n  name: string;\n  ref: string;\n  tag: boolean;\n  coverage?: string;\n  allow_failure: boolean;\n  created_at: Date;\n  started_at?: Date;\n  finished_at?: Date;\n  duration?: number;\n  user: UserSchema;\n  commit: CommitSchema;\n  pipeline: PipelineSchema;\n  web_url: string;\n  artifacts: ArtifactSchema[];\n  runner: RunnerSchema;\n  artifacts_expire_at?: Date;\n  tag_list?: string[];\n}\n\nexport interface BridgeSchema extends Record<string, unknown> {\n  commit: Pick<\n    CommitSchema,\n    'id' | 'short_id' | 'author_name' | 'author_email' | 'message' | 'title' | 'created_at'\n  >;\n  coverage?: string;\n  allow_failure: boolean;\n  created_at: string;\n  started_at: string;\n  finished_at: string;\n  duration: number;\n  queued_duration: number;\n  id: number;\n  name: string;\n  pipeline: Omit<PipelineSchema & { project_id: number }, 'user'>;\n  ref: string;\n  stage: string;\n  status: string;\n  tag: boolean;\n  web_url: string;\n  user: UserSchema;\n  downstream_pipeline: Omit<PipelineSchema, 'user'>;\n}\n\nexport class Jobs<C extends boolean = false> extends BaseResource<C> {\n  all(projectId: string | number, options?: PaginatedRequestOptions) {\n    return RequestHelper.get<JobSchema[]>()(this, endpoint`projects/${projectId}/jobs`, options);\n  }\n\n  cancel(projectId: string | number, jobId: number, options?: Sudo) {\n    return RequestHelper.post<JobSchema>()(\n      this,\n      endpoint`projects/${projectId}/jobs/${jobId}/cancel`,\n      options,\n    );\n  }\n\n  // TODO move\n  downloadSingleArtifactFile(\n    projectId: string | number,\n    jobId: number,\n    artifactPath: string,\n    { stream = false, ...options }: { stream?: boolean } & BaseRequestOptions = {},\n  ) {\n    const [pId, jId] = [projectId, jobId].map(encodeURIComponent);\n    const url = `projects/${pId}/jobs/${jId}/artifacts/${artifactPath}`;\n\n    if (stream) {\n      return RequestHelper.stream(this, url, options);\n    }\n    return RequestHelper.get()(this, url, options);\n  }\n\n  // TODO move\n  downloadSingleArtifactFileFromRef(\n    projectId: string | number,\n    ref: string,\n    artifactPath: string,\n    jobName: string,\n    { stream = false, ...options }: { stream?: boolean } & BaseRequestOptions = {},\n  ) {\n    const [pId, rId, name] = [projectId, ref, jobName].map(encodeURIComponent);\n    const url = `projects/${pId}/jobs/artifacts/${rId}/raw/${artifactPath}?job=${name}`;\n\n    if (stream) {\n      return RequestHelper.stream(this, url, options);\n    }\n    return RequestHelper.get()(this, url, options);\n  }\n\n  // TODO move\n  downloadLatestArtifactFile(\n    projectId: string | number,\n    ref: string,\n    jobName: string,\n    { stream = false, ...options }: { stream?: boolean } & BaseRequestOptions = {},\n  ) {\n    const [pId, rId, name] = [projectId, ref, jobName].map(encodeURIComponent);\n    const url = `projects/${pId}/jobs/artifacts/${rId}/download?job=${name}`;\n\n    if (stream) {\n      return RequestHelper.stream(this, url, options);\n    }\n    return RequestHelper.get()(this, url, options);\n  }\n\n  downloadTraceFile(projectId: string | number, jobId: number, options?: Sudo) {\n    return RequestHelper.get()(this, endpoint`projects/${projectId}/jobs/${jobId}/trace`, options);\n  }\n\n  erase(projectId: string | number, jobId: number, options?: Sudo) {\n    return RequestHelper.post<JobSchema>()(\n      this,\n      endpoint`projects/${projectId}/jobs/${jobId}/erase`,\n      options,\n    );\n  }\n\n  // TODO move\n  eraseArtifacts(projectId: string | number, jobId: number, options?: Sudo) {\n    const [pId, jId] = [projectId, jobId].map(encodeURIComponent);\n\n    return RequestHelper.del()(this, `projects/${pId}/jobs/${jId}/artifacts`, options);\n  }\n\n  // TODO move\n  keepArtifacts(projectId: string | number, jobId: number, options?: Sudo) {\n    const [pId, jId] = [projectId, jobId].map(encodeURIComponent);\n\n    return RequestHelper.post()(this, `projects/${pId}/jobs/${jId}/artifacts/keep`, options);\n  }\n\n  play(projectId: string | number, jobId: number, options?: Sudo) {\n    return RequestHelper.post<JobSchema>()(\n      this,\n      endpoint`projects/${projectId}/jobs/${jobId}/play`,\n      options,\n    );\n  }\n\n  retry(projectId: string | number, jobId: number, options?: Sudo) {\n    return RequestHelper.post<JobSchema>()(\n      this,\n      endpoint`projects/${projectId}/jobs/${jobId}/retry`,\n      options,\n    );\n  }\n\n  show(projectId: string | number, jobId: number, options?: Sudo) {\n    return RequestHelper.get<JobSchema>()(\n      this,\n      endpoint`projects/${projectId}/jobs/${jobId}`,\n      options,\n    );\n  }\n\n  showPipelineJobs(\n    projectId: string | number,\n    pipelineId: number,\n    options?: { scope?: JobScope } & Sudo,\n  ) {\n    return RequestHelper.get<JobSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/pipelines/${pipelineId}/jobs`,\n      options,\n    );\n  }\n\n  showPipelineBridges(\n    projectId: string | number,\n    pipelineId: number,\n    options?: { scope?: JobScope } & Sudo,\n  ) {\n    return RequestHelper.get<BridgeSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/pipelines/${pipelineId}/bridges`,\n      options,\n    );\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  CamelizedRecord,\n  Sudo,\n} from '../infrastructure';\nimport { ResourceLabels } from '../templates';\nimport { LabelSchema } from '../templates/types';\n\nexport interface Labels<C extends boolean = false> extends ResourceLabels<C> {\n  all(\n    projectId: string | number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, LabelSchema>[]>;\n\n  create(\n    projectId: string | number,\n    labelName: string,\n    color: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, LabelSchema>>;\n\n  edit(\n    projectId: string | number,\n    labelId: number | string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, LabelSchema>>;\n\n  remove(projectId: string | number, labelId: number | string, options?: Sudo): Promise<void>;\n\n  subscribe(\n    projectId: string | number,\n    labelId: number | string,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, LabelSchema>>;\n\n  unsubscribe(\n    projectId: string | number,\n    labelId: number | string,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, LabelSchema>>;\n}\n\nexport class Labels<C extends boolean = false> extends ResourceLabels<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('projects', options);\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { UserSchema } from './Users';\nimport { PipelineSchema } from './Pipelines';\nimport { IssueSchema, TimeStatsSchema } from './Issues';\nimport { CommitSchema, CommitDiffSchema } from './Commits';\nimport { MilestoneSchema } from '../templates/types';\nimport {\n  BaseRequestOptions,\n  endpoint,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface AcceptMergeRequestOptions {\n  mergeCommitMessage?: string;\n  squashCommitMessage?: string;\n  squash?: boolean;\n  shouldRemoveSourceBranch?: boolean;\n  mergeWhenPipelineSucceeds?: boolean;\n  sha?: string;\n}\n\nexport interface ShowMergeRequestOptions {\n  renderHtml?: boolean;\n  includeDivergedCommitsCount?: true;\n  includeRebaseInProgress?: boolean;\n}\n\nexport interface CreateMergeRequestOptions {\n  assigneeId?: number;\n  description?: string;\n  targetProjectId?: number;\n  labels?: string | Array<string>;\n  milestoneId?: number;\n  removeSourceBranch?: boolean;\n  allowCollaboration?: boolean;\n  allowMaintainerToPush?: boolean;\n  squash?: boolean;\n}\n\nexport interface UpdateMergeRequestOptions {\n  targetBranch?: number;\n  title?: string;\n  assigneeId?: number;\n  reviewerId?: number;\n  milestoneId?: number;\n  labels?: string | Array<string>;\n  description?: string;\n  stateEvent?: string;\n  removeSourceBranch?: boolean;\n  squash?: boolean;\n  discussionLocked?: boolean;\n  allowCollaboration?: boolean;\n  allowMaintainerToPush?: boolean;\n}\n\nexport interface AllMergeRequestsOptions {\n  state?: 'opened' | 'closed' | 'locked' | 'merged';\n  orderBy?: 'created_at' | 'updated_at';\n  sort?: 'asc' | 'desc';\n  milestone?: 'None' | string;\n  view?: string;\n  labels?: string | Array<string>;\n  withLabelsDetails?: boolean;\n  withMergeStatusRecheck?: boolean;\n  createdAfter?: string;\n  createdBefore?: string;\n  updatedBefore?: string;\n  updatedAfter?: string;\n  scope?: 'created_by_me' | 'assigned_to_me' | 'all';\n  authorId?: number;\n  authorUsername?: string;\n  assigneeId?: number;\n  assigneeUsername?: string;\n  approverIds?: Array<number>;\n  approvedByIds?: Array<number>;\n  reviewerId?: number;\n  reviewerUsername?: string;\n  myReactionEmoji?: string;\n  sourceBranch?: string;\n  targetBranch?: string;\n  in?: string;\n  wip?: string;\n  iids?: number[];\n  mergeCommitMessage?: string;\n  squashCommitMessage?: string;\n  squash?: boolean;\n  shouldRemoveSourceBranch?: boolean;\n  mergeWhenPipelineSucceeds?: boolean;\n  sha?: string;\n  search?: string;\n  not?: {\n    labels?: string | Array<string>;\n    milestone?: string;\n    authorId?: number;\n    authorUsername?: string;\n    assigneeId?: number;\n    assigneeUsername?: string;\n    reviewerId?: number;\n    reviewerUsername?: string;\n    myReactionEmoji?: string;\n  };\n  environment?: string;\n  deployedBefore?: string;\n  deployedAfter?: string;\n}\n\n// Response Schemas\nexport interface ReferenceSchema {\n  short: string;\n  relative: string;\n  full: string;\n}\n\nexport interface TaskCompletionStatusSchema {\n  count: number;\n  completed_count: number;\n}\n\nexport interface RebaseSchema extends Record<string, unknown> {\n  rebase_in_progress?: boolean;\n  merge_error?: string;\n}\n\nexport interface DiffSchema extends Record<string, unknown> {\n  id: number;\n  head_commit_sha: string;\n  base_commit_sha: string;\n  start_commit_sha: string;\n  created_at: string;\n  merge_request_id: number;\n  state: string;\n  real_size: string;\n  commits?: CommitSchema[];\n  diffs?: CommitDiffSchema[];\n}\n\nexport interface MergeRequestSchema extends Record<string, unknown> {\n  id: number;\n  iid: number;\n  project_id: number;\n  title: string;\n  description: string;\n  state: string;\n  merged_by: Omit<UserSchema, 'created_at'>;\n  merged_at: string;\n  closed_by?: string;\n  closed_at?: string;\n  created_at: string;\n  updated_at: string;\n  target_branch: string;\n  source_branch: string;\n  upvotes: number;\n  downvotes: number;\n  author: Omit<UserSchema, 'created_at'>;\n  assignee: Omit<UserSchema, 'created_at'>;\n  assignees?: Omit<UserSchema, 'created_at'>[];\n  reviewers?: Omit<UserSchema, 'created_at'>[];\n  source_project_id: number;\n  target_project_id: number;\n  labels?: string[];\n  work_in_progress: boolean;\n  milestone: MilestoneSchema;\n  merge_when_pipeline_succeeds: boolean;\n  merge_status: string;\n  sha: string;\n  merge_commit_sha?: string;\n  squash_commit_sha?: string;\n  user_notes_count: number;\n  discussion_locked?: string;\n  should_remove_source_branch: boolean;\n  force_remove_source_branch: boolean;\n  web_url: string;\n  references: ReferenceSchema;\n  time_stats: TimeStatsSchema;\n  squash: boolean;\n  task_completion_status: TaskCompletionStatusSchema;\n  has_conflicts: boolean;\n  blocking_discussions_resolved: boolean;\n  changes?: CommitDiffSchema[];\n}\n\nexport class MergeRequests<C extends boolean = false> extends BaseResource<C> {\n  accept(\n    projectId: string | number,\n    mergerequestIid: number,\n    options?: AcceptMergeRequestOptions & BaseRequestOptions,\n  ) {\n    return RequestHelper.put<MergeRequestSchema>()(\n      this,\n      endpoint`projects/${projectId}/merge_requests/${mergerequestIid}/merge`,\n      options,\n    );\n  }\n\n  addSpentTime(\n    projectId: string | number,\n    mergerequestIid: number,\n    duration: string,\n    options?: Sudo,\n  ) {\n    return RequestHelper.post<TimeStatsSchema>()(\n      this,\n      endpoint`projects/${projectId}/merge_requests/${mergerequestIid}/add_spent_time`,\n      {\n        duration,\n        ...options,\n      },\n    );\n  }\n\n  addTimeEstimate(\n    projectId: string | number,\n    mergerequestIid: number,\n    duration: string,\n    options?: Sudo,\n  ) {\n    return RequestHelper.post<TimeStatsSchema>()(\n      this,\n      endpoint`projects/${projectId}/merge_requests/${mergerequestIid}/time_estimate`,\n      {\n        duration,\n        ...options,\n      },\n    );\n  }\n\n  all({\n    projectId,\n    groupId,\n    ...options\n  }: { projectId?: string | number; groupId?: string | number } & AllMergeRequestsOptions &\n    PaginatedRequestOptions = {}) {\n    let url: string;\n\n    if (projectId) {\n      url = endpoint`projects/${projectId}/merge_requests`;\n    } else if (groupId) {\n      url = endpoint`groups/${groupId}/merge_requests`;\n    } else {\n      url = 'merge_requests';\n    }\n\n    return RequestHelper.get<MergeRequestSchema[]>()(this, url, options);\n  }\n\n  cancelOnPipelineSucess(projectId: string | number, mergerequestIid: number, options?: Sudo) {\n    return RequestHelper.put<MergeRequestSchema>()(\n      this,\n      endpoint`projects/${projectId}/merge_requests/${mergerequestIid}/cancel_merge_when_pipeline_succeeds`,\n      options,\n    );\n  }\n\n  changes(projectId: string | number, mergerequestIid: number, options?: Sudo) {\n    return RequestHelper.get<MergeRequestSchema>()(\n      this,\n      endpoint`projects/${projectId}/merge_requests/${mergerequestIid}/changes`,\n      options,\n    );\n  }\n\n  closesIssues(projectId: string | number, mergerequestIid: number, options?: Sudo) {\n    return RequestHelper.get<IssueSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/merge_requests/${mergerequestIid}/closes_issues`,\n      options,\n    );\n  }\n\n  commits(projectId: string | number, mergerequestIid: number, options?: Sudo) {\n    return RequestHelper.get<CommitSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/merge_requests/${mergerequestIid}/commits`,\n      options,\n    );\n  }\n\n  create(\n    projectId: string | number,\n    sourceBranch: string,\n    targetBranch: string,\n    title: string,\n    options?: CreateMergeRequestOptions & BaseRequestOptions,\n  ) {\n    return RequestHelper.post<MergeRequestSchema>()(\n      this,\n      endpoint`projects/${projectId}/merge_requests`,\n      {\n        sourceBranch,\n        targetBranch,\n        title,\n        ...options,\n      },\n    );\n  }\n\n  edit(\n    projectId: string | number,\n    mergerequestIid: number,\n    options?: UpdateMergeRequestOptions & BaseRequestOptions,\n  ) {\n    return RequestHelper.put<MergeRequestSchema>()(\n      this,\n      endpoint`projects/${projectId}/merge_requests/${mergerequestIid}`,\n      options,\n    );\n  }\n\n  participants(projectId: string | number, mergerequestIid: number, options?: Sudo) {\n    return RequestHelper.get<Omit<UserSchema, 'created_at'>[]>()(\n      this,\n      endpoint`projects/${projectId}/merge_requests/${mergerequestIid}/participants`,\n      options,\n    );\n  }\n\n  pipelines(projectId: string | number, mergerequestIid: number, options?: Sudo) {\n    return RequestHelper.get<Pick<PipelineSchema, 'id' | 'sha' | 'ref' | 'status'>[]>()(\n      this,\n      endpoint`projects/${projectId}/merge_requests/${mergerequestIid}/pipelines`,\n      options,\n    );\n  }\n\n  rebase(projectId: string | number, mergerequestIid: number, options?: Sudo) {\n    return RequestHelper.put<RebaseSchema>()(\n      this,\n      endpoint`projects/${projectId}/merge_requests/${mergerequestIid}/rebase`,\n      options,\n    );\n  }\n\n  remove(projectId: string | number, mergerequestIid: number, options?: Sudo) {\n    return RequestHelper.del()(\n      this,\n      endpoint`projects/${projectId}/merge_requests/${mergerequestIid}`,\n      options,\n    );\n  }\n\n  resetSpentTime(projectId: string | number, mergerequestIid: number, options?: Sudo) {\n    return RequestHelper.post<TimeStatsSchema>()(\n      this,\n      endpoint`projects/${projectId}/merge_requests/${mergerequestIid}/reset_spent_time`,\n      options,\n    );\n  }\n\n  resetTimeEstimate(projectId: string | number, mergerequestIid: number, options?: Sudo) {\n    return RequestHelper.post<TimeStatsSchema>()(\n      this,\n      endpoint`projects/${projectId}/merge_requests/${mergerequestIid}/reset_time_estimate`,\n      options,\n    );\n  }\n\n  show(\n    projectId: string | number,\n    mergerequestIid: number,\n    options?: ShowMergeRequestOptions & BaseRequestOptions,\n  ) {\n    return RequestHelper.get<MergeRequestSchema>()(\n      this,\n      endpoint`projects/${projectId}/merge_requests/${mergerequestIid}`,\n      options,\n    );\n  }\n\n  subscribe(projectId: string | number, mergerequestIid: number, options?: Sudo) {\n    return RequestHelper.post<MergeRequestSchema>()(\n      this,\n      endpoint`projects/${projectId}/merge_requests/${mergerequestIid}/subscribe`,\n      options,\n    );\n  }\n\n  timeStats(projectId: string | number, mergerequestIid: number, options?: Sudo) {\n    return RequestHelper.get<TimeStatsSchema>()(\n      this,\n      endpoint`projects/${projectId}/merge_requests/${mergerequestIid}/time_stats`,\n      options,\n    );\n  }\n\n  version(projectId: string | number, mergerequestIid: number, versionId: number, options?: Sudo) {\n    return RequestHelper.get<DiffSchema>()(\n      this,\n      endpoint`projects/${projectId}/merge_requests/${mergerequestIid}/versions/${versionId}`,\n      options,\n    );\n  }\n\n  versions(projectId: string | number, mergerequestIid: number, options?: Sudo) {\n    return RequestHelper.get<DiffSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/merge_requests/${mergerequestIid}/versions`,\n      options,\n    );\n  }\n\n  unsubscribe(projectId: string | number, mergerequestIid: number, options?: Sudo) {\n    return RequestHelper.post<MergeRequestSchema>()(\n      this,\n      endpoint`projects/${projectId}/merge_requests/${mergerequestIid}/unsubscribe`,\n      options,\n    );\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { BaseRequestOptions, endpoint, RequestHelper, Sudo } from '../infrastructure';\nimport { UserSchema } from './Users';\nimport { GroupSchema } from './Groups';\nimport { ProtectedBranchSchema } from './ProtectedBranches';\n\nexport interface ProjectLevelMergeRequestApprovalSchema extends Record<string, unknown> {\n  approvals_before_merge: number;\n  reset_approvals_on_push: boolean;\n  disable_overriding_approvers_per_merge_request: boolean;\n  merge_requests_author_approval: boolean;\n  merge_requests_disable_committers_approval: boolean;\n  require_password_to_approve: boolean;\n}\n\nexport interface ApprovedByEntity {\n  user: Pick<UserSchema, 'name' | 'username' | 'id' | 'state' | 'avatar_url' | 'web_url'>;\n}\n\nexport interface MergeRequestLevelMergeRequestApprovalSchema extends Record<string, unknown> {\n  id: number;\n  iid: number;\n  project_id: number;\n  title: string;\n  description: string;\n  state: string;\n  created_at: string;\n  updated_at: string;\n  merge_status: string;\n  approvals_required: number;\n  approvals_left: number;\n  approved_by?: ApprovedByEntity[];\n}\n\nexport type ApprovalRulesRequestOptions = {\n  userIds?: number[];\n  groupIds?: number[];\n  protectedBranchIds?: number[];\n};\n\nexport interface ApprovalRuleSchema extends Record<string, unknown> {\n  id: number;\n  name: string;\n  rule_type: string;\n  eligible_approvers?: Pick<\n    UserSchema,\n    'name' | 'username' | 'id' | 'state' | 'avatar_url' | 'web_url'\n  >[];\n  approvals_required: number;\n  users?: Pick<UserSchema, 'name' | 'username' | 'id' | 'state' | 'avatar_url' | 'web_url'>[];\n  groups?: GroupSchema[];\n  contains_hidden_groups: boolean;\n  overridden: boolean;\n}\n\nexport interface ProjectLevelApprovalRuleSchema extends ApprovalRuleSchema {\n  protected_branches?: ProtectedBranchSchema[];\n}\n\nexport interface MergeRequestLevelApprovalRuleSchema extends ApprovalRuleSchema {\n  source_rule?: string;\n}\n\nexport class MergeRequestApprovals<C extends boolean = false> extends BaseResource<C> {\n  configuration(\n    projectId: string | number,\n    options?: { mergerequestIid?: undefined } & BaseRequestOptions,\n  ): Promise<ProjectLevelMergeRequestApprovalSchema>;\n\n  configuration(\n    projectId: string | number,\n    options: { mergerequestIid: number } & BaseRequestOptions,\n  ): Promise<MergeRequestLevelMergeRequestApprovalSchema>;\n\n  configuration(\n    projectId: string | number,\n    { mergerequestIid, ...options }: { mergerequestIid?: number } & BaseRequestOptions = {},\n  ) {\n    let url: string;\n\n    if (mergerequestIid) {\n      url = endpoint`projects/${projectId}/merge_requests/${mergerequestIid}/approvals`;\n    } else {\n      url = endpoint`projects/${projectId}/approvals`;\n    }\n\n    return RequestHelper.get()(this, url, options);\n  }\n\n  editConfiguration(\n    projectId: string | number,\n    options?: { mergerequestIid?: undefined } & BaseRequestOptions,\n  ): Promise<ProjectLevelMergeRequestApprovalSchema>;\n\n  editConfiguration(\n    projectId: string | number,\n    options: { mergerequestIid: number } & BaseRequestOptions,\n  ): Promise<MergeRequestLevelMergeRequestApprovalSchema>;\n\n  editConfiguration(\n    projectId: string | number,\n    { mergerequestIid, ...options }: { mergerequestIid?: number } & BaseRequestOptions = {},\n  ) {\n    let url: string;\n\n    if (mergerequestIid) {\n      url = endpoint`projects/${projectId}/merge_requests/${mergerequestIid}/approvals`;\n    } else {\n      url = endpoint`projects/${projectId}/approvals`;\n    }\n\n    return RequestHelper.post()(this, url, options);\n  }\n\n  approvalRule(projectId: string | number, approvalRuleId: number, options: BaseRequestOptions) {\n    return RequestHelper.get()(\n      this,\n      endpoint`projects/${projectId}/approval_rules/${approvalRuleId}`,\n      options,\n    );\n  }\n\n  approvalRules(\n    projectId: string | number,\n    options?: { mergerequestIid?: undefined } & BaseRequestOptions,\n  ): Promise<ProjectLevelApprovalRuleSchema[]>;\n\n  approvalRules(\n    projectId: string | number,\n    options: { mergerequestIid: number } & BaseRequestOptions,\n  ): Promise<MergeRequestLevelApprovalRuleSchema[]>;\n\n  approvalRules(\n    projectId: string | number,\n    { mergerequestIid, ...options }: { mergerequestIid?: number } & BaseRequestOptions = {},\n  ): any {\n    let url: string;\n\n    if (mergerequestIid) {\n      url = endpoint`projects/${projectId}/merge_requests/${mergerequestIid}/approval_rules`;\n    } else {\n      url = endpoint`projects/${projectId}/approval_rules`;\n    }\n\n    return RequestHelper.get()(this, url, options);\n  }\n\n  addApprovalRule(\n    projectId: string | number,\n    name: string,\n    approvalsRequired: number,\n    options?: { mergerequestIid?: undefined } & ApprovalRulesRequestOptions & BaseRequestOptions,\n  ): Promise<ProjectLevelApprovalRuleSchema>;\n\n  addApprovalRule(\n    projectId: string | number,\n    name: string,\n    approvalsRequired: number,\n    options: { mergerequestIid: number } & ApprovalRulesRequestOptions & BaseRequestOptions,\n  ): Promise<MergeRequestLevelApprovalRuleSchema>;\n\n  addApprovalRule(\n    projectId: string | number,\n    name: string,\n    approvalsRequired: number,\n    {\n      mergerequestIid,\n      ...options\n    }: { mergerequestIid?: number } & ApprovalRulesRequestOptions & BaseRequestOptions = {},\n  ) {\n    let url: string;\n\n    if (mergerequestIid) {\n      url = endpoint`projects/${projectId}/merge_requests/${mergerequestIid}/approval_rules`;\n    } else {\n      url = endpoint`projects/${projectId}/approval_rules`;\n    }\n\n    return RequestHelper.post()(this, url, { name, approvalsRequired, ...options });\n  }\n\n  approvalState(\n    projectId: string | number,\n    mergerequestIid: number,\n    options?: { sha?: string } & BaseRequestOptions,\n  ) {\n    return RequestHelper.get()(\n      this,\n      endpoint`projects/${projectId}/merge_requests/${mergerequestIid}/approval_state`,\n      options,\n    );\n  }\n\n  editApprovalRule(\n    projectId: string | number,\n    approvalRuleId: number,\n    name: string,\n    approvalsRequired: number,\n    options?: { mergerequestIid?: undefined } & ApprovalRulesRequestOptions & BaseRequestOptions,\n  ): Promise<ProjectLevelApprovalRuleSchema>;\n\n  editApprovalRule(\n    projectId: string | number,\n    approvalRuleId: number,\n    name: string,\n    approvalsRequired: number,\n    options: { mergerequestIid: number } & ApprovalRulesRequestOptions & BaseRequestOptions,\n  ): Promise<MergeRequestLevelApprovalRuleSchema>;\n\n  editApprovalRule(\n    projectId: string | number,\n    approvalRuleId: number,\n    name: string,\n    approvalsRequired: number,\n    {\n      mergerequestIid,\n      ...options\n    }: { mergerequestIid?: number } & ApprovalRulesRequestOptions & BaseRequestOptions = {},\n  ) {\n    let url: string;\n\n    if (mergerequestIid) {\n      url = endpoint`projects/${projectId}/merge_requests/${mergerequestIid}/approval_rules/${approvalRuleId}`;\n    } else {\n      url = endpoint`projects/${projectId}/approval_rules/${approvalRuleId}`;\n    }\n\n    return RequestHelper.put()(this, url, { name, approvalsRequired, ...options });\n  }\n\n  removeApprovalRule(\n    projectId: string | number,\n    approvalRuleId: number,\n    options?: { mergerequestIid?: undefined } & Sudo,\n  ): Promise<void>;\n\n  removeApprovalRule(\n    projectId: string | number,\n    approvalRuleId: number,\n    options: { mergerequestIid: number } & Sudo,\n  ): Promise<void>;\n\n  removeApprovalRule(\n    projectId: string | number,\n    approvalRuleId: number,\n    { mergerequestIid, ...options }: { mergerequestIid?: number } & Sudo = {},\n  ) {\n    let url: string;\n\n    if (mergerequestIid) {\n      url = endpoint`projects/${projectId}/merge_requests/${mergerequestIid}/approval_rules/${approvalRuleId}`;\n    } else {\n      url = endpoint`projects/${projectId}/approval_rules/${approvalRuleId}`;\n    }\n\n    return RequestHelper.del()(this, url, { ...options });\n  }\n\n  approve(\n    projectId: string | number,\n    mergerequestIid: number,\n    options?: { sha?: string } & BaseRequestOptions,\n  ) {\n    return RequestHelper.post<MergeRequestLevelMergeRequestApprovalSchema>()(\n      this,\n      endpoint`projects/${projectId}/merge_requests/${mergerequestIid}/approve`,\n      options,\n    );\n  }\n\n  unapprove(projectId: string | number, mergerequestIid: number, options?: Sudo) {\n    return RequestHelper.post<void>()(\n      this,\n      endpoint`projects/${projectId}/merge_requests/${mergerequestIid}/unapprove`,\n      options,\n    );\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceAwardEmojis } from '../templates';\nimport { AwardEmojiSchema } from '../templates/types';\nimport { PaginatedRequestOptions, Sudo, CamelizedRecord } from '../infrastructure';\n\nexport interface MergeRequestAwardEmojis<C extends boolean = false> extends ResourceAwardEmojis<C> {\n  all(\n    projectId: string | number,\n    mergerequestIId: number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, AwardEmojiSchema>[]>;\n\n  award(\n    projectId: string | number,\n    mergerequestIId: number,\n    name: string,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, AwardEmojiSchema>>;\n\n  remove(\n    projectId: string | number,\n    mergerequestIId: number,\n    awardId: number,\n    options?: Sudo,\n  ): Promise<void>;\n\n  show(\n    projectId: string | number,\n    mergerequestIId: number,\n    awardId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, AwardEmojiSchema>>;\n}\n\nexport class MergeRequestAwardEmojis<C extends boolean = false> extends ResourceAwardEmojis<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('merge_requests', options);\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceDiscussions } from '../templates';\nimport { DiscussionSchema } from '../templates/types';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  Sudo,\n  CamelizedRecord,\n} from '../infrastructure';\n\nexport interface MergeRequestDiscussions<C extends boolean = false> extends ResourceDiscussions<C> {\n  addNote(\n    projectId: string | number,\n    mergerequestId: string | number,\n    discussionId: number,\n    noteId: number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n\n  all(\n    projectId: string | number,\n    mergerequestId: string | number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>[]>;\n\n  create(\n    projectId: string | number,\n    mergerequestId: string | number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n\n  editNote(\n    projectId: string | number,\n    mergerequestId: string | number,\n    discussionId: number,\n    noteId: number,\n    options: BaseRequestOptions & ({ body: string } | { resolved: boolean }),\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n\n  removeNote(\n    projectId: string | number,\n    mergerequestId: string | number,\n    discussionId: number,\n    noteId: number,\n    options?: Sudo,\n  ): Promise<void>;\n\n  show(\n    projectId: string | number,\n    mergerequestId: string | number,\n    discussionId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n}\n\nexport class MergeRequestDiscussions<C extends boolean = false> extends ResourceDiscussions<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('projects', 'merge_requests', options);\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceNotes } from '../templates';\nimport { NoteSchema } from '../templates/types';\nimport {\n  PaginatedRequestOptions,\n  BaseRequestOptions,\n  Sudo,\n  CamelizedRecord,\n} from '../infrastructure';\n\nexport interface MergeRequestNoteSchema extends NoteSchema {\n  attachment?: string;\n  system: boolean;\n  noteable_id: number;\n  noteable_type: string;\n  noteable_iid: number;\n  resolvable: boolean;\n}\n\nexport interface MergeRequestNotes<C extends boolean = false> extends ResourceNotes<C> {\n  all(\n    projectId: string | number,\n    mergerequestId: string | number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, MergeRequestNoteSchema>[]>;\n\n  create(\n    projectId: string | number,\n    mergerequestId: string | number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, MergeRequestNoteSchema>>;\n\n  edit(\n    projectId: string | number,\n    mergerequestId: string | number,\n    noteId: number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, MergeRequestNoteSchema>>;\n\n  remove(\n    projectId: string | number,\n    mergerequestId: string | number,\n    noteId: number,\n    options?: Sudo,\n  ): Promise<void>;\n\n  show(\n    projectId: string | number,\n    mergerequestIdepicId: string | number,\n    noteId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, MergeRequestNoteSchema>>;\n}\n\nexport class MergeRequestNotes<C extends boolean = false> extends ResourceNotes<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('projects', 'merge_requests', options);\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { PipelineSchema } from './Pipelines';\nimport { endpoint, PaginatedRequestOptions, RequestHelper, Sudo } from '../infrastructure';\n\nexport interface PackageSchema extends Record<string, unknown> {\n  id: number;\n  name: string;\n  version: string;\n  package_type: string;\n  created_at: string;\n}\n\nexport interface PackageFileSchema extends Record<string, unknown> {\n  id: number;\n  package_id: number;\n  created_at: string;\n  file_name: string;\n  size: number;\n  file_md5: string;\n  file_sha1: string;\n  pipelines?: PipelineSchema[];\n}\n\nexport class Packages<C extends boolean = false> extends BaseResource<C> {\n  all({\n    projectId,\n    groupId,\n    ...options\n  }: { projectId?: string | number; groupId?: string | number } & PaginatedRequestOptions = {}) {\n    let url: string;\n\n    if (projectId) {\n      url = endpoint`projects/${projectId}/packages`;\n    } else if (groupId) {\n      url = endpoint`groups/${groupId}/packages`;\n    } else {\n      throw new Error('projectId or groupId must be passed');\n    }\n\n    return RequestHelper.get<PackageSchema[]>()(this, url, options);\n  }\n\n  remove(projectId: string | number, packageId: number, options?: Sudo) {\n    return RequestHelper.del()(\n      this,\n      endpoint`projects/${projectId}/packages/${packageId}`,\n      options,\n    );\n  }\n\n  removeFile(projectId: string | number, packageId: number, projectFileId: number, options?: Sudo) {\n    return RequestHelper.del()(\n      this,\n      endpoint`projects/${projectId}/packages/${packageId}/package_files/${projectFileId}`,\n      options,\n    );\n  }\n\n  show(projectId: string | number, packageId: number, options?: Sudo) {\n    return RequestHelper.get<PackageSchema>()(\n      this,\n      endpoint`projects/${projectId}/packages/${packageId}`,\n      options,\n    );\n  }\n\n  showFiles(projectId: string | number, packageId: number, options?: Sudo) {\n    return RequestHelper.get<PackageFileSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/packages/${packageId}/package_files`,\n      options,\n    );\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport * as Mime from 'mime/lite';\nimport { RequestHelper, Sudo } from '../infrastructure';\n\nexport class PackageRegistry<C extends boolean = false> extends BaseResource<C> {\n  publish(\n    projectId: string | number,\n    packageName: string,\n    packageVersion: string,\n    filename: string,\n    content: string,\n    { contentType, ...options }: { contentType?: string } & { status?: 'default' | 'hidden' } = {},\n  ) {\n    const pId = encodeURIComponent(projectId);\n    const meta = { filename, contentType };\n\n    if (!meta.contentType) meta.contentType = Mime.getType(meta.filename) || undefined;\n\n    return RequestHelper.put<{ message: string }>()(\n      this,\n      `projects/${pId}/packages/generic/${packageName}/${packageVersion}/${filename}`,\n      {\n        isForm: true,\n        file: [content, meta],\n        ...options,\n      },\n    );\n  }\n\n  download(\n    projectId: string | number,\n    packageName: string,\n    packageVersion: string,\n    filename: string,\n    options?: Sudo,\n  ) {\n    const pId = encodeURIComponent(projectId);\n\n    return RequestHelper.get<{ message: string }>()(\n      this,\n      `projects/${pId}/packages/generic/${packageName}/${packageVersion}/${filename}`,\n      options,\n    );\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { UserSchema } from './Users';\nimport {\n  BaseRequestOptions,\n  endpoint,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport type PipelineStatus =\n  | 'created'\n  | 'waiting_for_resource'\n  | 'preparing'\n  | 'pending'\n  | 'running'\n  | 'failed'\n  | 'success'\n  | 'canceled'\n  | 'skipped'\n  | 'manual'\n  | 'scheduled';\n\nexport interface PipelineSchema extends Record<string, unknown> {\n  id: number;\n  status: PipelineStatus;\n  ref: string;\n  sha: string;\n  web_url: string;\n  created_at: string;\n  updated_at: string;\n  user: Pick<UserSchema, 'name' | 'avatar_url'>;\n}\n\nexport interface PipelineExtendedSchema extends PipelineSchema {\n  project_id: number;\n  before_sha: string;\n  tag: boolean;\n  yaml_errors?: string;\n  user: Pick<UserSchema, 'name' | 'username' | 'id' | 'state' | 'avatar_url' | 'web_url'>;\n  started_at?: string;\n  finished_at: string;\n  committed_at?: string;\n  duration?: string;\n  coverage?: string;\n}\n\nexport interface PipelineVariableSchema extends Record<string, unknown> {\n  key: string;\n  variable_type?: string;\n  value: string;\n}\n\n// TODO: Add missing function\n\nexport class Pipelines<C extends boolean = false> extends BaseResource<C> {\n  all(projectId: string | number, options?: PaginatedRequestOptions) {\n    return RequestHelper.get<PipelineSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/pipelines`,\n      options,\n    );\n  }\n\n  create(projectId: string | number, ref: string, options?: BaseRequestOptions) {\n    return RequestHelper.post<PipelineSchema>()(this, endpoint`projects/${projectId}/pipeline`, {\n      ref,\n      ...options,\n    });\n  }\n\n  delete(projectId: string | number, pipelineId: number, options?: Sudo) {\n    return RequestHelper.del()(\n      this,\n      endpoint`projects/${projectId}/pipelines/${pipelineId}`,\n      options,\n    );\n  }\n\n  show(projectId: string | number, pipelineId: number, options?: Sudo) {\n    return RequestHelper.get<PipelineSchema>()(\n      this,\n      endpoint`projects/${projectId}/pipelines/${pipelineId}`,\n      options,\n    );\n  }\n\n  retry(projectId: string | number, pipelineId: number, options?: Sudo) {\n    return RequestHelper.post<PipelineExtendedSchema>()(\n      this,\n      endpoint`projects/${projectId}/pipelines/${pipelineId}/retry`,\n      options,\n    );\n  }\n\n  cancel(projectId: string | number, pipelineId: number, options?: Sudo) {\n    return RequestHelper.post<PipelineExtendedSchema>()(\n      this,\n      endpoint`projects/${projectId}/pipelines/${pipelineId}/cancel`,\n      options,\n    );\n  }\n\n  allVariables(projectId: string | number, pipelineId: number, options?: PaginatedRequestOptions) {\n    return RequestHelper.get<PipelineVariableSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/pipelines/${pipelineId}/variables`,\n      options,\n    );\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { UserSchema } from './Users';\nimport { PipelineSchema, PipelineVariableSchema } from './Pipelines';\nimport {\n  BaseRequestOptions,\n  endpoint,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface PipelineScheduleSchema extends Record<string, unknown> {\n  id: number;\n  description: string;\n  ref: string;\n  cron: string;\n  cron_timezone: string;\n  next_run_at: string;\n  active: boolean;\n  created_at: string;\n  updated_at: string;\n  owner: Pick<UserSchema, 'name' | 'username' | 'id' | 'state' | 'avatar_url' | 'web_url'>;\n}\n\nexport interface PipelineScheduleExtendedSchema extends PipelineScheduleSchema {\n  last_pipeline: Pick<PipelineSchema, 'id' | 'sha' | 'ref' | 'status'>;\n}\n\nexport class PipelineSchedules<C extends boolean = false> extends BaseResource<C> {\n  all(projectId: string | number, options?: PaginatedRequestOptions) {\n    return RequestHelper.get<PipelineScheduleSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/pipeline_schedules`,\n      options,\n    );\n  }\n\n  create(\n    projectId: string | number,\n    description: string,\n    ref: string,\n    cron: string,\n    options?: BaseRequestOptions,\n  ) {\n    return RequestHelper.post<PipelineScheduleSchema & { variables?: PipelineVariableSchema[] }>()(\n      this,\n      endpoint`projects/${projectId}/pipeline_schedules`,\n      {\n        description,\n        ref,\n        cron,\n        ...options,\n      },\n    );\n  }\n\n  edit(projectId: string | number, scheduleId: number, options?: BaseRequestOptions) {\n    return RequestHelper.put<PipelineScheduleExtendedSchema>()(\n      this,\n      endpoint`projects/${projectId}/pipeline_schedules/${scheduleId}`,\n      options,\n    );\n  }\n\n  remove(projectId: string | number, scheduleId: number, options?: Sudo) {\n    return RequestHelper.del<PipelineScheduleExtendedSchema>()(\n      this,\n      endpoint`projects/${projectId}/pipeline_schedules/${scheduleId}`,\n      options,\n    );\n  }\n\n  show(projectId: string | number, scheduleId: number, options?: Sudo) {\n    return RequestHelper.get<PipelineScheduleExtendedSchema>()(\n      this,\n      endpoint`projects/${projectId}/pipeline_schedules/${scheduleId}`,\n      options,\n    );\n  }\n\n  takeOwnership(projectId: string | number, scheduleId: number, options?: Sudo) {\n    return RequestHelper.post<PipelineScheduleExtendedSchema>()(\n      this,\n      endpoint`projects/${projectId}/pipeline_schedules/${scheduleId}/take_ownership`,\n      options,\n    );\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { PipelineVariableSchema } from './Pipelines';\nimport {\n  BaseRequestOptions,\n  endpoint,\n  PaginatedRequestOptions,\n  RequestHelper,\n} from '../infrastructure';\n\nexport class PipelineScheduleVariables<C extends boolean = false> extends BaseResource<C> {\n  all(projectId: string | number, pipelineScheduleId: number, options?: PaginatedRequestOptions) {\n    return RequestHelper.get<PipelineVariableSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/pipeline_schedules/${pipelineScheduleId}/variables`,\n      options,\n    );\n  }\n\n  create(projectId: string | number, pipelineScheduleId: number, options?: BaseRequestOptions) {\n    return RequestHelper.post<PipelineVariableSchema>()(\n      this,\n      endpoint`projects/${projectId}/pipeline_schedules/${pipelineScheduleId}/variables`,\n      options,\n    );\n  }\n\n  edit(\n    projectId: string | number,\n    pipelineScheduleId: number,\n    keyId: string,\n    options?: BaseRequestOptions,\n  ) {\n    return RequestHelper.put<PipelineVariableSchema>()(\n      this,\n      endpoint`projects/${projectId}/pipeline_schedules/${pipelineScheduleId}/variables/${keyId}`,\n      options,\n    );\n  }\n\n  show(\n    projectId: string | number,\n    pipelineScheduleId: number,\n    keyId: string,\n    options?: BaseRequestOptions,\n  ) {\n    return RequestHelper.get<PipelineVariableSchema>()(\n      this,\n      endpoint`projects/${projectId}/pipeline_schedules/${pipelineScheduleId}/variables/${keyId}`,\n      options,\n    );\n  }\n\n  remove(\n    projectId: string | number,\n    pipelineScheduleId: number,\n    keyId: string,\n    options?: BaseRequestOptions,\n  ) {\n    return RequestHelper.del<PipelineVariableSchema>()(\n      this,\n      endpoint`projects/${projectId}/pipeline_schedules/${pipelineScheduleId}/variables/${keyId}`,\n      options,\n    );\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport * as Mime from 'mime/lite';\nimport { RequestHelper, Sudo, BaseRequestOptions, endpoint } from '../infrastructure';\n\nexport interface ExportStatusSchema extends Record<string, unknown> {\n  id: number;\n  description: string;\n  name: string;\n  name_with_namespace: string;\n  path: string;\n  path_with_namespace: string;\n  created_at: string;\n  export_status: string;\n  _links: {\n    api_url: string;\n    web_url: string;\n  };\n}\n\nexport interface FailedRelationSchema {\n  id: number;\n  created_at: string;\n  exception_class: string;\n  exception_message: string;\n  source: string;\n  relation_name: string;\n}\n\nexport interface ImportStatusSchema extends Record<string, unknown> {\n  id: number;\n  description: string;\n  name: string;\n  name_with_namespace: string;\n  path: string;\n  path_with_namespace: string;\n  created_at: string;\n  import_status: string;\n  correlation_id: string;\n  failed_relations?: FailedRelationSchema[];\n}\n\nexport interface UploadMetadata {\n  filename?: string;\n  contentType?: string;\n}\n\nexport const defaultMetadata = {\n  filename: `${Date.now().toString()}.tar.gz`,\n};\n\nexport class ProjectImportExport<C extends boolean = false> extends BaseResource<C> {\n  download(projectId: string | number, options?: Sudo) {\n    return RequestHelper.get()(this, endpoint`projects/${projectId}/export/download`, options);\n  }\n\n  exportStatus(projectId: string | number, options?: Sudo) {\n    return RequestHelper.get<ExportStatusSchema>()(\n      this,\n      endpoint`projects/${projectId}/export`,\n      options,\n    );\n  }\n\n  import(\n    content: string,\n    path: string,\n    { metadata, ...options }: { metadata?: UploadMetadata } & BaseRequestOptions = {},\n  ) {\n    const meta = { ...defaultMetadata, ...metadata };\n\n    if (!meta.contentType) meta.contentType = Mime.getType(meta.filename) || undefined;\n\n    return RequestHelper.post<ImportStatusSchema>()(this, 'projects/import', {\n      isForm: true,\n      ...options,\n      file: [content, meta],\n      path,\n    });\n  }\n\n  importStatus(projectId: string | number, options?: Sudo) {\n    return RequestHelper.get<ImportStatusSchema>()(\n      this,\n      endpoint`projects/${projectId}/import`,\n      options,\n    );\n  }\n\n  schedule(projectId: string | number, options?: BaseRequestOptions) {\n    return RequestHelper.post<{ message: string }>()(\n      this,\n      endpoint`projects/${projectId}/export`,\n      options,\n    );\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport * as Mime from 'mime/lite';\nimport { UserSchema } from './Users';\nimport { NamespaceSchema } from './Namespaces';\nimport { LicenseTemplateSchema } from './LicenseTemplates';\nimport { UploadMetadata, defaultMetadata } from './ProjectImportExport';\nimport {\n  BaseRequestOptions,\n  endpoint,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\nimport { AccessLevel } from '../templates/types';\n\n// TODO add missing functions\nexport interface ProjectSchema extends Record<string, unknown> {\n  id: number;\n  description?: string;\n  default_branch: string;\n  ssh_url_to_repo: string;\n  http_url_to_repo: string;\n  web_url: string;\n  readme_url: string;\n  tag_list?: string[];\n  topics?: string[];\n  name: string;\n  name_with_namespace: string;\n  namespace: Pick<\n    NamespaceSchema,\n    'id' | 'name' | 'path' | 'kind' | 'full_path' | 'avatar_url' | 'web_url'\n  >;\n  path: string;\n  path_with_namespace: string;\n  created_at: string;\n  last_activity_at: string;\n  forks_count: number;\n  avatar_url: string;\n  star_count: number;\n}\n\nexport interface AccessSchema {\n  access_level: AccessLevel;\n  notification_level: number;\n}\n\nexport interface SharedWithGroupSchema {\n  group_id: number;\n  group_name: string;\n  group_full_path: string;\n  group_access_level: number;\n}\n\nexport interface ProjectExtendedSchema extends ProjectSchema {\n  visibility: string;\n  owner: Pick<UserSchema, 'id' | 'name' | 'created_at'>;\n  issues_enabled: boolean;\n  open_issues_count: number;\n  merge_requests_enabled: boolean;\n  jobs_enabled: boolean;\n  wiki_enabled: boolean;\n  snippets_enabled: boolean;\n  can_create_merge_request_in: boolean;\n  resolve_outdated_diff_discussions: boolean;\n  container_registry_enabled: boolean;\n  container_expiration_policy: {\n    cadence: string;\n    enabled: boolean;\n    keep_n?: number;\n    older_than?: string;\n    name_regex_delete?: string;\n    name_regex_keep?: string;\n    next_run_at: string;\n  };\n  creator_id: number;\n  import_status: string;\n  import_error?: string;\n  permissions: {\n    project_access: AccessSchema;\n    group_access: AccessSchema;\n  };\n  archived: boolean;\n  license_url: string;\n  license: Pick<LicenseTemplateSchema, 'key' | 'name' | 'nickname' | 'html_url' | 'source_url'>;\n  shared_runners_enabled: boolean;\n  runners_token: string;\n  ci_default_git_depth: number;\n  ci_forward_deployment_enabled: boolean;\n  public_jobs: boolean;\n  shared_with_groups?: SharedWithGroupSchema[];\n  repository_storage: string;\n  only_allow_merge_if_pipeline_succeeds: boolean;\n  allow_merge_on_skipped_pipeline: boolean;\n  restrict_user_defined_variables: boolean;\n  only_allow_merge_if_all_discussions_are_resolved: boolean;\n  remove_source_branch_after_merge: boolean;\n  printing_merge_requests_link_enabled: boolean;\n  request_access_enabled: boolean;\n  merge_method: string;\n  auto_devops_enabled: boolean;\n  auto_devops_deploy_strategy: string;\n  approvals_before_merge: number;\n  mirror: boolean;\n  mirror_user_id: number;\n  mirror_trigger_builds: boolean;\n  only_mirror_protected_branches: boolean;\n  mirror_overwrites_diverged_branches: boolean;\n  external_authorization_classification_label?: string;\n  packages_enabled: boolean;\n  service_desk_enabled: boolean;\n  service_desk_address?: string;\n  autoclose_referenced_issues: boolean;\n  suggestion_commit_message?: string;\n  marked_for_deletion_at: string;\n  marked_for_deletion_on: string;\n  compliance_frameworks?: string[];\n  statistics: {\n    commit_count: number;\n    storage_size: number;\n    repository_size: number;\n    wiki_size: number;\n    lfs_objects_size: number;\n    job_artifacts_size: number;\n    packages_size: number;\n    snippets_size: number;\n  };\n  container_registry_image_prefix: string;\n  _links: {\n    self: string;\n    issues: string;\n    merge_requests: string;\n    repo_branches: string;\n    labels: string;\n    events: string;\n    members: string;\n  };\n}\n\nexport interface ProjectFileUploadSchema extends Record<string, unknown> {\n  alt: string;\n  url: string;\n  full_path: string;\n  markdown: string;\n}\n\nexport class Projects<C extends boolean = false> extends BaseResource<C> {\n  all(options?: PaginatedRequestOptions) {\n    return RequestHelper.get<ProjectSchema[]>()(this, 'projects', options);\n  }\n\n  archive(projectId: string | number, options?: Sudo) {\n    return RequestHelper.post<ProjectExtendedSchema>()(\n      this,\n      endpoint`projects/${projectId}/archive`,\n      options,\n    );\n  }\n\n  create({\n    userId,\n    ...options\n  }: ({ name: string } | { path: string }) & { userId?: number } & BaseRequestOptions) {\n    const url = userId ? `projects/user/${userId}` : 'projects';\n\n    return RequestHelper.post<ProjectExtendedSchema>()(this, url, options);\n  }\n\n  edit(projectId: string | number, options?: BaseRequestOptions) {\n    return RequestHelper.put<ProjectExtendedSchema>()(\n      this,\n      endpoint`projects/${projectId}`,\n      options,\n    );\n  }\n\n  fork(\n    projectId: string | number,\n    { forkedFromId, ...options }: { forkedFromId?: number } & BaseRequestOptions = {},\n  ) {\n    let url = endpoint`projects/${projectId}/fork`;\n\n    if (forkedFromId) url += `/${encodeURIComponent(forkedFromId)}`;\n\n    return RequestHelper.post<ProjectExtendedSchema>()(this, url, options);\n  }\n\n  forks(projectId: string | number, options?: BaseRequestOptions) {\n    return RequestHelper.get<ProjectExtendedSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/forks`,\n      options,\n    );\n  }\n\n  languages(projectId: string | number, options?: Sudo) {\n    return RequestHelper.get<{ [name: string]: number }>()(\n      this,\n      endpoint`projects/${projectId}/languages`,\n      options,\n    );\n  }\n\n  mirrorPull(projectId: string | number, options?: Sudo) {\n    return RequestHelper.post()(this, endpoint`projects/${projectId}/mirror/pull`, options);\n  }\n\n  remove(projectId: string | number, options?: Sudo) {\n    return RequestHelper.del()(this, endpoint`projects/${projectId}`, options);\n  }\n\n  removeFork(projectId: string | number, options?: Sudo) {\n    return RequestHelper.del()(this, endpoint`projects/${projectId}/fork`, options);\n  }\n\n  search(projectName: string, options?: BaseRequestOptions) {\n    return RequestHelper.get<ProjectSchema[]>()(this, 'projects', {\n      search: projectName,\n      ...options,\n    });\n  }\n\n  share(\n    projectId: string | number,\n    groupId: string | number,\n    groupAccess: number,\n    options?: BaseRequestOptions,\n  ) {\n    return RequestHelper.post()(this, endpoint`projects/${projectId}/share`, {\n      groupId,\n      groupAccess,\n      ...options,\n    });\n  }\n\n  show(projectId: string | number, options?: BaseRequestOptions) {\n    return RequestHelper.get<ProjectExtendedSchema>()(\n      this,\n      endpoint`projects/${projectId}`,\n      options,\n    );\n  }\n\n  star(projectId: string | number, options?: Sudo) {\n    return RequestHelper.post<ProjectExtendedSchema>()(\n      this,\n      endpoint`projects/${projectId}/star`,\n      options,\n    );\n  }\n\n  transfer(projectId: string | number, namespaceId: string | number) {\n    return RequestHelper.put<ProjectExtendedSchema>()(\n      this,\n      endpoint`projects/${projectId}/transfer`,\n      {\n        namespace: namespaceId,\n      },\n    );\n  }\n\n  unarchive(projectId: string | number, options?: Sudo) {\n    return RequestHelper.post<ProjectExtendedSchema>()(\n      this,\n      endpoint`projects/${projectId}/unarchive`,\n      options,\n    );\n  }\n\n  unshare(projectId: string | number, groupId: string | number, options?: Sudo) {\n    return RequestHelper.del()(this, endpoint`projects/${projectId}/share/${groupId}`, options);\n  }\n\n  unstar(projectId: string | number, options?: Sudo) {\n    return RequestHelper.post<ProjectExtendedSchema>()(\n      this,\n      endpoint`projects/${projectId}/unstar`,\n      options,\n    );\n  }\n\n  upload(\n    projectId: string | number,\n    content: string,\n    { metadata, ...options }: { metadata?: UploadMetadata } & BaseRequestOptions = {},\n  ) {\n    const meta = { ...defaultMetadata, ...metadata };\n\n    if (!meta.contentType) meta.contentType = Mime.getType(meta.filename) || undefined;\n\n    return RequestHelper.post<ProjectFileUploadSchema>()(\n      this,\n      endpoint`projects/${projectId}/uploads`,\n      {\n        isForm: true,\n        file: [content, meta],\n        ...options,\n      },\n    );\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceAccessRequests } from '../templates';\nimport { AccessRequestSchema, AccessLevel } from '../templates/types';\nimport { Sudo, CamelizedRecord } from '../infrastructure';\n\nexport interface ProjectAccessRequests<C extends boolean = false>\n  extends ResourceAccessRequests<C> {\n  all(projectId: string | number): Promise<CamelizedRecord<C, AccessRequestSchema>[]>;\n\n  request(projectId: string | number): Promise<CamelizedRecord<C, AccessRequestSchema>>;\n\n  approve(\n    projectId: string | number,\n    userId: number,\n    options?: { accessLevel?: AccessLevel } & Sudo,\n  ): Promise<CamelizedRecord<C, AccessRequestSchema>>;\n\n  deny(projectId: string | number, userId: number): Promise<void>;\n}\n\nexport class ProjectAccessRequests<C extends boolean = false> extends ResourceAccessRequests<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('projects', options);\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceBadges } from '../templates';\nimport { BadgeSchema } from '../templates/types';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  Sudo,\n  CamelizedRecord,\n} from '../infrastructure';\n\nexport interface ProjectBadgeSchema extends BadgeSchema {\n  kind: 'project';\n}\n\nexport interface ProjectBadges<C extends boolean = false> extends ResourceBadges<C> {\n  add(\n    productId: string | number,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, ProjectBadgeSchema>>;\n\n  all(\n    productId: string | number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, ProjectBadgeSchema>[]>;\n\n  edit(\n    productId: string | number,\n    badgeId: number,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, ProjectBadgeSchema>>;\n\n  preview(\n    productId: string | number,\n    linkUrl: string,\n    imageUrl: string,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, Omit<ProjectBadgeSchema, 'id' | 'name' | 'kind'>>>;\n\n  remove(productId: string | number, badgeId: number, options?: Sudo): Promise<void>;\n\n  show(\n    productId: string | number,\n    badgeId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, ProjectBadgeSchema>>;\n}\n\nexport class ProjectBadges<C extends boolean = false> extends ResourceBadges<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('projects', options);\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceCustomAttributes } from '../templates';\nimport { CustomAttributeSchema } from '../templates/types';\nimport { PaginatedRequestOptions, CamelizedRecord, Sudo } from '../infrastructure';\n\nexport interface ProjectCustomAttributes<C extends boolean = false>\n  extends ResourceCustomAttributes<C> {\n  all(\n    projectId: string | number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, CustomAttributeSchema>[]>;\n\n  set(\n    projectId: string | number,\n    customAttributeId: number,\n    value: string,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, CustomAttributeSchema>>;\n\n  remove(projectId: string | number, customAttributeId: number, options?: Sudo): Promise<void>;\n\n  show(\n    projectId: string | number,\n    customAttributeId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, CustomAttributeSchema>>;\n}\n\nexport class ProjectCustomAttributes<C extends boolean> extends ResourceCustomAttributes<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('projects', options);\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { ProjectSchema } from './Projects';\nimport { ResourceIssueBoards } from '../templates';\nimport { IssueBoardSchema, IssueBoardListSchema } from '../templates/types';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  Sudo,\n  CamelizedRecord,\n} from '../infrastructure';\n\nexport interface ProjectIssueBoardSchema extends IssueBoardSchema {\n  project: Pick<\n    ProjectSchema,\n    | 'id'\n    | 'name'\n    | 'name_with_namespace'\n    | 'path'\n    | 'path_with_namespace'\n    | 'http_url_to_repo'\n    | 'web_url'\n  >;\n}\n\nexport interface ProjectIssueBoards<C extends boolean = false> extends ResourceIssueBoards<C> {\n  all(\n    groupId: string | number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, ProjectIssueBoardSchema>[]>;\n\n  create(\n    groupId: string | number,\n    name: string,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, ProjectIssueBoardSchema>>;\n\n  createList(\n    groupId: string | number,\n    boardId: number,\n    labelId: number | string,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, IssueBoardListSchema>>;\n\n  edit(\n    groupId: string | number,\n    boardId: number,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, ProjectIssueBoardSchema>>;\n\n  editList(\n    groupId: string | number,\n    boardId: number,\n    listId: number,\n    position: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, IssueBoardListSchema>>;\n\n  lists(\n    groupId: string | number,\n    boardId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, IssueBoardListSchema>[]>;\n\n  remove(groupId: string | number, boardId: number, options?: Sudo): Promise<void>;\n\n  removeList(\n    groupId: string | number,\n    boardId: number,\n    listId: number,\n    options?: Sudo,\n  ): Promise<void>;\n\n  show(\n    groupId: string | number,\n    boardId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, ProjectIssueBoardSchema>>;\n\n  showList(\n    groupId: string | number,\n    boardId: number,\n    listId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, IssueBoardListSchema>>;\n}\n\nexport class ProjectIssueBoards<C extends boolean = false> extends ResourceIssueBoards<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('projects', options);\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  endpoint,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface ProjectHookSchema extends Record<string, unknown> {\n  id: number;\n  url: string;\n  project_id: number;\n  push_events: boolean;\n  push_events_branch_filter: string;\n  issues_events: boolean;\n  confidential_issues_events: boolean;\n  merge_requests_events: boolean;\n  tag_push_events: boolean;\n  note_events: boolean;\n  confidential_note_events: boolean;\n  job_events: boolean;\n  pipeline_events: boolean;\n  wiki_page_events: boolean;\n  deployment_events: boolean;\n  releases_events: boolean;\n  enable_ssl_verification: boolean;\n  created_at: string;\n}\n\nexport class ProjectHooks<C extends boolean = false> extends BaseResource<C> {\n  all(projectId: string | number, options?: PaginatedRequestOptions) {\n    return RequestHelper.get<ProjectHookSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/hooks`,\n      options,\n    );\n  }\n\n  show(projectId: string | number, hookId: number, options?: Sudo) {\n    return RequestHelper.get<ProjectHookSchema>()(\n      this,\n      endpoint`projects/${projectId}/hooks/${hookId}`,\n      options,\n    );\n  }\n\n  add(projectId: string | number, url: string, options?: BaseRequestOptions) {\n    return RequestHelper.post<ProjectHookSchema>()(this, endpoint`projects/${projectId}/hooks`, {\n      url,\n      ...options,\n    });\n  }\n\n  edit(projectId: string | number, hookId: number, url: string, options?: BaseRequestOptions) {\n    return RequestHelper.put<ProjectHookSchema>()(\n      this,\n      endpoint`projects/${projectId}/hooks/${hookId}`,\n      {\n        url,\n        ...options,\n      },\n    );\n  }\n\n  remove(projectId: string | number, hookId: number, options?: Sudo) {\n    return RequestHelper.del()(this, endpoint`projects/${projectId}/hooks/${hookId}`, options);\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceMembers } from '../templates';\nimport { MemberSchema, IncludeInherited, AccessLevel } from '../templates/types';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  CamelizedRecord,\n  Sudo,\n} from '../infrastructure';\n\nexport interface ProjectMembers<C extends boolean = false> extends ResourceMembers<C> {\n  add(\n    projectId: string | number,\n    userId: number,\n    accessLevel: AccessLevel,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, MemberSchema>>;\n\n  all(\n    projectId: string | number,\n    options?: IncludeInherited & PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, MemberSchema>[]>;\n\n  edit(\n    projectId: string | number,\n    userId: number,\n    accessLevel: AccessLevel,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, MemberSchema>>;\n\n  show(\n    projectId: string | number,\n    userId: number,\n    options?: IncludeInherited & Sudo,\n  ): Promise<CamelizedRecord<C, MemberSchema>>;\n\n  remove(projectId: string | number, userId: number, options?: Sudo): Promise<void>;\n}\n\nexport class ProjectMembers<C extends boolean = false> extends ResourceMembers<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('projects', options);\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { IssueSchema } from './Issues';\nimport { MergeRequestSchema } from './MergeRequests';\nimport { ResourceMilestones } from '../templates';\nimport { MilestoneSchema } from '../templates/types';\nimport {\n  PaginatedRequestOptions,\n  BaseRequestOptions,\n  Sudo,\n  CamelizedRecord,\n} from '../infrastructure';\n\nexport interface ProjectMilestones<C extends boolean = false> extends ResourceMilestones<C> {\n  all(\n    projectId: string | number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, MilestoneSchema>[]>;\n\n  create(\n    projectId: string | number,\n    title: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, MilestoneSchema>>;\n\n  edit(\n    projectId: string | number,\n    milestoneId: number,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, MilestoneSchema>>;\n\n  issues(\n    projectId: string | number,\n    milestoneId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, IssueSchema>[]>;\n\n  mergeRequests(\n    projectId: string | number,\n    milestoneId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, MergeRequestSchema>[]>;\n\n  show(\n    projectId: string | number,\n    milestoneId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, MilestoneSchema>>;\n}\n\nexport class ProjectMilestones<C extends boolean = false> extends ResourceMilestones<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('projects', options);\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  endpoint,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\nimport { SnippetVisibility } from './Snippets';\nimport { UserSchema } from './Users';\n\nexport interface ProjectSnippetSchema extends Record<string, unknown> {\n  id: number;\n  title: string;\n  file_name: string;\n  description: string;\n  author: Pick<UserSchema, 'id' | 'username' | 'name' | 'state' | 'created_at'>;\n  updated_at: string;\n  created_at: string;\n  project_id: number;\n  web_url: string;\n  raw_url: string;\n}\n\nexport class ProjectSnippets<C extends boolean = false> extends BaseResource<C> {\n  all(projectId: string | number, options?: PaginatedRequestOptions) {\n    return RequestHelper.get<ProjectSnippetSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/snippets`,\n      options,\n    );\n  }\n\n  content(projectId: string | number, snippetId: number, options?: Sudo) {\n    return RequestHelper.get()(\n      this,\n      endpoint`projects/${projectId}/snippets/${snippetId}/raw`,\n      options,\n    );\n  }\n\n  create(\n    projectId: string | number,\n    title: string,\n    fileName: string,\n    code: string,\n    visibility: SnippetVisibility,\n    options?: BaseRequestOptions,\n  ) {\n    return RequestHelper.post<ProjectSnippetSchema>()(\n      this,\n      endpoint`projects/${projectId}/snippets`,\n      {\n        title,\n        fileName,\n        code,\n        visibility,\n        ...options,\n      },\n    );\n  }\n\n  edit(projectId: string | number, snippetId: number, options?: BaseRequestOptions) {\n    return RequestHelper.put<ProjectSnippetSchema>()(\n      this,\n      endpoint`projects/${projectId}/snippets/${snippetId}`,\n      options,\n    );\n  }\n\n  remove(projectId: string | number, snippetId: number, options?: Sudo) {\n    return RequestHelper.del()(\n      this,\n      endpoint`projects/${projectId}/snippets/${snippetId}`,\n      options,\n    );\n  }\n\n  show(projectId: string | number, snippetId: number, options?: Sudo) {\n    return RequestHelper.get<ProjectSnippetSchema>()(\n      this,\n      endpoint`projects/${projectId}/snippets/${snippetId}`,\n      options,\n    );\n  }\n\n  userAgentDetails(projectId: string | number, snippetId: number, options?: Sudo) {\n    return RequestHelper.get<{\n      user_agent: string;\n      ip_address: string;\n      akismet_submitted: boolean;\n    }>()(this, endpoint`projects/${projectId}/snippets/${snippetId}/user_agent_detail`, options);\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceNotes } from '../templates';\nimport { NoteSchema } from '../templates/types';\nimport {\n  PaginatedRequestOptions,\n  BaseRequestOptions,\n  Sudo,\n  CamelizedRecord,\n} from '../infrastructure';\n\nexport interface SnippetNoteSchema extends NoteSchema {\n  file_name: string;\n  expires_at: string;\n}\n\nexport interface ProjectSnippetNotes<C extends boolean = false> extends ResourceNotes<C> {\n  all(\n    projectId: string | number,\n    snippetId: string | number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, SnippetNoteSchema>[]>;\n\n  create(\n    projectId: string | number,\n    snippetId: string | number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, SnippetNoteSchema>>;\n\n  edit(\n    projectId: string | number,\n    snippetId: string | number,\n    noteId: number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, SnippetNoteSchema>>;\n\n  remove(\n    projectId: string | number,\n    snippetId: string | number,\n    noteId: number,\n    options?: Sudo,\n  ): Promise<void>;\n\n  show(\n    projectId: string | number,\n    snippetId: string | number,\n    noteId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, SnippetNoteSchema>>;\n}\n\nexport class ProjectSnippetNotes<C extends boolean = false> extends ResourceNotes<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('projects', 'snippets', options);\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceDiscussions } from '../templates';\nimport { DiscussionSchema } from '../templates/types';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  Sudo,\n  CamelizedRecord,\n} from '../infrastructure';\n\nexport interface ProjectSnippetDiscussions<C extends boolean = false>\n  extends ResourceDiscussions<C> {\n  addNote(\n    projectId: string | number,\n    snippetId: string | number,\n    discussionId: number,\n    noteId: number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n\n  all(\n    projectId: string | number,\n    issueId: string | number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>[]>;\n\n  create(\n    projectId: string | number,\n    snippetId: string | number,\n    body: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n\n  editNote(\n    projectId: string | number,\n    snippetId: string | number,\n    discussionId: number,\n    noteId: number,\n    options: BaseRequestOptions & { body: string },\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n\n  removeNote(\n    projectId: string | number,\n    snippetId: string | number,\n    discussionId: number,\n    noteId: number,\n    options?: Sudo,\n  ): Promise<void>;\n\n  show(\n    projectId: string | number,\n    snippetId: string | number,\n    discussionId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, DiscussionSchema>>;\n}\n\nexport class ProjectSnippetDiscussions<C extends boolean = false> extends ResourceDiscussions<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('projects', 'snippets', options);\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceAwardEmojis } from '../templates';\nimport { AwardEmojiSchema } from '../templates/types';\nimport { PaginatedRequestOptions, Sudo, CamelizedRecord } from '../infrastructure';\n\nexport interface ProjectSnippetAwardEmojis<C extends boolean = false>\n  extends ResourceAwardEmojis<C> {\n  all(\n    projectId: string | number,\n    snippetIId: number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, AwardEmojiSchema>[]>;\n\n  award(\n    projectId: string | number,\n    snippetIId: number,\n    name: string,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, AwardEmojiSchema>>;\n\n  remove(\n    projectId: string | number,\n    snippetIId: number,\n    awardId: number,\n    options?: Sudo,\n  ): Promise<void>;\n\n  show(\n    projectId: string | number,\n    snippetIId: number,\n    awardId: number,\n    options?: Sudo,\n  ): Promise<CamelizedRecord<C, AwardEmojiSchema>>;\n}\n\nexport class ProjectSnippetAwardEmojis<C extends boolean = false> extends ResourceAwardEmojis<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('snippets', options);\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  endpoint,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface ProtectedBranchAccessLevel {\n  access_level: 0 | 30 | 40 | 60;\n  access_level_description: string;\n  user_id?: number;\n  group_id?: number;\n}\n\nexport interface ProtectedBranchSchema extends Record<string, unknown> {\n  id: number;\n  name: string;\n  push_access_levels?: ProtectedBranchAccessLevel[];\n  merge_access_levels?: ProtectedBranchAccessLevel[];\n  allow_force_push: boolean;\n  code_owner_approval_required: boolean;\n}\n\nexport class ProtectedBranches<C extends boolean = false> extends BaseResource<C> {\n  all(projectId: string | number, options: { search?: string } & PaginatedRequestOptions = {}) {\n    return RequestHelper.get<ProtectedBranchSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/protected_branches`,\n      options,\n    );\n  }\n\n  protect(projectId: string | number, branchName: string, options?: BaseRequestOptions) {\n    return RequestHelper.post<ProtectedBranchSchema>()(\n      this,\n      endpoint`projects/${projectId}/protected_branches`,\n      {\n        query: {\n          name: branchName,\n          ...options,\n        },\n      },\n    );\n  }\n\n  show(projectId: string | number, branchName: string, options?: Sudo) {\n    return RequestHelper.get<ProtectedBranchSchema>()(\n      this,\n      endpoint`projects/${projectId}/protected_branches/${branchName}`,\n      options,\n    );\n  }\n\n  unprotect(projectId: string | number, branchName: string, options?: Sudo) {\n    return RequestHelper.del()(\n      this,\n      endpoint`projects/${projectId}/protected_branches/${branchName}`,\n      options,\n    );\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  endpoint,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface ProtectedTagAccessLevel {\n  access_level: 0 | 30 | 40 | 60;\n  access_level_description: string;\n}\n\nexport interface ProtectedTagSchema extends Record<string, unknown> {\n  name: string;\n  create_access_levels?: ProtectedTagAccessLevel[];\n}\n\nexport class ProtectedTags<C extends boolean = false> extends BaseResource<C> {\n  all(projectId: string | number, options?: PaginatedRequestOptions) {\n    return RequestHelper.get<ProtectedTagSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/protected_tags`,\n      options,\n    );\n  }\n\n  protect(projectId: string | number, tagName: string, options?: BaseRequestOptions) {\n    return RequestHelper.post<ProtectedTagSchema>()(\n      this,\n      endpoint`projects/${projectId}/protected_tags`,\n      {\n        name: tagName,\n        ...options,\n      },\n    );\n  }\n\n  show(projectId: string | number, tagName: string, options?: Sudo) {\n    return RequestHelper.get<ProtectedTagSchema>()(\n      this,\n      endpoint`projects/${projectId}/protected_tags/${tagName}`,\n      options,\n    );\n  }\n\n  unprotect(projectId: string | number, tagName: string, options?: Sudo) {\n    return RequestHelper.del()(\n      this,\n      endpoint`projects/${projectId}/protected_tags/${tagName}`,\n      options,\n    );\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceVariables } from '../templates';\nimport { VariableSchema } from '../templates/types';\nimport { BaseRequestOptions, PaginatedRequestOptions, CamelizedRecord } from '../infrastructure';\n\nexport interface ProjectVariables<C extends boolean = false> extends ResourceVariables<C> {\n  all(\n    projectId: string | number,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, VariableSchema>[]>;\n\n  create(\n    projectId: string | number,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, VariableSchema>>;\n\n  edit(\n    projectId: string | number,\n    keyId: string,\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, VariableSchema>>;\n\n  show(\n    projectId: string | number,\n    keyId: string,\n    options?: PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, VariableSchema>>;\n\n  remove(\n    projectId: string | number,\n    keyId: string,\n    options?: PaginatedRequestOptions,\n  ): Promise<void>;\n}\n\nexport class ProjectVariables<C extends boolean = false> extends ResourceVariables<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('projects', options);\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceDeployTokens } from '../templates';\nimport { DeployTokenScope, DeployTokenSchema } from '../templates/types';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  CamelizedRecord,\n  Sudo,\n} from '../infrastructure';\n\nexport interface ProjectDeployTokens<C extends boolean = false> extends ResourceDeployTokens<C> {\n  add(\n    projectId: string | number,\n    tokenName: string,\n    tokenScopes: DeployTokenScope[],\n    options?: BaseRequestOptions,\n  ): Promise<CamelizedRecord<C, DeployTokenSchema>>;\n\n  all(\n    options?: { projectId?: string | number } & PaginatedRequestOptions,\n  ): Promise<CamelizedRecord<C, DeployTokenSchema>[]>;\n\n  remove(projectId: string | number, tokenId: number, options?: Sudo): Promise<void>;\n}\n\nexport class ProjectDeployTokens<C extends boolean = false> extends ResourceDeployTokens<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('projects', options);\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { RequestHelper, BaseRequestOptions, Sudo, endpoint } from '../infrastructure';\n\nexport interface PushRulesSchema extends Record<string, unknown> {\n  id: number;\n  project_id: number;\n  commit_message_regex: string;\n  commit_message_negative_regex: string;\n  branch_name_regex: string;\n  deny_delete_tag: boolean;\n  created_at: string;\n  member_check: boolean;\n  prevent_secrets: boolean;\n  author_email_regex: string;\n  file_name_regex: string;\n  max_file_size: number;\n  commit_committer_check?: boolean;\n  reject_unsigned_commits?: boolean;\n}\n\nexport class PushRules<C extends boolean = false> extends BaseResource<C> {\n  create(projectId: string | number, options?: BaseRequestOptions) {\n    return RequestHelper.post<PushRulesSchema>()(\n      this,\n      endpoint`projects/${projectId}/push_rule`,\n      options,\n    );\n  }\n\n  edit(projectId: string | number, options?: BaseRequestOptions) {\n    return RequestHelper.put<PushRulesSchema>()(\n      this,\n      endpoint`projects/${projectId}/push_rule`,\n      options,\n    );\n  }\n\n  remove(projectId: string | number, options?: Sudo) {\n    return RequestHelper.del<PushRulesSchema>()(\n      this,\n      endpoint`projects/${projectId}/push_rule`,\n      options,\n    );\n  }\n\n  show(projectId: string | number, options?: Sudo) {\n    return RequestHelper.get<PushRulesSchema>()(\n      this,\n      endpoint`projects/${projectId}/push_rule`,\n      options,\n    );\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { UserSchema } from './Users';\nimport { CommitSchema } from './Commits';\nimport { MilestoneSchema } from '../templates/types';\nimport {\n  BaseRequestOptions,\n  endpoint,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface ReleaseEvidence {\n  sha: string;\n  filepath: string;\n  collected_at: string;\n}\n\nexport interface ReleaseAssetSource {\n  format: string;\n  url: string;\n}\n\nexport interface ReleaseAssetLink {\n  id: number;\n  name: string;\n  url: string;\n  external: boolean;\n  link_type: string;\n}\n\nexport interface ReleaseSchema extends Record<string, unknown> {\n  tag_name: string;\n  description: string;\n  name: string;\n  description_html: string;\n  created_at: string;\n  released_at: string;\n  user: Pick<UserSchema, 'name' | 'username' | 'id' | 'state' | 'avatar_url' | 'web_url'>;\n  commit: CommitSchema;\n  milestones?: MilestoneSchema[];\n  commit_path: string;\n  tag_path: string;\n  assets: {\n    count: number;\n    sources?: ReleaseAssetSource[];\n    links?: ReleaseAssetLink[];\n    evidence_file_path: string;\n  };\n  evidences?: ReleaseEvidence[];\n}\n\n// TODO: Add missing functions\nexport class Releases<C extends boolean = false> extends BaseResource<C> {\n  all(projectId: string | number, options?: PaginatedRequestOptions) {\n    return RequestHelper.get<ReleaseSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/releases`,\n      options,\n    );\n  }\n\n  create(projectId: string | number, options?: BaseRequestOptions) {\n    return RequestHelper.post<ReleaseSchema>()(\n      this,\n      endpoint`projects/${projectId}/releases`,\n      options,\n    );\n  }\n\n  edit(projectId: string | number, tagName: string, options?: BaseRequestOptions) {\n    return RequestHelper.put<ReleaseSchema>()(\n      this,\n      endpoint`projects/${projectId}/releases/${tagName}`,\n      options,\n    );\n  }\n\n  remove(projectId: string | number, tagName: string, options?: Sudo) {\n    return RequestHelper.del()(this, endpoint`projects/${projectId}/releases/${tagName}`, options);\n  }\n\n  show(projectId: string | number, tagName: string, options?: Sudo) {\n    return RequestHelper.get<ReleaseSchema>()(\n      this,\n      endpoint`projects/${projectId}/releases/${tagName}`,\n      options,\n    );\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { RequestHelper, PaginatedRequestOptions, Sudo, endpoint } from '../infrastructure';\n\nexport interface ReleaseLinkSchema extends Record<string, unknown> {\n  id: number;\n  name: string;\n  url: string;\n  external: boolean;\n  link_type: string;\n}\n\nexport class ReleaseLinks<C extends boolean = false> extends BaseResource<C> {\n  all(projectId: string | number, tagName: string, options?: PaginatedRequestOptions) {\n    return RequestHelper.get<ReleaseLinkSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/releases/${tagName}/assets/links`,\n      options,\n    );\n  }\n\n  create(\n    projectId: string | number,\n    tagName: string,\n    name: string,\n    url: string,\n    options?: Sudo & { filePath?: string; linkType?: string },\n  ) {\n    return RequestHelper.post<ReleaseLinkSchema>()(\n      this,\n      endpoint`projects/${projectId}/releases/${tagName}/assets/links`,\n      {\n        name,\n        url,\n        ...options,\n      },\n    );\n  }\n\n  edit(\n    projectId: string | number,\n    tagName: string,\n    linkId: number,\n    options?: Sudo & { name?: string; url?: string; filePath?: string; linkType?: string },\n  ) {\n    return RequestHelper.put<ReleaseLinkSchema>()(\n      this,\n      endpoint`projects/${projectId}/releases/${tagName}/assets/links/${linkId}`,\n      options,\n    );\n  }\n\n  remove(projectId: string | number, tagName: string, linkId: number, options?: Sudo) {\n    return RequestHelper.del()(\n      this,\n      endpoint`projects/${projectId}/releases/${tagName}/assets/links/${linkId}`,\n      options,\n    );\n  }\n\n  show(projectId: string | number, tagName: string, linkId: number, options?: Sudo) {\n    return RequestHelper.get<ReleaseLinkSchema>()(\n      this,\n      endpoint`projects/${projectId}/releases/${tagName}/assets/links/${linkId}`,\n      options,\n    );\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { CommitSchema, CommitDiffSchema } from './Commits';\nimport { RequestHelper, Sudo, BaseRequestOptions, endpoint } from '../infrastructure';\n\ntype ArchiveType = 'tar.gz' | 'tar.bz2' | 'tbz' | 'tbz2' | 'tb2' | 'bz2' | 'tar' | 'zip';\n\nexport interface RepositoryCompareSchema extends Record<string, unknown> {\n  commit: Pick<\n    CommitSchema,\n    'id' | 'short_id' | 'title' | 'author_name' | 'author_email' | 'created_at'\n  >;\n  commits?: Pick<\n    CommitSchema,\n    'id' | 'short_id' | 'title' | 'author_name' | 'author_email' | 'created_at'\n  >[];\n  diffs?: CommitDiffSchema[];\n  compare_timeout: boolean;\n  compare_same_ref: boolean;\n}\n\nexport interface RepositoryContributorSchema extends Record<string, unknown> {\n  name: string;\n  email: string;\n  commits: number;\n  additions: number;\n  deletions: number;\n}\n\nexport interface RepositoryTreeSchema extends Record<string, unknown> {\n  id: string;\n  name: string;\n  type: string;\n  path: string;\n  mode: string;\n}\n\nexport class Repositories<C extends boolean = false> extends BaseResource<C> {\n  compare(projectId: string | number, from: string, to: string, options?: Sudo) {\n    return RequestHelper.get<RepositoryCompareSchema>()(\n      this,\n      endpoint`projects/${projectId}/repository/compare`,\n      {\n        from,\n        to,\n        ...options,\n      },\n    );\n  }\n\n  contributors(projectId: string | number, options?: Sudo) {\n    return RequestHelper.get<RepositoryContributorSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/repository/contributors`,\n      options,\n    );\n  }\n\n  mergeBase(projectId: string | number, refs: string[], options?: Sudo) {\n    return RequestHelper.get<CommitSchema>()(\n      this,\n      endpoint`projects/${projectId}/repository/merge_base`,\n      {\n        refs,\n        ...options,\n      },\n    );\n  }\n\n  showArchive(\n    projectId: string | number,\n    { fileType = 'tar.gz', ...options }: { fileType?: ArchiveType } & Sudo = {},\n  ) {\n    return RequestHelper.get()(\n      this,\n      endpoint`projects/${projectId}/repository/archive.${fileType}`,\n      options as Record<string, unknown>,\n    ) as unknown as Promise<string>;\n  }\n\n  showBlob(projectId: string | number, sha: string, options?: Sudo) {\n    return RequestHelper.get()(\n      this,\n      endpoint`projects/${projectId}/repository/blobs/${sha}`,\n      options,\n    ) as unknown as Promise<Blob>;\n  }\n\n  showBlobRaw(projectId: string | number, sha: string, options?: Sudo) {\n    return RequestHelper.get()(\n      this,\n      endpoint`projects/${projectId}/repository/blobs/${sha}/raw`,\n      options,\n    ) as unknown as Promise<Blob>;\n  }\n\n  tree(projectId: string | number, options?: BaseRequestOptions) {\n    return RequestHelper.get<RepositoryTreeSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/repository/tree`,\n      options,\n    );\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { CommitSchema } from './Commits';\nimport { RequestHelper, BaseRequestOptions, endpoint, Sudo } from '../infrastructure';\n\nexport interface RepositoryFileExtendedSchema extends Record<string, unknown> {\n  file_name: string;\n  file_path: string;\n  size: number;\n  encoding: string;\n  content: string;\n  content_sha256: string;\n  ref: string;\n  blob_id: string;\n  commit_id: string;\n  last_commit_id: string;\n}\n\nexport interface RepositoryFileBlameSchema extends Record<string, unknown> {\n  commit: CommitSchema;\n  lines?: string[];\n}\n\nexport interface RepositoryFileSchema extends Record<string, unknown> {\n  file_path: string;\n  branch: string;\n}\n\nexport class RepositoryFiles<C extends boolean = false> extends BaseResource<C> {\n  create(\n    projectId: string | number,\n    filePath: string,\n    branch: string,\n    content: string,\n    commitMessage: string,\n    options?: BaseRequestOptions,\n  ) {\n    return RequestHelper.post<RepositoryFileSchema>()(\n      this,\n      endpoint`projects/${projectId}/repository/files/${filePath}`,\n      {\n        branch,\n        content,\n        commitMessage,\n        ...options,\n      },\n    );\n  }\n\n  edit(\n    projectId: string | number,\n    filePath: string,\n    branch: string,\n    content: string,\n    commitMessage: string,\n    options?: BaseRequestOptions,\n  ) {\n    return RequestHelper.put<RepositoryFileSchema>()(\n      this,\n      endpoint`projects/${projectId}/repository/files/${filePath}`,\n      {\n        branch,\n        content,\n        commitMessage,\n        ...options,\n      },\n    );\n  }\n\n  remove(\n    projectId: string | number,\n    filePath: string,\n    branch: string,\n    commitMessage: string,\n    options?: BaseRequestOptions,\n  ) {\n    return RequestHelper.del()(this, endpoint`projects/${projectId}/repository/files/${filePath}`, {\n      branch,\n      commitMessage,\n      ...options,\n    });\n  }\n\n  show(projectId: string | number, filePath: string, ref: string, options?: Sudo) {\n    return RequestHelper.get<RepositoryFileExtendedSchema>()(\n      this,\n      endpoint`projects/${projectId}/repository/files/${filePath}`,\n      {\n        ref,\n        ...options,\n      },\n    );\n  }\n\n  showBlame(projectId: string | number, filePath: string, options?: Sudo) {\n    return RequestHelper.get<RepositoryFileBlameSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/repository/files/${filePath}/blame`,\n      options,\n    );\n  }\n\n  showRaw(projectId: string | number, filePath: string, options?: BaseRequestOptions) {\n    return RequestHelper.get()(\n      this,\n      endpoint`projects/${projectId}/repository/files/${filePath}/raw`,\n      options,\n    ) as unknown as Promise<string>;\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { BaseRequestOptions, endpoint, RequestHelper } from '../infrastructure';\n\nexport interface RepositorySubmoduleSchema extends Record<string, unknown> {\n  id: string;\n  short_id: string;\n  title: string;\n  author_name: string;\n  author_email: string;\n  committer_name: string;\n  committer_email: string;\n  created_at: string;\n  message: string;\n  parent_ids: string[];\n  committed_date: Date;\n  authored_date: Date;\n  status?: string;\n}\n\nexport class RepositorySubmodules<C extends boolean = false> extends BaseResource<C> {\n  edit(\n    projectId: string | number,\n    submodule: string,\n    branch: string,\n    commit_sha: string,\n    options?: BaseRequestOptions,\n  ) {\n    return RequestHelper.put<RepositorySubmoduleSchema>()(\n      this,\n      endpoint`projects/${projectId}/repository/submodules/${submodule}`,\n      {\n        branch,\n        commit_sha,\n        ...options,\n      },\n    );\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { ProjectSchema } from './Projects';\nimport { JobSchema } from './Jobs';\nimport {\n  BaseRequestOptions,\n  endpoint,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface RunnerSchema extends Record<string, unknown> {\n  id: number;\n  description: string;\n  ip_address: string;\n  active: boolean;\n  is_shared: boolean;\n  name: string;\n  online: boolean;\n  status: 'running' | 'success' | 'failed' | 'canceled';\n}\n\nexport interface RunnerExtendedSchema extends RunnerSchema {\n  architecture?: string;\n  description: string;\n  contacted_at: string;\n  platform?: string;\n  projects?: Pick<\n    ProjectSchema,\n    'id' | 'name' | 'name_with_namespace' | 'path' | 'path_with_namespace'\n  >;\n  revision?: string;\n  tag_list?: string[];\n  version?: string;\n  access_level: string;\n  maximum_timeout?: number;\n}\n\nexport class Runners<C extends boolean = false> extends BaseResource<C> {\n  all({ projectId, ...options }: { projectId?: string | number } & PaginatedRequestOptions = {}) {\n    const url = projectId ? endpoint`projects/${projectId}/runners` : 'runners/all';\n\n    return RequestHelper.get<RunnerSchema[]>()(this, url, options);\n  }\n\n  allOwned(options?: BaseRequestOptions) {\n    return RequestHelper.get<RunnerSchema[]>()(this, 'runners', options);\n  }\n\n  edit(runnerId: number, options?: BaseRequestOptions) {\n    return RequestHelper.put<RunnerExtendedSchema>()(this, `runners/${runnerId}`, options);\n  }\n\n  enable(projectId: string | number, runnerId: number, options?: Sudo) {\n    return RequestHelper.post<RunnerSchema>()(this, endpoint`projects/${projectId}/runners`, {\n      runnerId,\n      ...options,\n    });\n  }\n\n  disable(projectId: string | number, runnerId: number, options?: Sudo) {\n    return RequestHelper.del()(this, endpoint`projects/${projectId}/runners/${runnerId}`, options);\n  }\n\n  jobs(runnerId: number, options?: Sudo) {\n    return RequestHelper.get<JobSchema[]>()(this, `runners/${runnerId}/jobs`, options);\n  }\n\n  remove(runnerId: number, options?: Sudo) {\n    return RequestHelper.del()(this, `runners/${runnerId}`, options);\n  }\n\n  show(runnerId: number, options?: Sudo) {\n    return RequestHelper.get<RunnerExtendedSchema>()(this, `runners/${runnerId}`, options);\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport {\n  RequestHelper,\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  Sudo,\n  endpoint,\n} from '../infrastructure';\n\nexport type SupportedService =\n  | 'asana'\n  | 'assembla'\n  | 'bamboo'\n  | 'bugzilla'\n  | 'buildkite'\n  | 'campfire'\n  | 'custom-issue-tracker'\n  | 'drone-ci'\n  | 'emails-on-push'\n  | 'external-wiki'\n  | 'flowdock'\n  | 'hangouts_chat'\n  | 'hipchat'\n  | 'irker'\n  | 'jira'\n  | 'kubernetes'\n  | 'slack-slash-commands'\n  | 'slack'\n  | 'packagist'\n  | 'pipelines-email'\n  | 'pivotaltracker'\n  | 'prometheus'\n  | 'pushover'\n  | 'redmine'\n  | 'microsoft-teams'\n  | 'mattermost'\n  | 'mattermost-slash-commands'\n  | 'teamcity'\n  | 'jenkins'\n  | 'jenkins-deprecated'\n  | 'mock-ci'\n  | 'youtrack';\n\nexport interface ServiceSchema extends Record<string, unknown> {\n  id: number;\n  title: string;\n  slug: string;\n  created_at: string;\n  updated_at: string;\n  active: boolean;\n  commit_events: boolean;\n  push_events: boolean;\n  issues_events: boolean;\n  confidential_issues_events: boolean;\n  merge_requests_events: boolean;\n  tag_push_events: boolean;\n  note_events: boolean;\n  confidential_note_events: boolean;\n  pipeline_events: boolean;\n  wiki_page_events: boolean;\n  job_events: boolean;\n  comment_on_event_enabled: boolean;\n}\n\nexport class Services<C extends boolean = false> extends BaseResource<C> {\n  all(projectId: string | number, options?: PaginatedRequestOptions) {\n    return RequestHelper.get<ServiceSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/services`,\n      options,\n    );\n  }\n\n  edit(projectId: string | number, serviceName: SupportedService, options?: BaseRequestOptions) {\n    return RequestHelper.put<ServiceSchema>()(\n      this,\n      endpoint`projects/${projectId}/services/${serviceName}`,\n      options,\n    );\n  }\n\n  remove(projectId: string | number, serviceName: SupportedService, options?: Sudo) {\n    return RequestHelper.del()(\n      this,\n      endpoint`projects/${projectId}/services/${serviceName}`,\n      options,\n    );\n  }\n\n  show(projectId: string | number, serviceName: SupportedService, options?: Sudo) {\n    return RequestHelper.get<ServiceSchema>()(\n      this,\n      endpoint`projects/${projectId}/services/${serviceName}`,\n      options,\n    );\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { CommitSchema } from './Commits';\nimport { ReleaseSchema } from './Releases';\nimport {\n  BaseRequestOptions,\n  endpoint,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface TagSchema extends Record<string, unknown> {\n  commit: CommitSchema;\n  release: Pick<ReleaseSchema, 'tag_name' | 'description'>;\n  name: string;\n  target: string;\n  message?: string;\n  protected: boolean;\n}\n\nexport class Tags<C extends boolean = false> extends BaseResource<C> {\n  all(projectId: string | number, options?: PaginatedRequestOptions) {\n    return RequestHelper.get<TagSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/repository/tags`,\n      options,\n    );\n  }\n\n  create(projectId: string | number, tagName: string, ref: string, options?: BaseRequestOptions) {\n    return RequestHelper.post<TagSchema>()(this, endpoint`projects/${projectId}/repository/tags`, {\n      query: {\n        tagName,\n        ref,\n      },\n      ...options,\n    });\n  }\n\n  remove(projectId: string | number, tagName: string, options?: Sudo) {\n    return RequestHelper.del()(\n      this,\n      endpoint`projects/${projectId}/repository/tags/${tagName}`,\n      options,\n    );\n  }\n\n  show(projectId: string | number, tagName: string, options?: Sudo) {\n    return RequestHelper.get<TagSchema>()(\n      this,\n      endpoint`projects/${projectId}/repository/tags/${tagName}`,\n      options,\n    );\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { UserSchema } from './Users';\nimport { ProjectSchema } from './Projects';\nimport { MilestoneSchema } from '../templates/types';\nimport { RequestHelper, PaginatedRequestOptions, Sudo, endpoint } from '../infrastructure';\n\nexport interface TodoSchema extends Record<string, unknown> {\n  id: number;\n  project: Pick<\n    ProjectSchema,\n    'id' | 'name' | 'name_with_namespace' | 'path' | 'path_with_namespace'\n  >;\n  author: Pick<UserSchema, 'name' | 'username' | 'id' | 'state' | 'avatar_url' | 'web_url'>;\n  action_name: string;\n  target_type: string;\n  target: {\n    id: number;\n    iid: number;\n    project_id: number;\n    title: string;\n    description: string;\n    state: string;\n    created_at: string;\n    updated_at: string;\n    target_branch: string;\n    source_branch: string;\n    upvotes: number;\n    downvotes: number;\n    author: Pick<UserSchema, 'name' | 'username' | 'id' | 'state' | 'avatar_url' | 'web_url'>;\n    assignee: Pick<UserSchema, 'name' | 'username' | 'id' | 'state' | 'avatar_url' | 'web_url'>;\n    source_project_id: number;\n    target_project_id: number;\n    labels?: string[];\n    work_in_progress: boolean;\n    milestone: Omit<MilestoneSchema, 'start_date' | 'expired' | 'web_url'>;\n    merge_when_pipeline_succeeds: boolean;\n    merge_status: string;\n    user_notes_count: number;\n  };\n  target_url: string;\n  body: string;\n  state: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport class Todos<C extends boolean = false> extends BaseResource<C> {\n  all(options?: PaginatedRequestOptions) {\n    return RequestHelper.get<TodoSchema[]>()(this, 'todos', options);\n  }\n\n  create(\n    projectId: string | number,\n    resourceId: number,\n    resourceName: 'mergerequest' | 'issue',\n    options?: Sudo,\n  ) {\n    const resourceAPI = resourceName === 'issue' ? 'issues' : 'merge_requests';\n\n    return RequestHelper.post<TodoSchema>()(\n      this,\n      endpoint`projects/${projectId}/${resourceAPI}/${resourceId}/todo`,\n      options,\n    );\n  }\n\n  done({ todoId, ...options }: { todoId?: number } & Sudo = {}) {\n    const url = ['todos'];\n\n    if (todoId) url.push(todoId.toString());\n\n    url.push('mark_as_done');\n\n    // Fixme: Rewrite this to make better use of proper typing\n    if (todoId) {\n      return RequestHelper.post<TodoSchema>()(\n        this,\n        url.join('/'),\n        options as Record<string, unknown>,\n      );\n    }\n\n    return RequestHelper.post<void>()(this, url.join('/'), options as Record<string, unknown>);\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { UserSchema } from './Users';\nimport {\n  BaseRequestOptions,\n  endpoint,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface PipelineTriggerSchema extends Record<string, unknown> {\n  id: number;\n  description: string;\n  created_at: string;\n  last_used?: string;\n  token: string;\n  updated_at: string;\n  owner: Pick<UserSchema, 'id' | 'name' | 'created_at'>;\n}\n\n// TODO: Rename PipelineTriggers\nexport class Triggers<C extends boolean = false> extends BaseResource<C> {\n  add(projectId: string | number, options?: BaseRequestOptions) {\n    return RequestHelper.post<PipelineTriggerSchema>()(\n      this,\n      endpoint`projects/${projectId}/triggers`,\n      options,\n    );\n  }\n\n  all(projectId: string | number, options?: PaginatedRequestOptions) {\n    return RequestHelper.get<PipelineTriggerSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/triggers`,\n      options,\n    );\n  }\n\n  edit(projectId: string | number, triggerId: number, options?: BaseRequestOptions) {\n    return RequestHelper.put<PipelineTriggerSchema>()(\n      this,\n      endpoint`projects/${projectId}/triggers/${triggerId}`,\n      options,\n    );\n  }\n\n  pipeline(\n    projectId: string | number,\n    ref: string,\n    token: string,\n    { variables }: { variables?: Record<string, string> } = {},\n  ) {\n    const hapiVariables = {};\n\n    if (variables) {\n      Object.entries(variables).forEach(([k, v]) => {\n        hapiVariables[`variables[${k}]`] = v;\n      });\n    }\n\n    return RequestHelper.post()(this, endpoint`projects/${projectId}/trigger/pipeline`, {\n      isForm: true,\n      ref,\n      token,\n      ...hapiVariables,\n    });\n  }\n\n  remove(projectId: string | number, triggerId: number, options?: Sudo) {\n    return RequestHelper.del()(\n      this,\n      endpoint`projects/${projectId}/triggers/${triggerId}`,\n      options,\n    );\n  }\n\n  show(projectId: string | number, triggerId: number, options?: Sudo) {\n    return RequestHelper.get<PipelineTriggerSchema>()(\n      this,\n      endpoint`projects/${projectId}/triggers/${triggerId}`,\n      options,\n    );\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { endpoint, PaginatedRequestOptions, RequestHelper } from '../infrastructure';\n\nexport interface VulnerabilityFindingIdentifier {\n  external_type: string;\n  external_id: string;\n  name: string;\n  url: string;\n}\nexport interface VulnerabilityFindingDetailItem {\n  type: string;\n  href: string;\n}\n\nexport interface VulnerabilityFindingSchema extends Record<string, unknown> {\n  id: number;\n  report_type: string;\n  name: string;\n  severity: string;\n  confidence: string;\n  scanner: {\n    external_id: string;\n    name: string;\n  };\n  identifiers?: VulnerabilityFindingIdentifier[];\n  project_fingerprint: string;\n  uuid: string;\n  create_vulnerability_feedback_issue_path: string;\n  create_vulnerability_feedback_merge_request_path: string;\n  create_vulnerability_feedback_dismissal_path: string;\n  project: {\n    id: number;\n    name: string;\n    full_path: string;\n    full_name: string;\n  };\n  dismissal_feedback?: string;\n  issue_feedback?: string;\n  merge_request_feedback?: string;\n  description: string;\n  links?: {\n    url: string;\n  }[];\n  location: {\n    file: string;\n    dependency: {\n      package: {\n        name: string;\n      };\n      version: string;\n    };\n  };\n  details: {\n    [custom_field: string]: {\n      name: string;\n      type: string;\n      items?: VulnerabilityFindingDetailItem[];\n    };\n  };\n  solution: string;\n  blob_path: string;\n}\n\nexport class VulnerabilityFindings<C extends boolean = false> extends BaseResource<C> {\n  all(\n    projectId: string | number,\n    options?: {\n      reportType?: string[];\n      scope?: string;\n      severity?: string[];\n      confidence?: string[];\n      pipelineId?: string | number;\n    } & PaginatedRequestOptions,\n  ) {\n    return RequestHelper.get<VulnerabilityFindingSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/vulnerability_findings`,\n      options,\n    );\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { RequestHelper, Sudo, BaseRequestOptions } from '../infrastructure';\n\nexport interface ApplicationSettingsSchema extends Record<string, unknown> {\n  default_projects_limit: number;\n  signup_enabled: boolean;\n  id: number;\n  default_branch_protection: number;\n  restricted_visibility_levels?: string[];\n  password_authentication_enabled_for_web: boolean;\n  after_sign_out_path?: string;\n  max_attachment_size: number;\n  max_import_size: number;\n  user_oauth_applications: boolean;\n  updated_at: string;\n  session_expire_delay: number;\n  home_page_url?: string;\n  default_snippet_visibility: string;\n  outbound_local_requests_whitelist?: string[];\n  domain_allowlist?: string[];\n  domain_denylist_enabled: boolean;\n  domain_denylist?: string[];\n  created_at: string;\n  default_ci_config_path?: string;\n  default_project_visibility: string;\n  default_group_visibility: string;\n  gravatar_enabled: boolean;\n  sign_in_text?: string;\n  container_expiration_policies_enable_historic_entries: boolean;\n  container_registry_token_expire_delay: number;\n  repository_storages_weighted: {\n    [name: string]: number;\n  };\n  plantuml_enabled: boolean;\n  plantuml_url?: string;\n  kroki_enabled: boolean;\n  kroki_url?: string;\n  terminal_max_session_time: number;\n  polling_interval_multiplier: number;\n  rsa_key_restriction: number;\n  dsa_key_restriction: number;\n  ecdsa_key_restriction: number;\n  ed25519_key_restriction: number;\n  first_day_of_week: number;\n  enforce_terms: boolean;\n  terms: string;\n  performance_bar_allowed_group_id: number;\n  user_show_add_ssh_key_message: boolean;\n  local_markdown_version: number;\n  allow_local_requests_from_hooks_and_services: boolean;\n  allow_local_requests_from_web_hooks_and_services: boolean;\n  allow_local_requests_from_system_hooks: boolean;\n  asset_proxy_enabled: boolean;\n  asset_proxy_url: string;\n  asset_proxy_whitelist?: string[];\n  asset_proxy_allowlist?: string[];\n  npm_package_requests_forwarding: boolean;\n  snippet_size_limit: number;\n  issues_create_limit: number;\n  raw_blob_request_limit: number;\n  wiki_page_max_content_bytes: number;\n  require_admin_approval_after_user_signup: boolean;\n  personal_access_token_prefix: string;\n  rate_limiting_response_text?: string;\n  keep_latest_artifact: boolean;\n}\n\nexport class ApplicationSettings<C extends boolean = false> extends BaseResource<C> {\n  all(options?: Sudo) {\n    return RequestHelper.get<ApplicationSettingsSchema>()(this, 'application/settings', options);\n  }\n\n  edit(options?: BaseRequestOptions) {\n    return RequestHelper.put<ApplicationSettingsSchema>()(this, 'application/settings', options);\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n  Camelize,\n} from '../infrastructure';\n\nexport interface BroadcastMessageSchema extends Record<string, unknown> {\n  message: string;\n  starts_at: string;\n  ends_at: string;\n  color: string;\n  font: string;\n  id: number;\n  active: boolean;\n  target_path: string;\n  broadcast_type: string;\n  dismissable: boolean;\n}\n\nexport class BroadcastMessages<C extends boolean = false> extends BaseResource<C> {\n  all(options?: PaginatedRequestOptions) {\n    return RequestHelper.get<BroadcastMessageSchema[]>()(this, 'broadcast_messages', options);\n  }\n\n  create(options?: Camelize<Omit<BroadcastMessageSchema, 'id'>> & Sudo) {\n    return RequestHelper.post<BroadcastMessageSchema>()(this, 'broadcast_messages', options);\n  }\n\n  edit(broadcastMessageId: number, options?: Camelize<Omit<BroadcastMessageSchema, 'id'>> & Sudo) {\n    return RequestHelper.put<BroadcastMessageSchema>()(\n      this,\n      `broadcast_messages/${broadcastMessageId}`,\n      options,\n    );\n  }\n\n  remove(broadcastMessageId: number, options?: Sudo) {\n    return RequestHelper.del()(this, `broadcast_messages/${broadcastMessageId}`, options);\n  }\n\n  show(broadcastMessageId: number, options?: BaseRequestOptions) {\n    return RequestHelper.get<BroadcastMessageSchema>()(\n      this,\n      `broadcast_messages/${broadcastMessageId}`,\n      options,\n    );\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { UserSchema } from './Users';\nimport { RequestHelper, PaginatedRequestOptions, endpoint } from '../infrastructure';\n\nexport interface EventOptions {\n  action?:\n    | 'created'\n    | 'updated'\n    | 'closed'\n    | 'reopened'\n    | 'pushed'\n    | 'commented'\n    | 'merged'\n    | 'joined'\n    | 'left'\n    | 'destroyed'\n    | 'expired';\n  targetType?: 'issue' | 'milestone' | 'merge_request' | 'note' | 'project' | 'snippet' | 'user';\n  before?: string;\n  after?: string;\n  scope?: string;\n  sort?: 'asc' | 'desc';\n}\n\nexport interface EventSchema extends Record<string, unknown> {\n  id: number;\n  title?: string;\n  project_id: number;\n  action_name: string;\n  target_id: number;\n  target_type: string;\n  author_id: number;\n  target_title: string;\n  created_at: string;\n  author: Omit<UserSchema, 'created_at'>;\n  author_username: string;\n}\n\nexport class Events<C extends boolean = false> extends BaseResource<C> {\n  all({\n    projectId,\n    ...options\n  }: { projectId?: string | number } & PaginatedRequestOptions & EventOptions = {}) {\n    let url: string;\n\n    if (projectId) {\n      url = endpoint`projects/${projectId}/events`;\n    } else {\n      url = 'events';\n    }\n\n    return RequestHelper.get<EventSchema[]>()(this, url, options);\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  endpoint,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface FeatureFlagStrategyScope {\n  id: number;\n  environment_scope: string;\n}\nexport interface FeatureFlagStrategy {\n  id: number;\n  name: string;\n  parameters: {\n    user_ids: string;\n  };\n  scopes?: FeatureFlagStrategyScope[];\n}\n\nexport interface FeatureFlagSchema extends Record<string, unknown> {\n  name: string;\n  description: string;\n  active: boolean;\n  version: string;\n  created_at: string;\n  updated_at: string;\n  scopes?: string[];\n  strategies?: FeatureFlagStrategy[];\n}\n\nexport class FeatureFlags<C extends boolean = false> extends BaseResource<C> {\n  all(\n    projectId: string | number,\n    options: { scopes?: 'enabled' | 'disabled' } & PaginatedRequestOptions = {},\n  ) {\n    return RequestHelper.get<FeatureFlagSchema[]>()(\n      this,\n      endpoint`projects/${projectId}/feature_flags`,\n      options,\n    );\n  }\n\n  create(\n    projectId: string | number,\n    flagName: string,\n    version: string,\n    options?: BaseRequestOptions,\n  ) {\n    return RequestHelper.post<FeatureFlagSchema>()(\n      this,\n      endpoint`projects/${projectId}/feature_flags`,\n      {\n        name: flagName,\n        version,\n        ...options,\n      },\n    );\n  }\n\n  edit(projectId: string | number, flagName: string, options?: BaseRequestOptions) {\n    return RequestHelper.put<FeatureFlagSchema>()(\n      this,\n      endpoint`projects/${projectId}/feature_flags/${flagName}`,\n      options,\n    );\n  }\n\n  remove(projectId: string | number, flagName: string, options?: Sudo) {\n    return RequestHelper.del()(\n      this,\n      endpoint`projects/${projectId}/feature_flags/${flagName}`,\n      options,\n    );\n  }\n\n  show(projectId: string | number, flagName: string, options?: Sudo) {\n    return RequestHelper.get<FeatureFlagSchema>()(\n      this,\n      endpoint`projects/${projectId}/feature_flags/${flagName}`,\n      options,\n    );\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface GeoNodeSchema extends Record<string, unknown> {\n  id: number;\n  name: string;\n  url: string;\n  internal_url: string;\n  primary: boolean;\n  enabled: boolean;\n  current: boolean;\n  files_max_capacity: number;\n  repos_max_capacity: number;\n  verification_max_capacity: number;\n  selective_sync_type: string;\n  selective_sync_shards?: string[];\n  selective_sync_namespace_ids?: number[];\n  minimum_reverification_interval: number;\n  container_repositories_max_capacity: number;\n  sync_object_storage: boolean;\n  clone_protocol: string;\n  web_edit_url: string;\n  web_geo_projects_url: string;\n  _links: {\n    self: string;\n    status: string;\n    repair: string;\n  };\n}\n\nexport interface GeoNodeFailureSchema extends Record<string, unknown> {\n  project_id: number;\n  last_repository_synced_at: string;\n  last_repository_successful_sync_at: string;\n  last_wiki_synced_at: string;\n  last_wiki_successful_sync_at: string;\n  repository_retry_count?: number;\n  wiki_retry_count: number;\n  last_repository_sync_failure?: string;\n  last_wiki_sync_failure: string;\n  last_repository_verification_failure: string;\n  last_wiki_verification_failure: string;\n  repository_verification_checksum_sha: string;\n  wiki_verification_checksum_sha: string;\n  repository_checksum_mismatch: boolean;\n  wiki_checksum_mismatch: boolean;\n}\n\nexport interface GeoNodeStatusSchema extends Record<string, unknown> {\n  geo_node_id: number;\n  healthy: boolean;\n  health: string;\n  health_status: string;\n  missing_oauth_application: boolean;\n  attachments_count: number;\n  attachments_synced_count?: number;\n  attachments_failed_count?: number;\n  attachments_synced_missing_on_primary_count: number;\n  attachments_synced_in_percentage: string;\n  db_replication_lag_seconds?: number;\n  lfs_objects_count: number;\n  lfs_objects_synced_count?: number;\n  lfs_objects_failed_count?: number;\n  lfs_objects_synced_missing_on_primary_count: number;\n  lfs_objects_synced_in_percentage: string;\n  job_artifacts_count: number;\n  job_artifacts_synced_count?: number;\n  job_artifacts_failed_count?: number;\n  job_artifacts_synced_missing_on_primary_count: number;\n  job_artifacts_synced_in_percentage: string;\n  container_repositories_count: number;\n  container_repositories_synced_count?: number;\n  container_repositories_failed_count?: number;\n  container_repositories_synced_in_percentage: string;\n  design_repositories_count: number;\n  design_repositories_synced_count?: number;\n  design_repositories_failed_count?: number;\n  design_repositories_synced_in_percentage: string;\n  projects_count: number;\n  repositories_count: number;\n  repositories_failed_count?: number;\n  repositories_synced_count?: number;\n  repositories_synced_in_percentage: string;\n  wikis_count: number;\n  wikis_failed_count?: number;\n  wikis_synced_count?: number;\n  wikis_synced_in_percentage: string;\n  replication_slots_count: number;\n  replication_slots_used_count: number;\n  replication_slots_used_in_percentage: string;\n  replication_slots_max_retained_wal_bytes: number;\n  repositories_checked_count: number;\n  repositories_checked_failed_count: number;\n  repositories_checked_in_percentage: string;\n  repositories_checksummed_count: number;\n  repositories_checksum_failed_count: number;\n  repositories_checksummed_in_percentage: string;\n  wikis_checksummed_count: number;\n  wikis_checksum_failed_count: number;\n  wikis_checksummed_in_percentage: string;\n  repositories_verified_count: number;\n  repositories_verification_failed_count: number;\n  repositories_verified_in_percentage: string;\n  repositories_checksum_mismatch_count: number;\n  wikis_verified_count: number;\n  wikis_verification_failed_count: number;\n  wikis_verified_in_percentage: string;\n  wikis_checksum_mismatch_count: number;\n  repositories_retrying_verification_count: number;\n  wikis_retrying_verification_count: number;\n  last_event_id: number;\n  last_event_timestamp: number;\n  cursor_last_event_id?: number;\n  cursor_last_event_timestamp: number;\n  last_successful_status_check_timestamp: number;\n  version: string;\n  revision: string;\n  package_files_count: number;\n  package_files_checksummed_count: number;\n  package_files_checksum_failed_count: number;\n  package_files_registry_count: number;\n  package_files_synced_count: number;\n  package_files_failed_count: number;\n  snippet_repositories_count: number;\n  snippet_repositories_checksummed_count: number;\n  snippet_repositories_checksum_failed_count: number;\n  snippet_repositories_registry_count: number;\n  snippet_repositories_synced_count: number;\n  snippet_repositories_failed_count: number;\n  group_wiki_repositories_checksummed_count: number;\n  group_wiki_repositories_checksum_failed_count: number;\n  group_wiki_repositories_registry_count: number;\n  group_wiki_repositories_synced_count: number;\n  group_wiki_repositories_failed_count: number;\n}\n\nexport class GeoNodes<C extends boolean = false> extends BaseResource<C> {\n  all(options?: PaginatedRequestOptions) {\n    return RequestHelper.get<GeoNodeSchema[]>()(this, 'geo_nodes', options);\n  }\n\n  create(geonodeId: number, options?: BaseRequestOptions) {\n    return RequestHelper.post<GeoNodeSchema>()(this, `geo_nodes/${geonodeId}`, options);\n  }\n\n  edit(geonodeId: number, options?: BaseRequestOptions) {\n    return RequestHelper.put<GeoNodeSchema>()(this, `geo_nodes/${geonodeId}`, options);\n  }\n\n  failures(options?: BaseRequestOptions) {\n    return RequestHelper.get<GeoNodeFailureSchema[]>()(this, 'geo_nodes/current/failures', options);\n  }\n\n  repair(geonodeId: number, options?: Sudo) {\n    return RequestHelper.post<GeoNodeSchema>()(this, `geo_nodes/${geonodeId}/repair`, options);\n  }\n\n  remove(geonodeId: number, options?: Sudo) {\n    return RequestHelper.del<GeoNodeSchema>()(this, `geo_nodes/${geonodeId}`, options);\n  }\n\n  show(geonodeId: number, options?: Sudo) {\n    return RequestHelper.get<GeoNodeSchema>()(this, `geo_nodes/${geonodeId}`, options);\n  }\n\n  status(geonodeId: number, options?: Sudo) {\n    return RequestHelper.get<GeoNodeStatusSchema>()(this, `geo_nodes/${geonodeId}/status`, options);\n  }\n\n  statuses(options?: PaginatedRequestOptions) {\n    return RequestHelper.get<GeoNodeStatusSchema[]>()(this, 'geo_nodes/statuses', options);\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceTemplates } from '../templates';\n\nexport class GitignoreTemplates<C extends boolean = false> extends ResourceTemplates<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('gitignores', options);\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceTemplates } from '../templates';\n\nexport class GitLabCIYMLTemplates<C extends boolean = false> extends ResourceTemplates<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('gitlab_ci_ymls', options);\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { UserExtendedSchema } from './Users';\nimport { endpoint, RequestHelper, Sudo } from '../infrastructure';\n\nexport interface KeySchema extends Record<string, unknown> {\n  id: number;\n  title: string;\n  key: string;\n  created_at: string;\n  expires_at: string;\n  user: UserExtendedSchema;\n}\n\nexport class Keys<C extends boolean = false> extends BaseResource<C> {\n  show(keyId: string, options?: Sudo) {\n    return RequestHelper.get<KeySchema>()(this, endpoint`keys/${keyId}`, options);\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { RequestHelper, Sudo } from '../infrastructure';\n\nexport interface LicenseSchema extends Record<string, unknown> {\n  id: number;\n  plan: string;\n  created_at: string;\n  starts_at: string;\n  expires_at: string;\n  historical_max: number;\n  maximum_user_count: number;\n  expired: boolean;\n  overage: number;\n  user_limit: number;\n  active_users: number;\n  licensee: {\n    Name: string;\n  };\n  add_ons: {\n    GitLab_FileLocks: number;\n    GitLab_Auditor_User: number;\n  };\n}\n\nexport class License<C extends boolean = false> extends BaseResource<C> {\n  add(license: string, options?: Sudo) {\n    return RequestHelper.post<LicenseSchema>()(this, 'license', { license, ...options });\n  }\n\n  all(options?: Sudo) {\n    return RequestHelper.get<LicenseSchema[]>()(this, 'licenses', options);\n  }\n\n  show(options?: Sudo) {\n    return RequestHelper.get<LicenseSchema>()(this, 'license', options);\n  }\n\n  remove(licenceId: number, options?: Sudo) {\n    return RequestHelper.del<LicenseSchema>()(this, `license/${licenceId}`, options);\n  }\n}\n","import { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { ResourceTemplates } from '../templates';\nimport { PaginatedRequestOptions, Sudo, CamelizedRecord } from '../infrastructure';\n\nexport interface LicenseTemplateSchema extends Record<string, unknown> {\n  key: string;\n  name: string;\n  nickname?: string;\n  featured: boolean;\n  html_url: string;\n  source_url: string;\n  description: string;\n  conditions?: string[];\n  permissions?: string[];\n  limitations?: string[];\n  content: string;\n}\n\nexport interface LicenseTemplates<C extends boolean = false> extends ResourceTemplates<C> {\n  all(options?: PaginatedRequestOptions): Promise<CamelizedRecord<C, LicenseTemplateSchema>[]>;\n  show(key: string | number, options?: Sudo): Promise<CamelizedRecord<C, LicenseTemplateSchema>>;\n}\n\nexport class LicenseTemplates<C extends boolean = false> extends ResourceTemplates<C> {\n  constructor(options: BaseResourceOptions<C>) {\n    /* istanbul ignore next */\n    super('Licenses', options);\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { BaseRequestOptions, RequestHelper } from '../infrastructure';\n\nexport interface LintSchema extends Record<string, unknown> {\n  status: string;\n  errors?: string[];\n  warnings?: string[];\n  merged_yaml?: string;\n}\n\nexport interface ContextualLintSchema extends Omit<LintSchema, 'status'> {\n  valid: boolean;\n}\n\nexport class Lint<C extends boolean = false> extends BaseResource<C> {\n  lint(content: string, options?: BaseRequestOptions) {\n    // Perform CI file linting without context.\n    // See https://docs.gitlab.com/ee/api/lint.html#validate-the-ci-yaml-configuration\n    // This API doesn't work for CI files that contain `local` includes. Use `lintWithNamespace` instead.\n    return RequestHelper.post<LintSchema>()(this, 'ci/lint', { content, ...options });\n  }\n\n  // TODO: Figure out a better way of writing this to not be limited by the typing.\n  lintWithNamespace(projectId: string | number, content: string, options?: BaseRequestOptions) {\n    // Perform CI file linting in the context of a specific project namespace.\n    // See https://docs.gitlab.com/ee/api/lint.html#validate-a-ci-yaml-configuration-with-a-namespace\n    // This API is useful when the CI file being linted has `local` includes, which requires project\n    // context to be understood.\n    return RequestHelper.post<ContextualLintSchema>()(this, `projects/${projectId}/ci/lint`, {\n      content,\n      ...options,\n    });\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { RequestHelper, PaginatedRequestOptions, Sudo, endpoint } from '../infrastructure';\n\nexport interface NamespaceSchema extends Record<string, unknown> {\n  id: number;\n  name: string;\n  path: string;\n  kind: string;\n  full_path: string;\n  parent_id?: number;\n  avatar_url: string;\n  web_url: string;\n  billable_members_count: number;\n  plan: string;\n  trial_ends_on?: string;\n  trial: boolean;\n}\n\n// TODO: Add missing functions\nexport class Namespaces<C extends boolean = false> extends BaseResource<C> {\n  all(options?: PaginatedRequestOptions) {\n    return RequestHelper.get<NamespaceSchema[]>()(this, 'namespaces', options);\n  }\n\n  show(namespaceId: string | number, options?: { search?: string } & Sudo) {\n    return RequestHelper.get<NamespaceSchema>()(this, endpoint`namespaces/${namespaceId}`, options);\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  endpoint,\n  PaginatedRequestOptions,\n  RequestHelper,\n} from '../infrastructure';\n\n// TODO: Add missing functions\n\nexport type NotificationSettingLevel =\n  | 'disabled'\n  | 'participating'\n  | 'watch'\n  | 'global'\n  | 'mention'\n  | 'custom';\n\nexport interface NotificationSettingSchema extends Record<string, unknown> {\n  level: NotificationSettingLevel;\n  notification_email: string;\n}\n\ninterface ScopedURLOptions {\n  projectId?: string | number;\n  groupId?: string | number;\n}\n\nfunction url({ projectId, groupId }: ScopedURLOptions) {\n  let uri: string;\n\n  if (projectId) {\n    uri = endpoint`projects/${projectId}/`;\n  } else if (groupId) {\n    uri = endpoint`groups/${groupId}/`;\n  } else {\n    uri = '';\n  }\n\n  return `${uri}notification_settings`;\n}\n\nexport class NotificationSettings<C extends boolean = false> extends BaseResource<C> {\n  all({\n    projectId,\n    groupId,\n    ...options\n  }: ({ projectId?: string | number } | { groupId?: string | number }) &\n    PaginatedRequestOptions = {}) {\n    return RequestHelper.get<NotificationSettingSchema[]>()(\n      this,\n      url({ groupId, projectId } as ScopedURLOptions),\n      options,\n    );\n  }\n\n  edit({\n    projectId,\n    groupId,\n    ...options\n  }: { level?: NotificationSettingLevel } & (\n    | { projectId?: string | number }\n    | { groupId?: string | number }\n  ) &\n    BaseRequestOptions = {}) {\n    return RequestHelper.put<NotificationSettingSchema>()(\n      this,\n      url({ groupId, projectId } as ScopedURLOptions),\n      options,\n    );\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { RequestHelper, Sudo } from '../infrastructure';\n\nexport interface MarkdownSchema extends Record<string, unknown> {\n  html: string;\n}\n\nexport class Markdown<C extends boolean = false> extends BaseResource<C> {\n  render(text: string, options?: { gfm?: string; project?: string | number } & Sudo) {\n    return RequestHelper.post<MarkdownSchema>()(this, 'markdown', { text, ...options });\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  endpoint,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface PagesDomainSchema extends Record<string, unknown> {\n  domain: string;\n  url: string;\n  project_id: number;\n  auto_ssl_enabled: boolean;\n  certificate: {\n    expired: boolean;\n    expiration: string;\n  };\n}\n\n// TODO: Add missing functions\n\nexport class PagesDomains<C extends boolean = false> extends BaseResource<C> {\n  all({ projectId, ...options }: { projectId?: string | number } & PaginatedRequestOptions = {}) {\n    const url = projectId ? endpoint`projects/${projectId}/` : '';\n\n    return RequestHelper.get<PagesDomainSchema[]>()(this, `${url}pages/domains`, options);\n  }\n\n  create(projectId: string | number, domain: string, options?: BaseRequestOptions) {\n    return RequestHelper.post<PagesDomainSchema>()(\n      this,\n      endpoint`projects/${projectId}/pages/domains`,\n      {\n        domain,\n        ...options,\n      },\n    );\n  }\n\n  edit(projectId: string | number, domain: string, options?: BaseRequestOptions) {\n    return RequestHelper.put<PagesDomainSchema>()(\n      this,\n      endpoint`projects/${projectId}/pages/domains/${domain}`,\n      options,\n    );\n  }\n\n  show(projectId: string | number, domain: string, options?: Sudo) {\n    return RequestHelper.get<PagesDomainSchema>()(\n      this,\n      endpoint`projects/${projectId}/pages/domains/${domain}`,\n      options,\n    );\n  }\n\n  remove(projectId: string | number, domain: string, options?: Sudo) {\n    return RequestHelper.del()(\n      this,\n      endpoint`projects/${projectId}/pages/domains/${domain}`,\n      options,\n    );\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { RequestHelper, BaseRequestOptions, endpoint } from '../infrastructure';\n\nexport interface SearchResultSchema extends Record<string, unknown> {\n  id: number;\n  description: string;\n  name: string;\n  name_with_namespace: string;\n  path: string;\n  path_with_namespace: string;\n  created_at: string;\n  default_branch: string;\n  tag_list?: string[];\n  ssh_url_to_repo: string;\n  http_url_to_repo: string;\n  web_url: string;\n  avatar_url?: string;\n  star_count: number;\n  forks_count: number;\n  last_activity_at: string;\n}\n\nexport class Search<C extends boolean = false> extends BaseResource<C> {\n  all(\n    scope: string,\n    search: string,\n    {\n      projectId,\n      groupId,\n      ...options\n    }: { projectId?: string | number; groupId?: string | number } & BaseRequestOptions = {},\n  ) {\n    let url: string;\n\n    if (projectId) {\n      url = endpoint`projects/${projectId}/`;\n    } else if (groupId) {\n      url = endpoint`groups/${groupId}/`;\n    } else {\n      url = '';\n    }\n\n    return RequestHelper.get<SearchResultSchema[]>()(this, `${url}search`, {\n      scope,\n      search,\n      ...options,\n    });\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { RequestHelper } from '../infrastructure';\n\nexport interface ProcessMetricSchema {\n  hostname: string;\n  pid: number;\n  tag: string;\n  started_at: string;\n  queues?: string[];\n  labels?: string[];\n  concurrency: number;\n  busy: number;\n}\n\nexport interface SidekickProcessMetricsSchema extends Record<string, unknown> {\n  processes?: ProcessMetricSchema[];\n}\n\nexport interface SidekickQueueMetricsSchema extends Record<string, unknown> {\n  queues: {\n    default: {\n      backlog: number;\n      latency: number;\n    };\n  };\n}\n\nexport interface SidekickJobStatsSchema extends Record<string, unknown> {\n  jobs: {\n    processed: number;\n    failed: number;\n    enqueued: number;\n    dead: number;\n  };\n}\n\nexport type SidekickCompoundMetricsSchema = SidekickJobStatsSchema &\n  SidekickQueueMetricsSchema &\n  SidekickProcessMetricsSchema;\n\nexport class SidekiqMetrics<C extends boolean = false> extends BaseResource<C> {\n  queueMetrics() {\n    return RequestHelper.get<SidekickQueueMetricsSchema>()(this, 'sidekiq/queue_metrics');\n  }\n\n  processMetrics() {\n    return RequestHelper.get<SidekickProcessMetricsSchema>()(this, 'sidekiq/process_metrics');\n  }\n\n  jobStats() {\n    return RequestHelper.get<SidekickJobStatsSchema>()(this, 'sidekiq/job_stats');\n  }\n\n  compoundMetrics() {\n    return RequestHelper.get<SidekickCompoundMetricsSchema>()(this, 'sidekiq/compound_metrics');\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { UserSchema } from './Users';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport type SnippetVisibility = 'private' | 'public' | 'internal';\n\nexport interface SnippetSchema extends Record<string, unknown> {\n  id: number;\n  title: string;\n  file_name: string;\n  description?: string;\n  visibility: string;\n  author: Pick<UserSchema, 'name' | 'username' | 'id' | 'state' | 'avatar_url' | 'web_url'>;\n  updated_at: string;\n  created_at: string;\n  project_id?: string | number;\n  web_url: string;\n  raw_url: string;\n}\n\nexport interface SnippetExtendedSchema extends SnippetSchema {\n  expires_at?: string;\n  ssh_url_to_repo: string;\n  http_url_to_repo: string;\n  files?: {\n    path: string;\n    raw_url: string;\n  }[];\n}\n\nexport interface UserAgentDetailSchema extends Record<string, unknown> {\n  user_agent: string;\n  ip_address: string;\n  akismet_submitted: boolean;\n}\n\nexport class Snippets<C extends boolean = false> extends BaseResource<C> {\n  all({ public: p, ...options }: { public?: boolean } & PaginatedRequestOptions = {}) {\n    const url = p ? 'snippets/public' : 'snippets';\n\n    return RequestHelper.get<SnippetSchema[]>()(this, url, options);\n  }\n\n  content(snippetId: number, options?: Sudo) {\n    return RequestHelper.get()(this, `snippets/${snippetId}/raw`, options);\n  }\n\n  create(\n    title: string,\n    fileName: string,\n    content: string,\n    visibility: SnippetVisibility,\n    options?: BaseRequestOptions,\n  ) {\n    return RequestHelper.post<SnippetExtendedSchema>()(this, 'snippets', {\n      title,\n      fileName,\n      content,\n      visibility,\n      ...options,\n    });\n  }\n\n  edit(snippetId: number, options?: BaseRequestOptions) {\n    return RequestHelper.put<SnippetExtendedSchema>()(this, `snippets/${snippetId}`, options);\n  }\n\n  remove(snippetId: number, options?: Sudo) {\n    return RequestHelper.del()(this, `snippets/${snippetId}`, options);\n  }\n\n  show(snippetId: number, options?: Sudo) {\n    return RequestHelper.get<SnippetSchema>()(this, `snippets/${snippetId}`, options);\n  }\n\n  userAgentDetails(snippetId: number, options?: Sudo) {\n    return RequestHelper.get<UserAgentDetailSchema>()(\n      this,\n      `snippets/${snippetId}/user_agent_detail`,\n      options,\n    );\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface SystemHookSchema extends Record<string, unknown> {\n  id: number;\n  url: string;\n  created_at: string;\n  push_events: boolean;\n  tag_push_events: boolean;\n  merge_requests_events: boolean;\n  repository_update_events: boolean;\n  enable_ssl_verification: boolean;\n}\n\nexport class SystemHooks<C extends boolean = false> extends BaseResource<C> {\n  add(url: string, options?: BaseRequestOptions) {\n    return RequestHelper.post<SystemHookSchema>()(this, 'hooks', { url, ...options });\n  }\n\n  all(options?: PaginatedRequestOptions) {\n    return RequestHelper.get<SystemHookSchema[]>()(this, 'hooks', options);\n  }\n\n  edit(hookId: number, url: string, options?: BaseRequestOptions) {\n    return RequestHelper.put<SystemHookSchema>()(this, `hooks/${hookId}`, { url, ...options });\n  }\n\n  remove(hookId: number, options?: Sudo) {\n    return RequestHelper.del()(this, `hooks/${hookId}`, options);\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport { RequestHelper, Sudo } from '../infrastructure';\n\nexport interface VersionSchema extends Record<string, unknown> {\n  version: string;\n  revision: string;\n}\n\nexport class Version<C extends boolean = false> extends BaseResource<C> {\n  show(options?: Sudo) {\n    return RequestHelper.get<VersionSchema>()(this, 'version', options);\n  }\n}\n","import { BaseResource } from '@gitbeaker/requester-utils';\nimport {\n  BaseRequestOptions,\n  endpoint,\n  PaginatedRequestOptions,\n  RequestHelper,\n  Sudo,\n} from '../infrastructure';\n\nexport interface WikiSchema extends Record<string, unknown> {\n  content: string;\n  format: string;\n  slug: string;\n  title: string;\n}\n\nexport class Wikis<C extends boolean = false> extends BaseResource<C> {\n  all(projectId: string | number, options?: PaginatedRequestOptions) {\n    return RequestHelper.get<WikiSchema[]>()(this, endpoint`projects/${projectId}/wikis`, options);\n  }\n\n  create(projectId: string | number, options?: BaseRequestOptions) {\n    return RequestHelper.post<WikiSchema>()(this, endpoint`projects/${projectId}/wikis`, options);\n  }\n\n  edit(projectId: string | number, slug: string, options?: BaseRequestOptions) {\n    return RequestHelper.put<WikiSchema>()(\n      this,\n      endpoint`projects/${projectId}/wikis/${slug}`,\n      options,\n    );\n  }\n\n  show(projectId: string | number, slug: string, options?: Sudo) {\n    return RequestHelper.get<WikiSchema>()(\n      this,\n      endpoint`projects/${projectId}/wikis/${slug}`,\n      options,\n    );\n  }\n\n  remove(projectId: string | number, slug: string, options?: Sudo) {\n    return RequestHelper.del()(this, endpoint`projects/${projectId}/wikis/${slug}`, options);\n  }\n}\n","/* eslint-disable  max-classes-per-file */\n\nimport { BaseResourceOptions } from '@gitbeaker/requester-utils';\nimport { Groups } from './Groups';\nimport { GroupAccessRequests } from './GroupAccessRequests';\nimport { GroupBadges } from './GroupBadges';\nimport { GroupCustomAttributes } from './GroupCustomAttributes';\nimport { GroupIssueBoards } from './GroupIssueBoards';\nimport { GroupMembers } from './GroupMembers';\nimport { GroupMilestones } from './GroupMilestones';\nimport { GroupRunners } from './GroupRunners';\nimport { GroupVariables } from './GroupVariables';\nimport { GroupLabels } from './GroupLabels';\nimport { GroupDeployTokens } from './GroupDeployTokens';\nimport { Epics } from './Epics';\nimport { EpicIssues } from './EpicIssues';\nimport { EpicNotes } from './EpicNotes';\nimport { EpicDiscussions } from './EpicDiscussions';\nimport { Users } from './Users';\nimport { UserCustomAttributes } from './UserCustomAttributes';\nimport { UserEmails } from './UserEmails';\nimport { UserImpersonationTokens } from './UserImpersonationTokens';\nimport { UserSSHKeys } from './UserSSHKeys';\nimport { UserGPGKeys } from './UserGPGKeys';\nimport { Branches } from './Branches';\nimport { Commits } from './Commits';\nimport { CommitDiscussions } from './CommitDiscussions';\nimport { ContainerRegistry } from './ContainerRegistry';\nimport { Deployments } from './Deployments';\nimport { DeployKeys } from './DeployKeys';\nimport { Environments } from './Environments';\nimport { FreezePeriods } from './FreezePeriods';\nimport { Issues } from './Issues';\nimport { IssuesStatistics } from './IssuesStatistics';\nimport { IssueNotes } from './IssueNotes';\nimport { IssueNoteAwardEmojis } from './IssueNoteAwardEmojis';\nimport { IssueDiscussions } from './IssueDiscussions';\nimport { IssueAwardEmojis } from './IssueAwardEmojis';\nimport { Jobs } from './Jobs';\nimport { Labels } from './Labels';\nimport { MergeRequests } from './MergeRequests';\nimport { MergeRequestApprovals } from './MergeRequestApprovals';\nimport { MergeRequestAwardEmojis } from './MergeRequestAwardEmojis';\nimport { MergeRequestDiscussions } from './MergeRequestDiscussions';\nimport { MergeRequestNotes } from './MergeRequestNotes';\nimport { Packages } from './Packages';\nimport { PackageRegistry } from './PackageRegistry';\nimport { Pipelines } from './Pipelines';\nimport { PipelineSchedules } from './PipelineSchedules';\nimport { PipelineScheduleVariables } from './PipelineScheduleVariables';\nimport { Projects } from './Projects';\nimport { ProjectAccessRequests } from './ProjectAccessRequests';\nimport { ProjectBadges } from './ProjectBadges';\nimport { ProjectCustomAttributes } from './ProjectCustomAttributes';\nimport { ProjectImportExport } from './ProjectImportExport';\nimport { ProjectIssueBoards } from './ProjectIssueBoards';\nimport { ProjectHooks } from './ProjectHooks';\nimport { ProjectMembers } from './ProjectMembers';\nimport { ProjectMilestones } from './ProjectMilestones';\nimport { ProjectSnippets } from './ProjectSnippets';\nimport { ProjectSnippetNotes } from './ProjectSnippetNotes';\nimport { ProjectSnippetDiscussions } from './ProjectSnippetDiscussions';\nimport { ProjectSnippetAwardEmojis } from './ProjectSnippetAwardEmojis';\nimport { ProtectedBranches } from './ProtectedBranches';\nimport { ProtectedTags } from './ProtectedTags';\nimport { ProjectVariables } from './ProjectVariables';\nimport { ProjectDeployTokens } from './ProjectDeployTokens';\nimport { PushRules } from './PushRules';\nimport { Releases } from './Releases';\nimport { ReleaseLinks } from './ReleaseLinks';\nimport { Repositories } from './Repositories';\nimport { RepositoryFiles } from './RepositoryFiles';\nimport { RepositorySubmodules } from './RepositorySubmodules';\nimport { Runners } from './Runners';\nimport { Services } from './Services';\nimport { Tags } from './Tags';\nimport { Todos } from './Todos';\nimport { Triggers } from './Triggers';\nimport { VulnerabilityFindings } from './VulnerabilityFindings';\nimport { ApplicationSettings } from './ApplicationSettings';\nimport { BroadcastMessages } from './BroadcastMessages';\nimport { Events } from './Events';\nimport { FeatureFlags } from './FeatureFlags';\nimport { GeoNodes } from './GeoNodes';\nimport { GitignoreTemplates } from './GitignoreTemplates';\nimport { GitLabCIYMLTemplates } from './GitLabCIYMLTemplates';\nimport { Keys } from './Keys';\nimport { License } from './License';\nimport { LicenseTemplates } from './LicenseTemplates';\nimport { Lint } from './Lint';\nimport { Namespaces } from './Namespaces';\nimport { NotificationSettings } from './NotificationSettings';\nimport { Markdown } from './Markdown';\nimport { PagesDomains } from './PagesDomains';\nimport { Search } from './Search';\nimport { SidekiqMetrics } from './SidekiqMetrics';\nimport { Snippets } from './Snippets';\nimport { SystemHooks } from './SystemHooks';\nimport { Version } from './Version';\nimport { Wikis } from './Wikis';\n\n// Figure out a better way of doing this using mapped types: https://stackoverflow.com/questions/67729408/how-to-create-mapped-type-using-generic-class-instances-in-typesscript?noredirect=1#comment119718863_67729408\n// This will most likely be accomplished using higher kinded types: https://github.com/Microsoft/TypeScript/issues/1213#issuecomment-750930496\n\ntype BundledService<C extends boolean = false> = {\n  Groups: Groups<C>;\n  GroupAccessRequests: GroupAccessRequests<C>;\n  GroupBadges: GroupBadges<C>;\n  GroupCustomAttributes: GroupCustomAttributes<C>;\n  GroupIssueBoards: GroupIssueBoards<C>;\n  GroupMembers: GroupMembers<C>;\n  GroupMilestones: GroupMilestones<C>;\n  GroupRunners: GroupRunners<C>;\n  GroupVariables: GroupVariables<C>;\n  GroupLabels: GroupLabels<C>;\n  GroupDeployTokens: GroupDeployTokens<C>;\n  Epics: Epics<C>;\n  EpicIssues: EpicIssues<C>;\n  EpicNotes: EpicNotes<C>;\n  EpicDiscussions: EpicDiscussions<C>;\n  Users: Users<C>;\n  UserCustomAttributes: UserCustomAttributes<C>;\n  UserEmails: UserEmails<C>;\n  UserImpersonationTokens: UserImpersonationTokens<C>;\n  UserSSHKeys: UserSSHKeys<C>;\n  UserGPGKeys: UserGPGKeys<C>;\n  Branches: Branches<C>;\n  Commits: Commits<C>;\n  CommitDiscussions: CommitDiscussions<C>;\n  ContainerRegistry: ContainerRegistry<C>;\n  Deployments: Deployments<C>;\n  DeployKeys: DeployKeys<C>;\n  Environments: Environments<C>;\n  FreezePeriods: FreezePeriods<C>;\n  Issues: Issues<C>;\n  IssuesStatistics: IssuesStatistics<C>;\n  IssueNotes: IssueNotes<C>;\n  IssueNoteAwardEmojis: IssueNoteAwardEmojis<C>;\n  IssueDiscussions: IssueDiscussions<C>;\n  IssueAwardEmojis: IssueAwardEmojis<C>;\n  Jobs: Jobs<C>;\n  Labels: Labels<C>;\n  MergeRequests: MergeRequests<C>;\n  MergeRequestApprovals: MergeRequestApprovals<C>;\n  MergeRequestAwardEmojis: MergeRequestAwardEmojis<C>;\n  MergeRequestDiscussions: MergeRequestDiscussions<C>;\n  MergeRequestNotes: MergeRequestNotes<C>;\n  Packages: Packages<C>;\n  PackageRegistry: PackageRegistry<C>;\n  Pipelines: Pipelines<C>;\n  PipelineSchedules: PipelineSchedules<C>;\n  PipelineScheduleVariables: PipelineScheduleVariables<C>;\n  Projects: Projects<C>;\n  ProjectAccessRequests: ProjectAccessRequests<C>;\n  ProjectBadges: ProjectBadges<C>;\n  ProjectCustomAttributes: ProjectCustomAttributes<C>;\n  ProjectImportExport: ProjectImportExport<C>;\n  ProjectIssueBoards: ProjectIssueBoards<C>;\n  ProjectHooks: ProjectHooks<C>;\n  ProjectMembers: ProjectMembers<C>;\n  ProjectMilestones: ProjectMilestones<C>;\n  ProjectSnippets: ProjectSnippets<C>;\n  ProjectSnippetNotes: ProjectSnippetNotes<C>;\n  ProjectSnippetDiscussions: ProjectSnippetDiscussions<C>;\n  ProjectSnippetAwardEmojis: ProjectSnippetAwardEmojis<C>;\n  ProtectedBranches: ProtectedBranches<C>;\n  ProtectedTags: ProtectedTags<C>;\n  ProjectVariables: ProjectVariables<C>;\n  ProjectDeployTokens: ProjectDeployTokens<C>;\n  PushRules: PushRules<C>;\n  Releases: Releases<C>;\n  ReleaseLinks: ReleaseLinks<C>;\n  Repositories: Repositories<C>;\n  RepositoryFiles: RepositoryFiles<C>;\n  RepositorySubmodules: RepositorySubmodules<C>;\n  Runners: Runners<C>;\n  Services: Services<C>;\n  Tags: Tags<C>;\n  Todos: Todos<C>;\n  Triggers: Triggers<C>;\n  VulnerabilityFindings: VulnerabilityFindings<C>;\n  ApplicationSettings: ApplicationSettings<C>;\n  BroadcastMessages: BroadcastMessages<C>;\n  Events: Events<C>;\n  FeatureFlags: FeatureFlags<C>;\n  GeoNodes: GeoNodes<C>;\n  GitignoreTemplates: GitignoreTemplates<C>;\n  GitLabCIYMLTemplates: GitLabCIYMLTemplates<C>;\n  Keys: Keys<C>;\n  License: License<C>;\n  LicenseTemplates: LicenseTemplates<C>;\n  Lint: Lint<C>;\n  Namespaces: Namespaces<C>;\n  NotificationSettings: NotificationSettings<C>;\n  Markdown: Markdown<C>;\n  PagesDomains: PagesDomains<C>;\n  Search: Search<C>;\n  SidekiqMetrics: SidekiqMetrics<C>;\n  Snippets: Snippets<C>;\n  SystemHooks: SystemHooks<C>;\n  Version: Version<C>;\n  Wikis: Wikis<C>;\n};\n\nconst resources = {\n  Groups,\n  GroupAccessRequests,\n  GroupBadges,\n  GroupCustomAttributes,\n  GroupIssueBoards,\n  GroupMembers,\n  GroupMilestones,\n  GroupRunners,\n  GroupVariables,\n  GroupLabels,\n  GroupDeployTokens,\n  Epics,\n  EpicIssues,\n  EpicNotes,\n  EpicDiscussions,\n  Users,\n  UserCustomAttributes,\n  UserEmails,\n  UserImpersonationTokens,\n  UserSSHKeys,\n  UserGPGKeys,\n  Branches,\n  Commits,\n  CommitDiscussions,\n  ContainerRegistry,\n  Deployments,\n  DeployKeys,\n  Environments,\n  FreezePeriods,\n  Issues,\n  IssuesStatistics,\n  IssueNotes,\n  IssueNoteAwardEmojis,\n  IssueDiscussions,\n  IssueAwardEmojis,\n  Jobs,\n  Labels,\n  MergeRequests,\n  MergeRequestApprovals,\n  MergeRequestAwardEmojis,\n  MergeRequestDiscussions,\n  MergeRequestNotes,\n  Packages,\n  PackageRegistry,\n  Pipelines,\n  PipelineSchedules,\n  PipelineScheduleVariables,\n  Projects,\n  ProjectAccessRequests,\n  ProjectBadges,\n  ProjectCustomAttributes,\n  ProjectImportExport,\n  ProjectIssueBoards,\n  ProjectHooks,\n  ProjectMembers,\n  ProjectMilestones,\n  ProjectSnippets,\n  ProjectSnippetNotes,\n  ProjectSnippetDiscussions,\n  ProjectSnippetAwardEmojis,\n  ProtectedBranches,\n  ProtectedTags,\n  ProjectVariables,\n  ProjectDeployTokens,\n  PushRules,\n  Releases,\n  ReleaseLinks,\n  Repositories,\n  RepositoryFiles,\n  RepositorySubmodules,\n  Runners,\n  Services,\n  Tags,\n  Todos,\n  Triggers,\n  VulnerabilityFindings,\n  ApplicationSettings,\n  BroadcastMessages,\n  Events,\n  FeatureFlags,\n  GeoNodes,\n  GitignoreTemplates,\n  GitLabCIYMLTemplates,\n  Keys,\n  License,\n  LicenseTemplates,\n  Lint,\n  Namespaces,\n  NotificationSettings,\n  Markdown,\n  PagesDomains,\n  Search,\n  SidekiqMetrics,\n  Snippets,\n  SystemHooks,\n  Version,\n  Wikis,\n};\n\nexport class Gitlab<C extends boolean = false> extends (class {} as new () => BundledService) {\n  constructor(options: BaseResourceOptions<C>) {\n    super();\n\n    Object.keys(resources).forEach((s) => {\n      this[s] = new resources[s]<C>(options);\n    });\n  }\n}\n","// Groups\nexport { Groups } from './Groups';\nexport { GroupAccessRequests } from './GroupAccessRequests';\nexport { GroupBadges } from './GroupBadges';\nexport { GroupCustomAttributes } from './GroupCustomAttributes';\nexport { GroupIssueBoards } from './GroupIssueBoards';\nexport { GroupMembers } from './GroupMembers';\nexport { GroupMilestones } from './GroupMilestones';\nexport { GroupRunners } from './GroupRunners';\nexport { GroupVariables } from './GroupVariables';\nexport { GroupLabels } from './GroupLabels';\nexport { GroupDeployTokens } from './GroupDeployTokens';\nexport { Epics } from './Epics';\nexport { EpicIssues } from './EpicIssues';\nexport { EpicNotes } from './EpicNotes';\nexport { EpicDiscussions } from './EpicDiscussions';\n\n// Users\nexport { Users } from './Users';\nexport { UserCustomAttributes } from './UserCustomAttributes';\nexport { UserEmails } from './UserEmails';\nexport { UserImpersonationTokens } from './UserImpersonationTokens';\nexport { UserSSHKeys } from './UserSSHKeys';\nexport { UserGPGKeys } from './UserGPGKeys';\n\n// Projects\nexport { Branches } from './Branches';\nexport { Commits } from './Commits';\nexport { CommitDiscussions } from './CommitDiscussions';\nexport { ContainerRegistry } from './ContainerRegistry';\nexport { Deployments } from './Deployments';\nexport { DeployKeys } from './DeployKeys';\nexport { Environments } from './Environments';\nexport { FreezePeriods } from './FreezePeriods';\nexport { Issues } from './Issues';\nexport { IssuesStatistics } from './IssuesStatistics';\nexport { IssueNotes } from './IssueNotes';\nexport { IssueNoteAwardEmojis } from './IssueNoteAwardEmojis';\nexport { IssueDiscussions } from './IssueDiscussions';\nexport { IssueAwardEmojis } from './IssueAwardEmojis';\nexport { Jobs } from './Jobs';\nexport { Labels } from './Labels';\nexport { MergeRequests } from './MergeRequests';\nexport { MergeRequestApprovals } from './MergeRequestApprovals';\nexport { MergeRequestAwardEmojis } from './MergeRequestAwardEmojis';\nexport { MergeRequestDiscussions } from './MergeRequestDiscussions';\nexport { MergeRequestNotes } from './MergeRequestNotes';\nexport { Packages } from './Packages';\nexport { PackageRegistry } from './PackageRegistry';\nexport { Pipelines } from './Pipelines';\nexport { PipelineSchedules } from './PipelineSchedules';\nexport { PipelineScheduleVariables } from './PipelineScheduleVariables';\nexport { Projects } from './Projects';\nexport { ProjectAccessRequests } from './ProjectAccessRequests';\nexport { ProjectBadges } from './ProjectBadges';\nexport { ProjectCustomAttributes } from './ProjectCustomAttributes';\nexport { ProjectImportExport } from './ProjectImportExport';\nexport { ProjectIssueBoards } from './ProjectIssueBoards';\nexport { ProjectHooks } from './ProjectHooks';\nexport { ProjectMembers } from './ProjectMembers';\nexport { ProjectMilestones } from './ProjectMilestones';\nexport { ProjectSnippets } from './ProjectSnippets';\nexport { ProjectSnippetNotes } from './ProjectSnippetNotes';\nexport { ProjectSnippetDiscussions } from './ProjectSnippetDiscussions';\nexport { ProjectSnippetAwardEmojis } from './ProjectSnippetAwardEmojis';\nexport { ProtectedBranches } from './ProtectedBranches';\nexport { ProtectedTags } from './ProtectedTags';\nexport { ProjectVariables } from './ProjectVariables';\nexport { ProjectDeployTokens } from './ProjectDeployTokens';\nexport { PushRules } from './PushRules';\nexport { Releases } from './Releases';\nexport { ReleaseLinks } from './ReleaseLinks';\nexport { Repositories } from './Repositories';\nexport { RepositoryFiles } from './RepositoryFiles';\nexport { RepositorySubmodules } from './RepositorySubmodules';\nexport { Runners } from './Runners';\nexport { Services } from './Services';\nexport { Tags } from './Tags';\nexport { Todos } from './Todos';\nexport { Triggers } from './Triggers';\nexport { VulnerabilityFindings } from './VulnerabilityFindings';\n\n// General\nexport { ApplicationSettings } from './ApplicationSettings';\nexport { BroadcastMessages } from './BroadcastMessages';\nexport { Events } from './Events';\nexport { FeatureFlags } from './FeatureFlags';\nexport { GeoNodes } from './GeoNodes';\nexport { GitignoreTemplates } from './GitignoreTemplates';\nexport { GitLabCIYMLTemplates } from './GitLabCIYMLTemplates';\nexport { Keys } from './Keys';\nexport { License } from './License';\nexport { LicenseTemplates } from './LicenseTemplates';\nexport { Lint } from './Lint';\nexport { Namespaces } from './Namespaces';\nexport { NotificationSettings } from './NotificationSettings';\nexport { Markdown } from './Markdown';\nexport { PagesDomains } from './PagesDomains';\nexport { Search } from './Search';\nexport { SidekiqMetrics } from './SidekiqMetrics';\nexport { Snippets } from './Snippets';\nexport { SystemHooks } from './SystemHooks';\nexport { Version } from './Version';\nexport { Wikis } from './Wikis';\n\n// Bundle\nexport { Gitlab } from './Gitlab';\n"],"names":["parseLink","parseQueryString","url"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAYgB,oBAAoB,CAAC,MAA+B;;;IAGlE,IAAM,IAAI,GAAG,IAAI,QAAQ,EAAE,CAAC;IAE5B,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAC,EAAM;YAAN,KAAA,aAAM,EAAL,CAAC,QAAA,EAAE,CAAC,QAAA;QACnC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;YAAE,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;YAC5C,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAQ,CAAC,CAAC;KAC/B,CAAC,CAAC;IAEH,OAAO,IAAI,CAAC;AACd,CAAC;SAEe,SAAS;IACvB,IAAI;;QAEF,OAAO,OAAO,CAAC,YAAqB,CAA4B,CAAC;KAClE;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;KAC5E;AACH,CAAC;SAWe,QAAQ,CAAC,OAA6B;IAAE,gBAA8B;SAA9B,UAA8B,EAA9B,qBAA8B,EAA9B,IAA8B;QAA9B,+BAA8B;;IACpF,OAAO,MAAM,CAAC,MAAM,CAClB,UAAC,MAAM,EAAE,KAAK,EAAE,KAAK,IAAK,OAAA,MAAM,GAAG,kBAAkB,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC,GAAA,EACjF,OAAO,CAAC,CAAC,CAAC,CACX,CAAC;AACJ;;ACyCA,SAAe,SAAS,CACtB,OAA8B,EAC9B,QAAgB,EAChB,EAKiF,EACjF,GAAmC;IANnC,mBAAA,EAAA,OAKiF;IACjF,oBAAA,EAAA,QAAmC;IALjC,IAAA,IAAI,UAAA,EACJ,YAAY,kBAAA,EACZ,QAAQ,cAAA,EACL,KAAK,cAJV,oCAKC,CADS;;;;;wBAIO,qBAAM,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,KAAK,OAAA,EAAE,IAAI,MAAA,EAAE,CAAC,EAAA;;oBAAjE,QAAQ,GAAG,SAAsD;oBAC/D,OAAO,GAAa,QAAQ,QAArB,EAAE,MAAM,GAAK,QAAQ,OAAb,CAAc;oBAC/B,IAAI,GAAK,QAAQ,KAAb,CAAc;;oBAGxB,IAAI,OAAO,CAAC,QAAQ;wBAAE,IAAI,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;;oBAGhD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;wBACxB,IAAI,CAAC,YAAY;4BAAE,sBAAO,IAAI,EAAC;wBAE/B,sBAAO;gCACL,IAAI,EAAE,IAAI;gCACV,OAAO,SAAA;gCACP,MAAM,QAAA;6BACP,EAAC;qBACH;oBAGK,MAAM,0CAAO,GAAG,kBAAK,IAAI,SAAC,CAAC;oBACzB,IAAI,GAAuBA,KAAS,CAAC,OAAO,CAAC,IAAI,CAAC,KAA9C,CAA+C;oBACnD,KAAmB,CAAA,IAAI;0BAC3BC,QAAgB,CAAC,IAAI,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,CAAC;0BACtE,EAAE,OAFgB,EAAP,EAAE,mBAAG,EAAE,KAAA,CAEf;oBACD,YAAY,GAAG,QAAQ;0BACzB,MAAM,CAAC,MAAM,IAAK,EAAE,CAAC,QAA8B,IAAI,EAAE,CAAC,GAAG,QAAQ;0BACrE,IAAI,CAAC;;oBAGT,IAAI,EAAE,KAAK,CAAC,IAAI,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,CAAC,IAAI,IAAI,IAAI,YAAY,EAAE;wBAC7D,sBAAO,SAAS,CACd,OAAO,EACP,QAAQ,wBAEH,EAAE,KACL,QAAQ,UAAA,EACR,IAAI,MAAA,KAEN,MAAM,CACP,EAAC;qBACH;oBAED,IAAI,CAAC,YAAY,IAAI,KAAK,CAAC,UAAU,KAAK,QAAQ;wBAAE,sBAAO,MAAM,EAAC;oBAElE,sBAAO;4BACL,IAAI,EAAE,MAAM;4BACZ,cAAc,EAAE;gCACd,KAAK,EAAE,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC;gCACvC,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE,EAAE,CAAC,IAAI,IAAI;gCAClD,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC;gCAC7C,QAAQ,EAAE,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE,EAAE,CAAC,IAAI,IAAI;gCACtD,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,EAAE,CAAC;gCAC5C,UAAU,EAAE,QAAQ,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE,EAAE,CAAC;6BACnD;yBACF,EAAC;;;;CACH;SAEe,GAAG;IAGjB,OAAO,UACL,OAAwB,EACxB,QAAgB,EAChB,OAA4E,IACpC,OAAA,SAAS,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,GAAA,CAAC;AAClF,CAAC;SAEe,IAAI;IAApB,iBA4BC;IA3BC,OAAO,UACL,OAAwB,EACxB,QAAgB,EAChB,EAMqD;QANrD,mBAAA,EAAA,OAMqD;;;YALnD,IAAA,KAAK,WAAA,EACL,MAAM,YAAA,EACN,IAAI,UAAA,EACJ,YAAY,kBAAA,EACT,OAAO,cALZ,2CAMC,CADW;;;;wBAGN,IAAI,GAAG,MAAM,GAAG,oBAAoB,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC;wBAEpD,qBAAM,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE;gCAC/C,KAAK,OAAA;gCACL,IAAI,MAAA;gCACJ,IAAI,MAAA;6BACL,CAAC,EAAA;;wBAJI,CAAC,GAAG,SAIR;wBAEF,sBAAO,YAAY;kCACf;oCACE,IAAI,EAAE,CAAC,CAAC,IAAI;oCACZ,MAAM,EAAE,CAAC,CAAC,MAAM;oCAChB,OAAO,EAAE,CAAC,CAAC,OAAO;iCACnB;kCACD,CAAC,CAAC,IAAI,EAAC;;;;KACZ,CAAC;AACJ,CAAC;SAEe,GAAG;IAAnB,iBA4BC;IA3BC,OAAO,UACL,OAAwB,EACxB,QAAgB,EAChB,EAMqD;QANrD,mBAAA,EAAA,OAMqD;;;YALnD,IAAA,KAAK,WAAA,EACL,MAAM,YAAA,EACN,IAAI,UAAA,EACJ,YAAY,kBAAA,EACT,OAAO,cALZ,2CAMC,CADW;;;;wBAGN,IAAI,GAAG,MAAM,GAAG,oBAAoB,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC;wBAEpD,qBAAM,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,EAAE;gCAC9C,IAAI,MAAA;gCACJ,KAAK,OAAA;gCACL,IAAI,MAAA;6BACL,CAAC,EAAA;;wBAJI,CAAC,GAAG,SAIR;wBAEF,sBAAO,YAAY;kCACf;oCACE,IAAI,EAAE,CAAC,CAAC,IAAI;oCACZ,MAAM,EAAE,CAAC,CAAC,MAAM;oCAChB,OAAO,EAAE,CAAC,CAAC,OAAO;iCACnB;kCACD,CAAC,CAAC,IAAI,EAAC;;;;KACZ,CAAC;AACJ,CAAC;SAEe,GAAG;IAAnB,iBAsBC;IArBC,OAAO,UACL,OAAwB,EACxB,QAAgB,EAChB,EAAoF;QAApF,mBAAA,EAAA,OAAoF;;;YAAlF,IAAA,IAAI,UAAA,EAAE,YAAY,kBAAA,EAAE,KAAK,WAAA,EAAK,OAAO,cAAvC,iCAAyC,CAAF;;;;wBAEjC,IAAI,GAAG,OAAO,CAAC;wBAEX,qBAAM,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,EAAE;gCACjD,IAAI,MAAA;gCACJ,KAAK,OAAA;gCACL,IAAI,MAAA;6BACL,CAAC,EAAA;;wBAJI,CAAC,GAAG,SAIR;wBAEF,sBAAO,YAAY;kCACf;oCACE,IAAI,EAAE,CAAC,CAAC,IAAI;oCACZ,MAAM,EAAE,CAAC,CAAC,MAAM;oCAChB,OAAO,EAAE,CAAC,CAAC,OAAO;iCACnB;kCACD,CAAC,CAAC,IAAI,EAAC;;;;KACZ,CAAC;AACJ,CAAC;AAED,SAAS,MAAM,CACb,OAAwB,EACxB,QAAgB,EAChB,OAA4B;IAE5B,IAAI,OAAO,OAAO,CAAC,SAAS,CAAC,MAAM,KAAK,UAAU,EAAE;QAClD,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;KACrE;IAED,OAAO,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,EAAE;QACxC,KAAK,EAAE,OAAO;KACf,CAAC,CAAC;AACL,CAAC;AAEM,IAAM,aAAa,GAAG;IAC3B,IAAI,MAAA;IACJ,GAAG,KAAA;IACH,GAAG,KAAA;IACH,GAAG,KAAA;IACH,MAAM,QAAA;CACP;;;IClNsD,0BAAe;IAAtE;;KAiFC;IAhFC,oBAAG,GAAH,UAAI,OAAiC;QACnC,OAAO,aAAa,CAAC,GAAG,EAAiB,CAAC,IAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;KACpE;IAED,uBAAM,GAAN,UAAO,IAAY,EAAE,IAAY,EAAE,OAA4B;QAC7D,OAAO,aAAa,CAAC,IAAI,EAAe,CAAC,IAAI,EAAE,QAAQ,aAAI,IAAI,MAAA,EAAE,IAAI,MAAA,IAAK,OAAO,EAAG,CAAC;KACtF;IAED,+BAAc,GAAd,UACE,OAAwB,EACxB,EAAU,EACV,WAAmB,EACnB,QAAgB,EAChB,OAA6B;QAE7B,OAAO,aAAa,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,QAAQ,qGAAA,SAAU,EAAO,mBAAmB,KAA1B,OAAO,cACzD,EAAE,IAAA,EACF,WAAW,aAAA,EACX,QAAQ,UAAA,IACL,OAAO,EACV,CAAC;KACJ;IAED,qBAAI,GAAJ,UAAK,OAAwB,EAAE,OAA4B;QACzD,OAAO,aAAa,CAAC,GAAG,EAAe,CAAC,IAAI,EAAE,QAAQ,oFAAA,SAAU,EAAO,EAAE,KAAT,OAAO,GAAI,OAAO,CAAC,CAAC;KACrF;IAED,yBAAQ,GAAR,UAAS,OAAwB,EAAE,OAA4B;QAC7D,OAAO,aAAa,CAAC,GAAG,EAAmB,CACzC,IAAI,EACJ,QAAQ,6FAAA,SAAU,EAAO,WAAW,KAAlB,OAAO,GACzB,OAAO,CACR,CAAC;KACH;IAED,uBAAM,GAAN,UAAO,OAAwB,EAAE,OAA6B;QAC5D,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,QAAQ,oFAAA,SAAU,EAAO,EAAE,KAAT,OAAO,GAAI,OAAO,CAAC,CAAC;KACxE;IAED,+BAAc,GAAd,UACE,OAAwB,EACxB,EAAU,EACV,EAA0E;QAA1E,mBAAA,EAAA,OAA0E;QAAxE,IAAA,QAAQ,cAAA,EAAK,OAAO,cAAtB,YAAwB,CAAF;QAEtB,IAAM,GAAG,GAAG,kBAAkB,CAAC,OAAO,CAAC,CAAC;QACxC,IAAM,GAAG,GAAG,QAAQ,GAAG,UAAG,QAAQ,cAAI,EAAE,CAAE,GAAG,UAAG,EAAE,CAAE,CAAC;QAErD,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJ,iBAAU,GAAG,+BAAqB,GAAG,CAAE,EACvC,OAAkC,CACnC,CAAC;KACH;IAED,uBAAM,GAAN,UAAO,UAAkB,EAAE,OAAc;QACvC,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,QAAQ,aACvC,MAAM,EAAE,UAAU,IACf,OAAO,EACV,CAAC;KACJ;IAED,qBAAI,GAAJ,UAAK,OAAwB,EAAE,OAA4B;QACzD,OAAO,aAAa,CAAC,GAAG,EAAqB,CAAC,IAAI,EAAE,QAAQ,oFAAA,SAAU,EAAO,EAAE,KAAT,OAAO,GAAI,OAAO,CAAC,CAAC;KAC3F;IAED,0BAAS,GAAT,UAAU,OAAwB,EAAE,OAAiC;QACnE,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,QAAQ,8FAAA,SAAU,EAAO,YAAY,KAAnB,OAAO,GAAc,OAAO,CAAC,CAAC;KAClF;IAED,yBAAQ,GAAR,UAAS,OAAwB,EAAE,OAA6B;QAC9D,OAAO,aAAa,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,QAAQ,8FAAA,SAAU,EAAO,YAAY,KAAnB,OAAO,GAAc,OAAO,CAAC,CAAC;KACnF;IAED,gCAAe,GAAf,UACE,OAAwB,EACxB,SAA0B,EAC1B,OAA2C;QAE3C,OAAO,aAAa,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,QAAQ,kGAAA,SAAU,EAAO,YAAa,EAAS,EAAE,KAA/B,OAAO,EAAa,SAAS,GAAI,OAAO,CAAC,CAAC;KAC/F;IACH,aAAC;AAAD,CAjFA,CAAuD,YAAY,GAiFlE;;;AChID;IAAuE,0CAAe;IACpF,gCAAY,YAAoB,EAAE,OAA+B;eAC/D,6BAAQ,SAAS,EAAE,YAAY,IAAK,OAAO,EAAG;KAC/C;IAED,oCAAG,GAAH,UAAI,UAA2B;QAC7B,OAAO,aAAa,CAAC,GAAG,EAAyB,CAC/C,IAAI,EACJ,QAAQ,6FAAA,EAAG,EAAU,kBAAkB,KAA5B,UAAU,EACtB,CAAC;KACH;IAED,wCAAO,GAAP,UAAQ,UAA2B;QACjC,OAAO,aAAa,CAAC,IAAI,EAAuB,CAAC,IAAI,EAAE,QAAQ,6FAAA,EAAG,EAAU,kBAAkB,KAA5B,UAAU,EAAmB,CAAC;KACjG;IAED,wCAAO,GAAP,UACE,UAA2B,EAC3B,MAAc,EACd,OAA8C;QAE9C,OAAO,aAAa,CAAC,IAAI,EAAuB,CAC9C,IAAI,EACJ,QAAQ,0GAAA,EAAG,EAAU,mBAAoB,EAAM,UAAU,KAA9C,UAAU,EAAoB,MAAM,GAC/C,OAAO,CACR,CAAC;KACH;IAED,qCAAI,GAAJ,UAAK,UAA2B,EAAE,MAAc;QAC9C,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,QAAQ,kGAAA,EAAG,EAAU,mBAAoB,EAAM,EAAE,KAAtC,UAAU,EAAoB,MAAM,EAAG,CAAC;KACrF;IACH,6BAAC;AAAD,CA/BA,CAAuE,YAAY,GA+BlF;;;SC/BeC,KAAG,CACjB,SAA0B,EAC1B,YAAoB,EACpB,UAA2B,EAC3B,OAAuB,EACvB,MAAe;IAET,IAAA,KAAA,OAAa,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC,GAAG,CAAC,kBAAkB,CAAC,IAAA,EAA3D,GAAG,QAAA,EAAE,GAAG,QAAmD,CAAC;IACnE,IAAM,MAAM,GAAG,CAAC,GAAG,EAAE,YAAY,EAAE,GAAG,CAAC,CAAC;IAExC,IAAI,MAAM;QAAE,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;IAE7D,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAE3B,IAAI,OAAO;QAAE,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC;IAEtD,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC1B,CAAC;AAED;IAAoE,uCAAe;IAGjF,6BAAY,YAAoB,EAAE,OAA+B;QAAjE,YACE,6BAAQ,SAAS,EAAE,UAAU,IAAK,OAAO,EAAG,SAG7C;QADC,KAAI,CAAC,YAAY,GAAG,YAAY,CAAC;;KAClC;IAED,iCAAG,GAAH,UAAI,SAA0B,EAAE,WAAmB,EAAE,OAAiC;QACpF,OAAO,aAAa,CAAC,GAAG,EAAsB,CAC5C,IAAI,EACJA,KAAG,CAAC,SAAS,EAAE,IAAI,CAAC,YAAY,EAAE,WAAW,CAAC,EAC9C,OAAO,CACR,CAAC;KACH;IAED,mCAAK,GAAL,UAAM,SAA0B,EAAE,WAAmB,EAAE,IAAY,EAAE,OAAc;QACjF,OAAO,aAAa,CAAC,IAAI,EAAoB,CAC3C,IAAI,EACJA,KAAG,CAAC,SAAS,EAAE,IAAI,CAAC,YAAY,EAAE,WAAW,CAAC,aAE5C,IAAI,MAAA,IACD,OAAO,EAEb,CAAC;KACH;IAED,oCAAM,GAAN,UAAO,SAA0B,EAAE,WAAmB,EAAE,OAAe,EAAE,OAAc;QACrF,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJA,KAAG,CAAC,SAAS,EAAE,IAAI,CAAC,YAAY,EAAE,WAAW,EAAE,OAAO,CAAC,EACvD,OAAO,CACR,CAAC;KACH;IAED,kCAAI,GAAJ,UAAK,SAA0B,EAAE,WAAmB,EAAE,OAAe,EAAE,OAAc;QACnF,OAAO,aAAa,CAAC,GAAG,EAAoB,CAC1C,IAAI,EACJA,KAAG,CAAC,SAAS,EAAE,IAAI,CAAC,YAAY,EAAE,WAAW,EAAE,OAAO,CAAC,EACvD,OAAO,CACR,CAAC;KACH;IACH,0BAAC;AAAD,CA3CA,CAAoE,YAAY;;AC7BhF;IAAwE,2CAAe;IAGrF,iCAAY,YAAoB,EAAE,OAA+B;QAAjE,YACE,6BAAQ,SAAS,EAAE,UAAU,IAAK,OAAO,EAAG,SAG7C;QADC,KAAI,CAAC,YAAY,GAAG,YAAY,CAAC;;KAClC;IAED,qCAAG,GAAH,UACE,SAA0B,EAC1B,WAAmB,EACnB,MAAc,EACd,OAAiC;QAEjC,OAAO,aAAa,CAAC,GAAG,EAAsB,CAC5C,IAAI,EACJA,KAAG,CAAC,SAAS,EAAE,IAAI,CAAC,YAAY,EAAE,WAAW,EAAE,IAAI,EAAE,MAAM,CAAC,EAC5D,OAAO,CACR,CAAC;KACH;IAED,uCAAK,GAAL,UACE,SAA0B,EAC1B,WAAmB,EACnB,MAAc,EACd,IAAY,EACZ,OAAc;QAEd,OAAO,aAAa,CAAC,IAAI,EAAoB,CAC3C,IAAI,EACJA,KAAG,CAAC,SAAS,EAAE,IAAI,CAAC,YAAY,EAAE,WAAW,EAAE,IAAI,EAAE,MAAM,CAAC,aAE1D,IAAI,MAAA,IACD,OAAO,EAEb,CAAC;KACH;IAED,wCAAM,GAAN,UACE,SAA0B,EAC1B,WAAmB,EACnB,MAAc,EACd,OAAe,EACf,OAAc;QAEd,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJA,KAAG,CAAC,SAAS,EAAE,IAAI,CAAC,YAAY,EAAE,WAAW,EAAE,OAAO,EAAE,MAAM,CAAC,EAC/D,OAAO,CACR,CAAC;KACH;IAED,sCAAI,GAAJ,UACE,SAA0B,EAC1B,WAAmB,EACnB,MAAc,EACd,OAAe,EACf,OAAc;QAEd,OAAO,aAAa,CAAC,GAAG,EAAoB,CAC1C,IAAI,EACJA,KAAG,CAAC,SAAS,EAAE,IAAI,CAAC,YAAY,EAAE,WAAW,EAAE,OAAO,EAAE,MAAM,CAAC,EAC/D,OAAO,CACR,CAAC;KACH;IACH,8BAAC;AAAD,CAlEA,CAAwE,YAAY;;ACepF;IAA+D,kCAAe;IAC5E,wBAAY,YAAoB,EAAE,OAA+B;eAC/D,6BAAQ,SAAS,EAAE,YAAY,IAAK,OAAO,EAAG;KAC/C;IAED,4BAAG,GAAH,UAAI,UAA2B,EAAE,OAA4B;QAC3D,OAAO,aAAa,CAAC,IAAI,EAAe,CAAC,IAAI,EAAE,QAAQ,oFAAA,EAAG,EAAU,SAAS,KAAnB,UAAU,GAAW,OAAO,CAAC,CAAC;KACzF;IAED,4BAAG,GAAH,UAAI,UAA2B,EAAE,OAAiC;QAChE,OAAO,aAAa,CAAC,GAAG,EAAiB,CAAC,IAAI,EAAE,QAAQ,oFAAA,EAAG,EAAU,SAAS,KAAnB,UAAU,GAAW,OAAO,CAAC,CAAC;KAC1F;IAED,6BAAI,GAAJ,UAAK,UAA2B,EAAE,OAAe,EAAE,OAA4B;QAC7E,OAAO,aAAa,CAAC,GAAG,EAAe,CACrC,IAAI,EACJ,QAAQ,yFAAA,EAAG,EAAU,UAAW,EAAO,EAAE,KAA9B,UAAU,EAAW,OAAO,GACvC,OAAO,CACR,CAAC;KACH;IAED,gCAAO,GAAP,UAAQ,UAA2B,EAAE,OAAe,EAAE,QAAgB,EAAE,OAAc;QACpF,OAAO,aAAa,CAAC,GAAG,EAA6C,CACnE,IAAI,EACJ,QAAQ,2FAAA,EAAG,EAAU,gBAAgB,KAA1B,UAAU,cACnB,OAAO,SAAA,EAAE,QAAQ,UAAA,IAAK,OAAO,EAChC,CAAC;KACH;IAED,+BAAM,GAAN,UAAO,UAA2B,EAAE,OAAe,EAAE,OAAc;QACjE,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,QAAQ,yFAAA,EAAG,EAAU,UAAW,EAAO,EAAE,KAA9B,UAAU,EAAW,OAAO,GAAI,OAAO,CAAC,CAAC;KACtF;IAED,6BAAI,GAAJ,UAAK,UAA2B,EAAE,OAAe,EAAE,OAAc;QAC/D,OAAO,aAAa,CAAC,GAAG,EAAe,CACrC,IAAI,EACJ,QAAQ,yFAAA,EAAG,EAAU,UAAW,EAAO,EAAE,KAA9B,UAAU,EAAW,OAAO,GACvC,OAAO,CACR,CAAC;KACH;IACH,qBAAC;AAAD,CAxCA,CAA+D,YAAY,GAwC1E;;;ACnDD;IAAyE,4CAAe;IACtF,kCAAY,YAAoB,EAAE,OAA+B;eAC/D,6BAAQ,SAAS,EAAE,YAAY,IAAK,OAAO,EAAG;KAC/C;IAED,sCAAG,GAAH,UAAI,UAA2B,EAAE,OAAiC;QAChE,OAAO,aAAa,CAAC,GAAG,EAA2B,CACjD,IAAI,EACJ,QAAQ,+FAAA,EAAG,EAAU,oBAAoB,KAA9B,UAAU,GACrB,OAAO,CACR,CAAC;KACH;IAED,sCAAG,GAAH,UAAI,UAA2B,EAAE,iBAAyB,EAAE,KAAa,EAAE,OAAc;QACvF,OAAO,aAAa,CAAC,GAAG,EAAyB,CAC/C,IAAI,EACJ,QAAQ,oGAAA,EAAG,EAAU,qBAAsB,EAAiB,EAAE,KAAnD,UAAU,EAAsB,iBAAiB,cAE1D,KAAK,OAAA,IACF,OAAO,EAEb,CAAC;KACH;IAED,yCAAM,GAAN,UAAO,UAA2B,EAAE,iBAAyB,EAAE,OAAc;QAC3E,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJ,QAAQ,oGAAA,EAAG,EAAU,qBAAsB,EAAiB,EAAE,KAAnD,UAAU,EAAsB,iBAAiB,GAC5D,OAAO,CACR,CAAC;KACH;IAED,uCAAI,GAAJ,UAAK,UAA2B,EAAE,iBAAyB,EAAE,OAAc;QACzE,OAAO,aAAa,CAAC,GAAG,EAAyB,CAC/C,IAAI,EACJ,QAAQ,oGAAA,EAAG,EAAU,qBAAsB,EAAiB,EAAE,KAAnD,UAAU,EAAsB,iBAAiB,GAC5D,OAAO,CACR,CAAC;KACH;IACH,+BAAC;AAAD,CAvCA,CAAyE,YAAY,GAuCpF;;;ACvBD;AACA;IAAqE,wCAAe;IAClF,8BAAY,YAAoB,EAAE,OAA+B;eAC/D,6BAAQ,SAAS,EAAE,YAAY,IAAK,OAAO,EAAG;KAC/C;IAED,kCAAG,GAAH,UACE,UAA2B,EAC3B,SAAiB,EACjB,WAA+B,EAC/B,OAA4B;QAE5B,OAAO,aAAa,CAAC,IAAI,EAAqB,CAAC,IAAI,EAAE,QAAQ,2FAAA,EAAG,EAAU,gBAAgB,KAA1B,UAAU,cACxE,IAAI,EAAE,SAAS,EACf,MAAM,EAAE,WAAW,IAChB,OAAO,EACV,CAAC;KACJ;IAED,kCAAG,GAAH,UAAI,EAS4B;QAT5B,mBAAA,EAAA,OAS4B;QAR9B,IAAA,UAAU,gBAAA,EACV,SAAS,eAAA,EACT,OAAO,aAAA,EACJ,OAAO,cAJR,sCAKH,CADW;QAMV,IAAM,MAAM,GACV,UAAU,IAAI,SAAS,IAAI,OAAO;cAC9B,QAAQ,8EAAA,EAAG,EAA8C,GAAG,MAAhD,UAAU,IAAI,SAAS,IAAI,OAAO,KAC9C,EAAE,CAAC;QAET,OAAO,aAAa,CAAC,GAAG,EAAuB,CAAC,IAAI,EAAE,UAAG,MAAM,kBAAe,EAAE,OAAO,CAAC,CAAC;KAC1F;IAED,qCAAM,GAAN,UAAO,UAA2B,EAAE,OAAe,EAAE,OAAc;QACjE,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,QAAQ,gGAAA,EAAG,EAAU,iBAAkB,EAAO,EAAE,KAArC,UAAU,EAAkB,OAAO,GAAI,OAAO,CAAC,CAAC;KAC7F;IACH,2BAAC;AAAD,CAvCA,CAAqE,YAAY,GAuChF;;;ACpBD;IAAoE,uCAAe;IAGjF,6BAAY,YAAoB,EAAE,aAAqB,EAAE,OAA+B;QAAxF,YACE,6BAAQ,SAAS,EAAE,YAAY,IAAK,OAAO,EAAG,SAG/C;QADC,KAAI,CAAC,aAAa,GAAG,aAAa,CAAC;;KACpC;IAED,qCAAO,GAAP,UACE,UAA2B,EAC3B,WAA4B,EAC5B,YAA6B,EAC7B,MAAc,EACd,IAAY,EACZ,OAA4B;QAE5B,OAAO,aAAa,CAAC,IAAI,EAAE,CACzB,IAAI,EACJ,QAAQ,8GAAA,EAAG,EAAU,GAAI,EAAkB,GAAI,EAAW,eAAgB,EAAY,QAAQ,KAAnF,UAAU,EAAI,IAAI,CAAC,aAAa,EAAI,WAAW,EAAgB,YAAY,cACpF,KAAK,EAAE,EAAE,IAAI,MAAA,EAAE,EAAE,MAAM,QAAA,IAAK,OAAO,EACtC,CAAC;KACH;IAED,iCAAG,GAAH,UACE,UAA2B,EAC3B,WAA4B,EAC5B,OAAiC;QAEjC,OAAO,aAAa,CAAC,GAAG,EAAsB,CAC5C,IAAI,EACJ,QAAQ,mGAAA,EAAG,EAAU,GAAI,EAAkB,GAAI,EAAW,cAAc,KAA7D,UAAU,EAAI,IAAI,CAAC,aAAa,EAAI,WAAW,GAC1D,OAAO,CACR,CAAC;KACH;IAED,oCAAM,GAAN,UACE,UAA2B,EAC3B,WAA4B,EAC5B,IAAY,EACZ,EAAyF;QAAzF,mBAAA,EAAA,OAAyF;QAAvF,IAAA,QAAQ,cAAA,EAAK,OAAO,cAAtB,YAAwB,CAAF;QAEtB,IAAM,IAAI,gBAAQ,OAAO,CAAE,CAAC;QAE5B,IAAI,QAAQ,EAAE;YACZ,IAAM,CAAC,GAAG,cAAc,CAAC,QAAQ,CAAC,CAAC;YAEnC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YAEjB,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAC,EAAM;oBAAN,KAAA,aAAM,EAAL,CAAC,QAAA,EAAE,CAAC,QAAA;gBAC9B,IAAI,CAAC,mBAAY,CAAC,MAAG,CAAC,GAAG,CAAC,CAAC;aAC5B,CAAC,CAAC;SACJ;aAAM;YACL,IAAI,CAAC,KAAK,GAAG,EAAE,IAAI,MAAA,EAAE,CAAC;SACvB;QAED,OAAO,aAAa,CAAC,IAAI,EAAoB,CAC3C,IAAI,EACJ,QAAQ,mGAAA,EAAG,EAAU,GAAI,EAAkB,GAAI,EAAW,cAAc,KAA7D,UAAU,EAAI,IAAI,CAAC,aAAa,EAAI,WAAW,GAC1D,IAAI,CACL,CAAC;KACH;IAED,sCAAQ,GAAR,UACE,UAA2B,EAC3B,WAA4B,EAC5B,YAA6B,EAC7B,MAAc,EACd,EAAiE;QAAjE,mBAAA,EAAA,OAAiE;QAA/D,IAAA,IAAI,UAAA,EAAK,OAAO,cAAlB,QAAoB,CAAF;QAElB,OAAO,aAAa,CAAC,GAAG,EAAoB,CAC1C,IAAI,EACJ,QAAQ,mHAAA,EAAG,EAAU,GAAI,EAAkB,GAAI,EAAW,eAAgB,EAAY,SAAU,EAAM,EAAE,KAA7F,UAAU,EAAI,IAAI,CAAC,aAAa,EAAI,WAAW,EAAgB,YAAY,EAAU,MAAM,cAEpG,KAAK,EAAE,EAAE,IAAI,MAAA,EAAE,IACZ,OAAO,EAEb,CAAC;KACH;IAED,wCAAU,GAAV,UACE,UAA2B,EAC3B,WAA4B,EAC5B,YAA6B,EAC7B,MAAc,EACd,OAAc;QAEd,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJ,QAAQ,mHAAA,EAAG,EAAU,GAAI,EAAkB,GAAI,EAAW,eAAgB,EAAY,SAAU,EAAM,EAAE,KAA7F,UAAU,EAAI,IAAI,CAAC,aAAa,EAAI,WAAW,EAAgB,YAAY,EAAU,MAAM,GACtG,OAAO,CACR,CAAC;KACH;IAED,kCAAI,GAAJ,UACE,UAA2B,EAC3B,WAA4B,EAC5B,YAA6B,EAC7B,OAAc;QAEd,OAAO,aAAa,CAAC,GAAG,EAAoB,CAC1C,IAAI,EACJ,QAAQ,wGAAA,EAAG,EAAU,GAAI,EAAkB,GAAI,EAAW,eAAgB,EAAY,EAAE,KAA7E,UAAU,EAAI,IAAI,CAAC,aAAa,EAAI,WAAW,EAAgB,YAAY,GACtF,OAAO,CACR,CAAC;KACH;IACH,0BAAC;AAAD,CA3GA,CAAoE,YAAY,GA2G/E;;;AC5HD;IAAoE,uCAAe;IACjF,6BAAY,YAAoB,EAAE,OAA+B;eAC/D,6BAAQ,SAAS,EAAE,YAAY,IAAK,OAAO,EAAG;KAC/C;IAED,iCAAG,GAAH,UAAI,UAA2B,EAAE,OAAiC;QAChE,OAAO,aAAa,CAAC,GAAG,EAAsB,CAAC,IAAI,EAAE,QAAQ,oFAAA,EAAG,EAAU,SAAS,KAAnB,UAAU,GAAW,OAAO,CAAC,CAAC;KAC/F;IAED,oCAAM,GAAN,UAAO,UAA2B,EAAE,IAAY,EAAE,OAAc;QAC9D,OAAO,aAAa,CAAC,IAAI,EAAoB,CAAC,IAAI,EAAE,QAAQ,oFAAA,EAAG,EAAU,SAAS,KAAnB,UAAU,cACvE,IAAI,MAAA,IACD,OAAO,EACV,CAAC;KACJ;IAED,wCAAU,GAAV,UACE,UAA2B,EAC3B,OAAe,EACf,OAAwB,EACxB,OAAc;QAEd,OAAO,aAAa,CAAC,IAAI,EAAwB,CAC/C,IAAI,EACJ,QAAQ,+FAAA,EAAG,EAAU,UAAW,EAAO,QAAQ,KAApC,UAAU,EAAW,OAAO,cAErC,OAAO,SAAA,IACJ,OAAO,EAEb,CAAC;KACH;IAED,kCAAI,GAAJ,UAAK,UAA2B,EAAE,OAAe,EAAE,OAA4B;QAC7E,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,QAAQ,yFAAA,EAAG,EAAU,UAAW,EAAO,EAAE,KAA9B,UAAU,EAAW,OAAO,GAAI,OAAO,CAAC,CAAC;KACtF;IAED,sCAAQ,GAAR,UACE,UAA2B,EAC3B,OAAe,EACf,MAAc,EACd,QAAgB,EAChB,OAAc;QAEd,OAAO,aAAa,CAAC,GAAG,EAAwB,CAC9C,IAAI,EACJ,QAAQ,oGAAA,EAAG,EAAU,UAAW,EAAO,SAAU,EAAM,EAAE,KAA9C,UAAU,EAAW,OAAO,EAAU,MAAM,cAErD,QAAQ,UAAA,IACL,OAAO,EAEb,CAAC;KACH;IAED,mCAAK,GAAL,UAAM,UAA2B,EAAE,OAAe,EAAE,OAAc;QAChE,OAAO,aAAa,CAAC,GAAG,EAA0B,CAChD,IAAI,EACJ,QAAQ,+FAAA,EAAG,EAAU,UAAW,EAAO,QAAQ,KAApC,UAAU,EAAW,OAAO,GACvC,OAAO,CACR,CAAC;KACH;IAED,oCAAM,GAAN,UAAO,UAA2B,EAAE,OAAe,EAAE,OAAc;QACjE,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,QAAQ,yFAAA,EAAG,EAAU,UAAW,EAAO,EAAE,KAA9B,UAAU,EAAW,OAAO,GAAI,OAAO,CAAC,CAAC;KACtF;IAED,wCAAU,GAAV,UAAW,UAA2B,EAAE,OAAe,EAAE,MAAc,EAAE,OAAc;QACrF,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJ,QAAQ,oGAAA,EAAG,EAAU,UAAW,EAAO,SAAU,EAAM,EAAE,KAA9C,UAAU,EAAW,OAAO,EAAU,MAAM,GACvD,OAAO,CACR,CAAC;KACH;IAED,kCAAI,GAAJ,UAAK,UAA2B,EAAE,OAAe,EAAE,OAAc;QAC/D,OAAO,aAAa,CAAC,GAAG,EAAoB,CAC1C,IAAI,EACJ,QAAQ,yFAAA,EAAG,EAAU,UAAW,EAAO,EAAE,KAA9B,UAAU,EAAW,OAAO,GACvC,OAAO,CACR,CAAC;KACH;IAED,sCAAQ,GAAR,UAAS,UAA2B,EAAE,OAAe,EAAE,MAAc,EAAE,OAAc;QACnF,OAAO,aAAa,CAAC,GAAG,EAAwB,CAC9C,IAAI,EACJ,QAAQ,sGAAA,EAAG,EAAU,UAAW,EAAO,SAAU,EAAM,EAAE,KAA9C,UAAU,EAAW,OAAO,EAAU,MAAM,GACvD,OAAO,CACR,CAAC;KACH;IACH,0BAAC;AAAD,CAxFA,CAAoE,YAAY,GAwF/E;;;AC1FD;IAA+D,kCAAe;IAC5E,wBAAY,YAAoB,EAAE,OAA+B;eAC/D,6BAAQ,SAAS,EAAE,YAAY,IAAK,OAAO,EAAG;KAC/C;IAED,4BAAG,GAAH,UAAI,UAA2B,EAAE,OAAiC;QAChE,OAAO,aAAa,CAAC,GAAG,EAAiB,CAAC,IAAI,EAAE,QAAQ,oFAAA,EAAG,EAAU,SAAS,KAAnB,UAAU,GAAW,OAAO,CAAC,CAAC;KAC1F;IAED,+BAAM,GAAN,UACE,UAA2B,EAC3B,SAAiB,EACjB,KAAa,EACb,OAA4B;QAE5B,OAAO,aAAa,CAAC,IAAI,EAAe,CAAC,IAAI,EAAE,QAAQ,oFAAA,EAAG,EAAU,SAAS,KAAnB,UAAU,cAClE,IAAI,EAAE,SAAS,EACf,KAAK,OAAA,IACF,OAAO,EACV,CAAC;KACJ;IAED,6BAAI,GAAJ,UAAK,UAA2B,EAAE,OAAwB,EAAE,OAA4B;QACtF,OAAO,aAAa,CAAC,GAAG,EAAe,CACrC,IAAI,EACJ,QAAQ,yFAAA,EAAG,EAAU,UAAW,EAAO,EAAE,KAA9B,UAAU,EAAW,OAAO,GACvC,OAAO,CACR,CAAC;KACH;IAED,+BAAM,GAAN,UAAO,UAA2B,EAAE,OAAwB,EAAE,OAA6B;QACzF,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,QAAQ,yFAAA,EAAG,EAAU,UAAW,EAAO,EAAE,KAA9B,UAAU,EAAW,OAAO,GAAI,OAAO,CAAC,CAAC;KACtF;IAED,kCAAS,GAAT,UAAU,UAA2B,EAAE,OAAwB,EAAE,OAA6B;QAC5F,OAAO,aAAa,CAAC,IAAI,EAAe,CACtC,IAAI,EACJ,QAAQ,mGAAA,EAAG,EAAU,UAAW,EAAO,YAAY,KAAxC,UAAU,EAAW,OAAO,GACvC,OAAO,CACR,CAAC;KACH;IAED,oCAAW,GAAX,UACE,UAA2B,EAC3B,OAAwB,EACxB,OAA6B;QAE7B,OAAO,aAAa,CAAC,IAAI,EAAe,CACtC,IAAI,EACJ,QAAQ,qGAAA,EAAG,EAAU,UAAW,EAAO,cAAc,KAA1C,UAAU,EAAW,OAAO,GACvC,OAAO,CACR,CAAC;KACH;IACH,qBAAC;AAAD,CArDA,CAA+D,YAAY,GAqD1E;;;AC/CD;IAAgE,mCAAe;IAC7E,yBAAY,YAAoB,EAAE,OAA+B;eAC/D,6BAAQ,SAAS,EAAE,YAAY,IAAK,OAAO,EAAG;KAC/C;IAED,6BAAG,GAAH,UACE,UAA2B,EAC3B,MAAc,EACd,WAAwB,EACxB,OAA4B;QAE5B,OAAO,aAAa,CAAC,IAAI,EAAgB,CAAC,IAAI,EAAE,QAAQ,qFAAA,EAAG,EAAU,UAAU,KAApB,UAAU,cACnE,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,EACtB,WAAW,aAAA,IACR,OAAO,EACV,CAAC;KACJ;IAED,6BAAG,GAAH,UACE,UAA2B,EAC3B,EAAiF;QAAjF,mBAAA,EAAA,OAAiF;QAA/E,IAAA,gBAAgB,sBAAA,EAAK,OAAO,cAA9B,oBAAgC,CAAF;QAE9B,IAAM,GAAG,GAAG,kBAAkB,CAAC,UAAU,CAAC,CAAC;QAC3C,IAAM,GAAG,GAAG,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;QAE7B,IAAI,gBAAgB;YAAE,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAEtC,OAAO,aAAa,CAAC,GAAG,EAAkB,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC;KAC1E;IAED,8BAAI,GAAJ,UACE,UAA2B,EAC3B,MAAc,EACd,WAAwB,EACxB,OAA4B;QAE5B,OAAO,aAAa,CAAC,GAAG,EAAgB,CAAC,IAAI,EAAE,QAAQ,0FAAA,EAAG,EAAU,WAAY,EAAM,EAAE,KAA9B,UAAU,EAAY,MAAM,cACpF,WAAW,aAAA,IACR,OAAO,EACV,CAAC;KACJ;IAED,8BAAI,GAAJ,UACE,UAA2B,EAC3B,MAAc,EACd,EAA8D;QAA9D,mBAAA,EAAA,OAA8D;QAA5D,IAAA,gBAAgB,sBAAA,EAAK,OAAO,cAA9B,oBAAgC,CAAF;QAExB,IAAA,KAAA,OAAa,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC,GAAG,CAAC,kBAAkB,CAAC,IAAA,EAAxD,GAAG,QAAA,EAAE,GAAG,QAAgD,CAAC;QAChE,IAAM,GAAG,GAAG,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;QAE7B,IAAI,gBAAgB;YAAE,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAEtC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEd,OAAO,aAAa,CAAC,GAAG,EAAgB,CACtC,IAAI,EACJ,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EACb,OAAkC,CACnC,CAAC;KACH;IAED,gCAAM,GAAN,UAAO,UAA2B,EAAE,MAAc,EAAE,OAAc;QAChE,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,QAAQ,0FAAA,EAAG,EAAU,WAAY,EAAM,EAAE,KAA9B,UAAU,EAAY,MAAM,GAAI,OAAO,CAAC,CAAC;KACtF;IACH,sBAAC;AAAD,CAhEA,CAAgE,YAAY,GAgE3E;;;ACrED;IAAmE,sCAAe;IAChF,4BAAY,YAAoB,EAAE,OAA+B;eAC/D,6BAAQ,SAAS,EAAE,YAAY,IAAK,OAAO,EAAG;KAC/C;IAED,gCAAG,GAAH,UAAI,UAA2B,EAAE,OAAiC;QAChE,OAAO,aAAa,CAAC,GAAG,EAAqB,CAC3C,IAAI,EACJ,QAAQ,wFAAA,EAAG,EAAU,aAAa,KAAvB,UAAU,GACrB,OAAO,CACR,CAAC;KACH;IAED,mCAAM,GAAN,UAAO,UAA2B,EAAE,KAAa,EAAE,OAA4B;QAC7E,OAAO,aAAa,CAAC,IAAI,EAAmB,CAAC,IAAI,EAAE,QAAQ,wFAAA,EAAG,EAAU,aAAa,KAAvB,UAAU,cACtE,KAAK,OAAA,IACF,OAAO,EACV,CAAC;KACJ;IAED,iCAAI,GAAJ,UAAK,UAA2B,EAAE,WAAmB,EAAE,OAA4B;QACjF,OAAO,aAAa,CAAC,GAAG,EAAmB,CACzC,IAAI,EACJ,QAAQ,6FAAA,EAAG,EAAU,cAAe,EAAW,EAAE,KAAtC,UAAU,EAAe,WAAW,GAC/C,OAAO,CACR,CAAC;KACH;IAED,mCAAM,GAAN,UAAO,UAA2B,EAAE,WAAmB,EAAE,OAAc;QACrE,OAAO,aAAa,CAAC,GAAG,EAAiB,CACvC,IAAI,EACJ,QAAQ,oGAAA,EAAG,EAAU,cAAe,EAAW,SAAS,KAA7C,UAAU,EAAe,WAAW,GAC/C,OAAO,CACR,CAAC;KACH;IAED,0CAAa,GAAb,UAAc,UAA2B,EAAE,WAAmB,EAAE,OAAc;QAC5E,OAAO,aAAa,CAAC,GAAG,EAAwB,CAC9C,IAAI,EACJ,QAAQ,4GAAA,EAAG,EAAU,cAAe,EAAW,iBAAiB,KAArD,UAAU,EAAe,WAAW,GAC/C,OAAO,CACR,CAAC;KACH;IAED,iCAAI,GAAJ,UAAK,UAA2B,EAAE,WAAmB,EAAE,OAAc;QACnE,OAAO,aAAa,CAAC,GAAG,EAAmB,CACzC,IAAI,EACJ,QAAQ,6FAAA,EAAG,EAAU,cAAe,EAAW,EAAE,KAAtC,UAAU,EAAe,WAAW,GAC/C,OAAO,CACR,CAAC;KACH;IACH,yBAAC;AAAD,CAnDA,CAAmE,YAAY,GAmD9E;;;AC1DD;IAA8D,iCAAe;IAG3E,uBAAY,YAAoB,EAAE,aAAqB,EAAE,OAA+B;QAAxF,YACE,6BAAQ,SAAS,EAAE,YAAY,IAAK,OAAO,EAAG,SAG/C;QADC,KAAI,CAAC,aAAa,GAAG,aAAa,CAAC;;KACpC;IAED,2BAAG,GAAH,UACE,UAA2B,EAC3B,WAA4B,EAC5B,OAAiC;QAEjC,OAAO,aAAa,CAAC,GAAG,EAAgB,CACtC,IAAI,EACJ,QAAQ,6FAAA,EAAG,EAAU,GAAI,EAAkB,GAAI,EAAW,QAAQ,KAAvD,UAAU,EAAI,IAAI,CAAC,aAAa,EAAI,WAAW,GAC1D,OAAO,CACR,CAAC;KACH;IAED,8BAAM,GAAN,UACE,UAA2B,EAC3B,WAA4B,EAC5B,IAAY,EACZ,OAA4B;QAE5B,OAAO,aAAa,CAAC,IAAI,EAAc,CACrC,IAAI,EACJ,QAAQ,6FAAA,EAAG,EAAU,GAAI,EAAkB,GAAI,EAAW,QAAQ,KAAvD,UAAU,EAAI,IAAI,CAAC,aAAa,EAAI,WAAW,cAExD,IAAI,MAAA,IACD,OAAO,EAEb,CAAC;KACH;IAED,4BAAI,GAAJ,UACE,UAA2B,EAC3B,WAA4B,EAC5B,MAAc,EACd,IAAY,EACZ,OAA4B;QAE5B,OAAO,aAAa,CAAC,GAAG,EAAc,CACpC,IAAI,EACJ,QAAQ,kGAAA,EAAG,EAAU,GAAI,EAAkB,GAAI,EAAW,SAAU,EAAM,EAAE,KAAjE,UAAU,EAAI,IAAI,CAAC,aAAa,EAAI,WAAW,EAAU,MAAM,cAExE,IAAI,MAAA,IACD,OAAO,EAEb,CAAC;KACH;IAED,8BAAM,GAAN,UACE,UAA2B,EAC3B,WAA4B,EAC5B,MAAc,EACd,OAAc;QAEd,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJ,QAAQ,kGAAA,EAAG,EAAU,GAAI,EAAkB,GAAI,EAAW,SAAU,EAAM,EAAE,KAAjE,UAAU,EAAI,IAAI,CAAC,aAAa,EAAI,WAAW,EAAU,MAAM,GAC1E,OAAO,CACR,CAAC;KACH;IAED,4BAAI,GAAJ,UAAK,UAA2B,EAAE,WAA4B,EAAE,MAAc,EAAE,OAAc;QAC5F,OAAO,aAAa,CAAC,GAAG,EAAc,CACpC,IAAI,EACJ,QAAQ,kGAAA,EAAG,EAAU,GAAI,EAAkB,GAAI,EAAW,SAAU,EAAM,EAAE,KAAjE,UAAU,EAAI,IAAI,CAAC,aAAa,EAAI,WAAW,EAAU,MAAM,GAC1E,OAAO,CACR,CAAC;KACH;IACH,oBAAC;AAAD,CA1EA,CAA8D,YAAY,GA0EzE;;;ACrFD;IAAkE,qCAAe;IAC/E,2BAAY,YAAoB,EAAE,OAA+B;eAC/D,6BAAQ,SAAS,EAAE,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAK,OAAO,EAAG;KACxE;IAED,+BAAG,GAAH,UAAI,OAAiC;QACnC,OAAO,aAAa,CAAC,GAAG,EAAoB,CAAC,IAAI,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;KACjE;IAED,gCAAI,GAAJ,UAAK,GAAoB,EAAE,OAAc;QACvC,OAAO,aAAa,CAAC,GAAG,EAAkB,CAAC,IAAI,EAAE,kBAAkB,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC;KACpF;IACH,wBAAC;AAAD,CAZA,CAAkE,YAAY;;ACI9E;IAA0D,qCAAe;IACvE,2BAAY,YAAoB,EAAE,OAA+B;eAC/D,6BAAQ,SAAS,EAAE,YAAY,IAAK,OAAO,EAAG;KAC/C;IAED,+BAAG,GAAH,UAAI,UAA2B,EAAE,OAAiC;QAChE,OAAO,aAAa,CAAC,GAAG,EAAoB,CAAC,IAAI,EAAE,QAAQ,uFAAA,EAAG,EAAU,YAAY,KAAtB,UAAU,GAAc,OAAO,CAAC,CAAC;KAChG;IAED,kCAAM,GAAN,UAAO,UAA2B,EAAE,OAAwB;QAC1D,OAAO,aAAa,CAAC,IAAI,EAAkB,CAAC,IAAI,EAAE,QAAQ,uFAAA,EAAG,EAAU,YAAY,KAAtB,UAAU,GAAc,OAAO,CAAC,CAAC;KAC/F;IAED,gCAAI,GAAJ,UAAK,UAA2B,EAAE,KAAa,EAAE,OAAqC;QACpF,OAAO,aAAa,CAAC,GAAG,EAAkB,CACxC,IAAI,EACJ,QAAQ,4FAAA,EAAG,EAAU,aAAc,EAAK,EAAE,KAA/B,UAAU,EAAc,KAAK,GACxC,OAAO,CACR,CAAC;KACH;IAED,gCAAI,GAAJ,UAAK,UAA2B,EAAE,KAAa,EAAE,OAAiC;QAChF,OAAO,aAAa,CAAC,GAAG,EAAkB,CACxC,IAAI,EACJ,QAAQ,4FAAA,EAAG,EAAU,aAAc,EAAK,EAAE,KAA/B,UAAU,EAAc,KAAK,GACxC,OAAO,CACR,CAAC;KACH;IAED,kCAAM,GAAN,UAAO,UAA2B,EAAE,KAAa,EAAE,OAAc;QAC/D,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,QAAQ,4FAAA,EAAG,EAAU,aAAc,EAAK,EAAE,KAA/B,UAAU,EAAc,KAAK,GAAI,OAAO,CAAC,CAAC;KACvF;IACH,wBAAC;AAAD,CAhCA,CAA0D,YAAY,GAgCrE;;;;ICzBmE,uCAAyB;IAC3F,6BAAY,OAA+B;;eAEzC,kBAAM,QAAQ,EAAE,OAAO,CAAC;KACzB;IACH,0BAAC;AAAD,CALA,CAAoE,sBAAsB;;;IC4B9B,+BAAiB;IAC3E,qBAAY,OAA+B;;eAEzC,kBAAM,QAAQ,EAAE,OAAO,CAAC;KACzB;IACH,kBAAC;AAAD,CALA,CAA4D,cAAc;;;ICnBJ,yCAA2B;IAC/F,+BAAY,OAA+B;;eAEzC,kBAAM,QAAQ,EAAE,OAAO,CAAC;KACzB;IACH,4BAAC;AAAD,CALA,CAAsE,wBAAwB;;;ICiD7B,oCAAsB;IACrF,0BAAY,OAA+B;;eAEzC,kBAAM,QAAQ,EAAE,OAAO,CAAC;KACzB;IACH,uBAAC;AAAD,CALA,CAAiE,mBAAmB;;;ICtCvB,gCAAkB;IAC7E,sBAAY,OAA+B;;eAEzC,kBAAM,QAAQ,EAAE,OAAO,CAAC;KACzB;IACH,mBAAC;AAAD,CALA,CAA6D,eAAe;;;ICUZ,mCAAqB;IACnF,yBAAY,OAA+B;;eAEzC,kBAAM,QAAQ,EAAE,OAAO,CAAC;KACzB;IACH,sBAAC;AAAD,CALA,CAAgE,kBAAkB;;;IC7CrB,gCAAe;IAA5E;;KAIC;IAHC,0BAAG,GAAH,UAAI,OAAwB,EAAE,OAAgD;QAC5E,OAAO,aAAa,CAAC,GAAG,EAAkB,CAAC,IAAI,EAAE,QAAQ,4FAAA,SAAU,EAAO,UAAU,KAAjB,OAAO,GAAY,OAAO,CAAC,CAAC;KAChG;IACH,mBAAC;AAAD,CAJA,CAA6D,YAAY,GAIxE;;;;ICuB8D,kCAAoB;IACjF,wBAAY,OAA+B;;eAEzC,kBAAM,QAAQ,EAAE,OAAO,CAAC;KACzB;IACH,qBAAC;AAAD,CALA,CAA+D,iBAAiB;;;ICapB,+BAAiB;IAC3E,qBAAY,OAA+B;;eAEzC,kBAAM,QAAQ,EAAE,OAAO,CAAC;KACzB;IACH,kBAAC;AAAD,CALA,CAA4D,cAAc;;;ICnBR,qCAAuB;IACvF,2BAAY,OAA+B;;eAEzC,kBAAM,QAAQ,EAAE,OAAO,CAAC;KACzB;IACH,wBAAC;AAAD,CALA,CAAkE,oBAAoB;;;ICuBhC,yBAAe;IAArE;;KA+BC;IA9BC,mBAAG,GAAH,UAAI,OAAwB,EAAE,OAAiC;QAC7D,OAAO,aAAa,CAAC,GAAG,EAAgB,CAAC,IAAI,EAAE,QAAQ,0FAAA,SAAU,EAAO,QAAQ,KAAf,OAAO,GAAU,OAAO,CAAC,CAAC;KAC5F;IAED,sBAAM,GAAN,UAAO,OAAwB,EAAE,KAAa,EAAE,OAA4B;QAC1E,OAAO,aAAa,CAAC,IAAI,EAAc,CAAC,IAAI,EAAE,QAAQ,0FAAA,SAAU,EAAO,QAAQ,KAAf,OAAO,cACrE,KAAK,OAAA,IACF,OAAO,EACV,CAAC;KACJ;IAED,oBAAI,GAAJ,UAAK,OAAwB,EAAE,MAAc,EAAE,OAA4B;QACzE,OAAO,aAAa,CAAC,GAAG,EAAc,CACpC,IAAI,EACJ,QAAQ,+FAAA,SAAU,EAAO,SAAU,EAAM,EAAE,KAAzB,OAAO,EAAU,MAAM,GACzC,OAAO,CACR,CAAC;KACH;IAED,sBAAM,GAAN,UAAO,OAAwB,EAAE,MAAc,EAAE,OAAc;QAC7D,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,QAAQ,+FAAA,SAAU,EAAO,SAAU,EAAM,EAAE,KAAzB,OAAO,EAAU,MAAM,GAAI,OAAO,CAAC,CAAC;KACxF;IAED,oBAAI,GAAJ,UAAK,OAAwB,EAAE,MAAc,EAAE,OAAc;QAC3D,OAAO,aAAa,CAAC,GAAG,EAAc,CACpC,IAAI,EACJ,QAAQ,+FAAA,SAAU,EAAO,SAAU,EAAM,EAAE,KAAzB,OAAO,EAAU,MAAM,GACzC,OAAO,CACR,CAAC;KACH;IACH,YAAC;AAAD,CA/BA,CAAsD,YAAY,GA+BjE;;;;IChE0D,8BAAe;IAA1E;;KAqCC;IApCC,wBAAG,GAAH,UAAI,OAAwB,EAAE,OAAe,EAAE,OAAiC;QAC9E,OAAO,aAAa,CAAC,GAAG,EAAqB,CAC3C,IAAI,EACJ,QAAQ,sGAAA,SAAU,EAAO,SAAU,EAAO,SAAS,KAAjC,OAAO,EAAU,OAAO,GAC1C,OAAO,CACR,CAAC;KACH;IAED,2BAAM,GAAN,UAAO,OAAwB,EAAE,OAAe,EAAE,WAAmB,EAAE,OAAc;QACnF,OAAO,aAAa,CAAC,IAAI,EAAmB,CAC1C,IAAI,EACJ,QAAQ,2GAAA,SAAU,EAAO,SAAU,EAAO,UAAW,EAAW,EAAE,KAAhD,OAAO,EAAU,OAAO,EAAW,WAAW,GAChE,OAAO,CACR,CAAC;KACH;IAED,yBAAI,GAAJ,UACE,OAAwB,EACxB,OAAe,EACf,WAAmB,EACnB,OAA4B;QAE5B,OAAO,aAAa,CAAC,GAAG,EAAmB,CACzC,IAAI,EACJ,QAAQ,2GAAA,SAAU,EAAO,SAAU,EAAO,UAAW,EAAW,EAAE,KAAhD,OAAO,EAAU,OAAO,EAAW,WAAW,GAChE,OAAO,CACR,CAAC;KACH;IAED,2BAAM,GAAN,UAAO,OAAwB,EAAE,OAAe,EAAE,WAAmB,EAAE,OAAc;QACnF,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJ,QAAQ,2GAAA,SAAU,EAAO,SAAU,EAAO,UAAW,EAAW,EAAE,KAAhD,OAAO,EAAU,OAAO,EAAW,WAAW,GAChE,OAAO,CACR,CAAC;KACH;IACH,iBAAC;AAAD,CArCA,CAA2D,YAAY,GAqCtE;;;;ICLyD,6BAAgB;IACxE,mBAAY,OAA+B;;eAEzC,kBAAM,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC;KAClC;IACH,gBAAC;AAAD,CALA,CAA0D,aAAa;;;ICUP,mCAAsB;IACpF,yBAAY,OAA+B;;eAEzC,kBAAM,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC;KAClC;IACH,sBAAC;AAAD,CALA,CAAgE,mBAAmB;;;ICN7B,yBAAe;IAArE;;KA0DC;IAzDC,mBAAG,GAAH,UAAI,OAAiC;QACnC,OAAO,aAAa,CAAC,GAAG,EAAgB,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;KAClE;IAED,0BAAU,GAAV,UAAW,OAAc;QACvB,OAAO,aAAa,CAAC,GAAG,EAAwB,CAAC,IAAI,EAAE,kBAAkB,EAAE,OAAO,CAAC,CAAC;KACrF;IAED,wBAAQ,GAAR,UAAS,MAAc,EAAE,OAAc;QACrC,OAAO,aAAa,CAAC,GAAG,EAA2B,CAAC,IAAI,EAAE,gBAAS,MAAM,cAAW,EAAE,OAAO,CAAC,CAAC;KAChG;IAED,qBAAK,GAAL,UAAM,MAAc,EAAE,OAAc;QAClC,OAAO,aAAa,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,gBAAS,MAAM,WAAQ,EAAE,OAAO,CAAC,CAAC;KACrE;IAED,sBAAM,GAAN,UAAO,OAA4B;QACjC,OAAO,aAAa,CAAC,IAAI,EAAc,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;KACjE;IAED,uBAAO,GAAP,UAAQ,OAAc;QACpB,OAAO,aAAa,CAAC,GAAG,EAAc,CAAC,IAAI,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;KAC/D;IAED,oBAAI,GAAJ,UAAK,MAAc,EAAE,OAA4B;QAC/C,OAAO,aAAa,CAAC,GAAG,EAAc,CAAC,IAAI,EAAE,gBAAS,MAAM,CAAE,EAAE,OAAO,CAAC,CAAC;KAC1E;IAED,sBAAM,GAAN,UAAO,MAAc,EAAE,OAA2C;QAChE,OAAO,aAAa,CAAC,GAAG,EAAiB,CAAC,IAAI,EAAE,gBAAS,MAAM,YAAS,EAAE,OAAO,CAAC,CAAC;KACpF;IAED,sBAAM,GAAN,UAAO,eAAuB,EAAE,OAAc;QAC5C,OAAO,aAAa,CAAC,GAAG,EAAgB,CAAC,IAAI,EAAE,OAAO,aACpD,MAAM,EAAE,eAAe,IACpB,OAAO,EACV,CAAC;KACJ;IAED,oBAAI,GAAJ,UAAK,MAAc,EAAE,OAA4B;QAC/C,OAAO,aAAa,CAAC,GAAG,EAAc,CAAC,IAAI,EAAE,gBAAS,MAAM,CAAE,EAAE,OAAO,CAAC,CAAC;KAC1E;IAED,sBAAM,GAAN,UAAO,MAAc,EAAE,OAAc;QACnC,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,gBAAS,MAAM,CAAE,EAAE,OAAO,CAAC,CAAC;KAC9D;IAED,uBAAO,GAAP,UAAQ,MAAc,EAAE,OAAc;QACpC,OAAO,aAAa,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,gBAAS,MAAM,aAAU,EAAE,OAAO,CAAC,CAAC;KACvE;IAED,wBAAQ,GAAR,UAAS,QAAgB,EAAE,OAAc;QACvC,OAAO,aAAa,CAAC,GAAG,EAAgB,CAAC,IAAI,EAAE,OAAO,aACpD,QAAQ,UAAA,IACL,OAAO,EACV,CAAC;KACJ;IACH,YAAC;AAAD,CA1DA,CAAsD,YAAY;;;ICvBG,wCAA2B;IAC9F,8BAAY,OAA+B;;eAEzC,kBAAM,OAAO,EAAE,OAAO,CAAC;KACxB;IACH,2BAAC;AAAD,CALA,CAAqE,wBAAwB;;ACd7F,IAAMA,KAAG,GAAG,UAAC,MAAe,IAAK,QAAC,MAAM,GAAG,gBAAS,MAAM,YAAS,GAAG,aAAa,IAAC,CAAC;;IAE1B,8BAAe;IAA1E;;KAqBC;IApBC,wBAAG,GAAH,UAAI,EAA0E;QAA1E,mBAAA,EAAA,OAA0E;QAAxE,IAAA,MAAM,YAAA,EAAK,OAAO,cAApB,UAAsB,CAAF;QACtB,OAAO,aAAa,CAAC,GAAG,EAAqB,CAAC,IAAI,EAAEA,KAAG,CAAC,MAAM,CAAC,EAAE,OAAO,CAAC,CAAC;KAC3E;IAED,wBAAG,GAAH,UAAI,KAAa,EAAE,EAAqE;QAArE,mBAAA,EAAA,OAAqE;QAAnE,IAAA,MAAM,YAAA,EAAK,OAAO,cAApB,UAAsB,CAAF;QACrC,OAAO,aAAa,CAAC,IAAI,EAAmB,CAAC,IAAI,EAAEA,KAAG,CAAC,MAAM,CAAC,aAC5D,KAAK,OAAA,IACF,OAAO,EACV,CAAC;KACJ;IAED,yBAAI,GAAJ,UAAK,OAAe,EAAE,OAA4B;QAChD,OAAO,aAAa,CAAC,GAAG,EAAmB,CAAC,IAAI,EAAE,sBAAe,OAAO,CAAE,EAAE,OAAO,CAAC,CAAC;KACtF;IAED,2BAAM,GAAN,UAAO,OAAe,EAAE,EAAuD;QAAvD,mBAAA,EAAA,OAAuD;QAArD,IAAA,MAAM,YAAA,EAAK,OAAO,cAApB,UAAsB,CAAF;QAC1C,IAAM,GAAG,GAAG,kBAAkB,CAAC,OAAO,CAAC,CAAC;QAExC,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,UAAGA,KAAG,CAAC,MAAM,CAAC,cAAI,GAAG,CAAE,EAAE,OAAe,CAAC,CAAC;KAC5E;IACH,iBAAC;AAAD,CArBA,CAA2D,YAAY;;;ICEC,2CAAe;IAAvF;;KAwCC;IAvCC,qCAAG,GAAH,UAAI,MAAc,EAAE,OAAuE;QACzF,OAAO,aAAa,CAAC,GAAG,EAAkC,CACxD,IAAI,EACJ,gBAAS,MAAM,0BAAuB,EACtC,OAAO,CACR,CAAC;KACH;;IAGD,qCAAG,GAAH,UACE,MAAc,EACd,IAAY,EACZ,MAA+B,EAC/B,SAAiB,EACjB,OAAc;QAEd,OAAO,aAAa,CAAC,IAAI,EAAgC,CACvD,IAAI,EACJ,gBAAS,MAAM,0BAAuB,aAEpC,IAAI,MAAA,EACJ,SAAS,WAAA,EACT,MAAM,QAAA,IACH,OAAO,EAEb,CAAC;KACH;IAED,sCAAI,GAAJ,UAAK,MAAc,EAAE,OAAe,EAAE,OAAc;QAClD,OAAO,aAAa,CAAC,GAAG,EAAgC,CACtD,IAAI,EACJ,gBAAS,MAAM,mCAAyB,OAAO,CAAE,EACjD,OAAO,CACR,CAAC;KACH;IAED,wCAAM,GAAN,UAAO,MAAc,EAAE,OAAe,EAAE,OAAc;QACpD,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,gBAAS,MAAM,mCAAyB,OAAO,CAAE,EAAE,OAAO,CAAC,CAAC;KAC9F;IACH,8BAAC;AAAD,CAxCA,CAAwE,YAAY;;ACHpF,IAAMA,KAAG,GAAG,UAAC,MAAe,IAAK,QAAC,MAAM,GAAG,gBAAS,MAAM,UAAO,GAAG,WAAW,IAAC,CAAC;;IAErB,+BAAe;IAA3E;;KA4BC;IA3BC,yBAAG,GAAH,UAAI,EAA0E;QAA1E,mBAAA,EAAA,OAA0E;QAAxE,IAAA,MAAM,YAAA,EAAK,OAAO,cAApB,UAAsB,CAAF;QACtB,OAAO,aAAa,CAAC,GAAG,EAAsB,CAAC,IAAI,EAAEA,KAAG,CAAC,MAAM,CAAC,EAAE,OAAO,CAAC,CAAC;KAC5E;IAED,4BAAM,GAAN,UACE,KAAa,EACb,GAAW,EACX,EAAqE;QAArE,mBAAA,EAAA,OAAqE;QAAnE,IAAA,MAAM,YAAA,EAAK,OAAO,cAApB,UAAsB,CAAF;QAEpB,OAAO,aAAa,CAAC,IAAI,EAAoB,CAAC,IAAI,EAAEA,KAAG,CAAC,MAAM,CAAC,aAC7D,KAAK,OAAA,EACL,GAAG,KAAA,IACA,OAAO,EACV,CAAC;KACJ;IAED,0BAAI,GAAJ,UAAK,KAAa,EAAE,EAAqE;QAArE,mBAAA,EAAA,OAAqE;QAAnE,IAAA,MAAM,YAAA,EAAK,OAAO,cAApB,UAAsB,CAAF;QACtC,IAAM,GAAG,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC;QAEtC,OAAO,aAAa,CAAC,GAAG,EAAoB,CAAC,IAAI,EAAE,UAAGA,KAAG,CAAC,MAAM,CAAC,cAAI,GAAG,CAAE,EAAE,OAAO,CAAC,CAAC;KACtF;IAED,4BAAM,GAAN,UAAO,KAAa,EAAE,EAAuD;QAAvD,mBAAA,EAAA,OAAuD;QAArD,IAAA,MAAM,YAAA,EAAK,OAAO,cAApB,UAAsB,CAAF;QACxC,IAAM,GAAG,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC;QAEtC,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,UAAGA,KAAG,CAAC,MAAM,CAAC,cAAI,GAAG,CAAE,EAAE,OAAe,CAAC,CAAC;KAC5E;IACH,kBAAC;AAAD,CA5BA,CAA4D,YAAY;;ACHxE,IAAMA,KAAG,GAAG,UAAC,MAAe,IAAK,QAAC,MAAM,GAAG,gBAAS,MAAM,cAAW,GAAG,eAAe,IAAC,CAAC;;IAE7B,+BAAe;IAA3E;;KAuBC;IAtBC,yBAAG,GAAH,UAAI,EAA0E;QAA1E,mBAAA,EAAA,OAA0E;QAAxE,IAAA,MAAM,YAAA,EAAK,OAAO,cAApB,UAAsB,CAAF;QACtB,OAAO,aAAa,CAAC,GAAG,EAAsB,CAAC,IAAI,EAAEA,KAAG,CAAC,MAAM,CAAC,EAAE,OAAO,CAAC,CAAC;KAC5E;IAED,yBAAG,GAAH,UAAI,GAAW,EAAE,EAAqE;QAArE,mBAAA,EAAA,OAAqE;QAAnE,IAAA,MAAM,YAAA,EAAK,OAAO,cAApB,UAAsB,CAAF;QACnC,OAAO,aAAa,CAAC,IAAI,EAAoB,CAAC,IAAI,EAAEA,KAAG,CAAC,MAAM,CAAC,aAC7D,GAAG,KAAA,IACA,OAAO,EACV,CAAC;KACJ;IAED,0BAAI,GAAJ,UAAK,KAAa,EAAE,EAAqE;QAArE,mBAAA,EAAA,OAAqE;QAAnE,IAAA,MAAM,YAAA,EAAK,OAAO,cAApB,UAAsB,CAAF;QACtC,IAAM,GAAG,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC;QAEtC,OAAO,aAAa,CAAC,GAAG,EAAoB,CAAC,IAAI,EAAE,UAAGA,KAAG,CAAC,MAAM,CAAC,cAAI,GAAG,CAAE,EAAE,OAAO,CAAC,CAAC;KACtF;IAED,4BAAM,GAAN,UAAO,KAAa,EAAE,EAAuD;QAAvD,mBAAA,EAAA,OAAuD;QAArD,IAAA,MAAM,YAAA,EAAK,OAAO,cAApB,UAAsB,CAAF;QACxC,IAAM,GAAG,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC;QAEtC,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,UAAGA,KAAG,CAAC,MAAM,CAAC,cAAI,GAAG,CAAE,EAAE,OAAe,CAAC,CAAC;KAC5E;IACH,kBAAC;AAAD,CAvBA,CAA4D,YAAY;;;ICAf,4BAAe;IAAxE;;KAsCC;IArCC,sBAAG,GAAH,UAAI,SAA0B,EAAE,OAAiC;QAC/D,OAAO,aAAa,CAAC,GAAG,EAAkB,CACxC,IAAI,EACJ,QAAQ,0GAAA,WAAY,EAAS,sBAAsB,KAA/B,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,yBAAM,GAAN,UAAO,SAA0B,EAAE,UAAkB,EAAE,GAAW,EAAE,OAAc;;QAChF,IAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,YAAY,GAAG,QAAQ,CAAC;QAEpE,OAAO,aAAa,CAAC,IAAI,EAAgB,CACvC,IAAI,EACJ,QAAQ,0GAAA,WAAY,EAAS,sBAAsB,KAA/B,SAAS,yBAE1B,SAAS,IAAG,UAAU,EACvB,MAAG,MAAA,OACA,OAAO,EAEb,CAAC;KACH;IAED,yBAAM,GAAN,UAAO,SAA0B,EAAE,UAAkB,EAAE,OAAc;QACnE,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJ,QAAQ,+GAAA,WAAY,EAAS,uBAAwB,EAAU,EAAE,KAA7C,SAAS,EAAwB,UAAU,GAC/D,OAAO,CACR,CAAC;KACH;IAED,uBAAI,GAAJ,UAAK,SAA0B,EAAE,UAAkB,EAAE,OAAc;QACjE,OAAO,aAAa,CAAC,GAAG,EAAgB,CACtC,IAAI,EACJ,QAAQ,+GAAA,WAAY,EAAS,uBAAwB,EAAU,EAAE,KAA7C,SAAS,EAAwB,UAAU,GAC/D,OAAO,CACR,CAAC;KACH;IACH,eAAC;AAAD,CAtCA,CAAyD,YAAY,GAsCpE;;;;ICqFuD,2BAAe;IAAvE;;KA8HC;IA7HC,qBAAG,GAAH,UAAI,SAA0B,EAAE,OAAiC;QAC/D,OAAO,aAAa,CAAC,GAAG,EAAkB,CACxC,IAAI,EACJ,QAAQ,yGAAA,WAAY,EAAS,qBAAqB,KAA9B,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,4BAAU,GAAV,UAAW,SAA0B,EAAE,GAAW,EAAE,MAAc,EAAE,OAAc;QAChF,OAAO,aAAa,CAAC,IAAI,EAAgB,CACvC,IAAI,EACJ,QAAQ,0HAAA,WAAY,EAAS,sBAAuB,EAAG,cAAc,KAAjD,SAAS,EAAuB,GAAG,cAErD,MAAM,QAAA,IACH,OAAO,EAEb,CAAC;KACH;IAED,0BAAQ,GAAR,UAAS,SAA0B,EAAE,GAAW,EAAE,OAAc;QAC9D,OAAO,aAAa,CAAC,GAAG,EAAmB,CACzC,IAAI,EACJ,QAAQ,uHAAA,WAAY,EAAS,sBAAuB,EAAG,WAAW,KAA9C,SAAS,EAAuB,GAAG,GACvD,OAAO,CACR,CAAC;KACH;IAED,wBAAM,GAAN,UACE,SAA0B,EAC1B,MAAc,EACd,OAAe,EACf,OAA4B,EAC5B,OAAgC;QADhC,wBAAA,EAAA,YAA4B;QAC5B,wBAAA,EAAA,YAAgC;QAEhC,OAAO,aAAa,CAAC,IAAI,EAAwB,CAC/C,IAAI,EACJ,QAAQ,yGAAA,WAAY,EAAS,qBAAqB,KAA9B,SAAS,cAE3B,MAAM,QAAA,EACN,aAAa,EAAE,OAAO,EACtB,OAAO,SAAA,IACJ,OAAO,EAEb,CAAC;KACH;IAED,+BAAa,GAAb,UACE,SAA0B,EAC1B,GAAW,EACX,IAAY,EACZ,OAA4B;QAE5B,OAAO,aAAa,CAAC,IAAI,EAAiB,CACxC,IAAI,EACJ,QAAQ,uHAAA,WAAY,EAAS,sBAAuB,EAAG,WAAW,KAA9C,SAAS,EAAuB,GAAG,cAErD,IAAI,MAAA,IACD,OAAO,EAEb,CAAC;KACH;IAED,sBAAI,GAAJ,UAAK,SAA0B,EAAE,GAAW,EAAE,OAAc;QAC1D,OAAO,aAAa,CAAC,GAAG,EAAsB,CAC5C,IAAI,EACJ,QAAQ,mHAAA,WAAY,EAAS,sBAAuB,EAAG,OAAO,KAA1C,SAAS,EAAuB,GAAG,GACvD,OAAO,CACR,CAAC;KACH;IAED,4BAAU,GAAV,UAAW,SAA0B,EAAE,GAAW,EAAE,OAA4B;QAC9E,OAAO,aAAa,CAAC,IAAI,EAAsB,CAC7C,IAAI,EACJ,QAAQ,oGAAA,WAAY,EAAS,YAAa,EAAG,EAAE,KAA3B,SAAS,EAAa,GAAG,GAC7C,OAAO,CACR,CAAC;KACH;IAED,4BAAU,GAAV,UAAW,SAA0B,EAAE,GAAW,EAAE,OAAc;QAChE,OAAO,aAAa,CAAC,GAAG,EAA2B,CACjD,IAAI,EACJ,QAAQ,mHAAA,WAAY,EAAS,sBAAuB,EAAG,OAAO,KAA1C,SAAS,EAAuB,GAAG,GACvD,OAAO,CACR,CAAC;KACH;IAED,wBAAM,GAAN,UAAO,SAA0B,EAAE,GAAW,EAAE,OAAc;QAC5D,OAAO,aAAa,CAAC,IAAI,EAAgB,CACvC,IAAI,EACJ,QAAQ,qHAAA,WAAY,EAAS,sBAAuB,EAAG,SAAS,KAA5C,SAAS,EAAuB,GAAG,GACvD,OAAO,CACR,CAAC;KACH;IAED,sBAAI,GAAJ,UAAK,SAA0B,EAAE,GAAW,EAAE,OAA4B;QACxE,OAAO,aAAa,CAAC,GAAG,EAAwB,CAC9C,IAAI,EACJ,QAAQ,gHAAA,WAAY,EAAS,sBAAuB,EAAG,EAAE,KAArC,SAAS,EAAuB,GAAG,GACvD,OAAO,CACR,CAAC;KACH;IAED,0BAAQ,GAAR,UAAS,SAA0B,EAAE,GAAW,EAAE,OAA4B;QAC5E,OAAO,aAAa,CAAC,GAAG,EAAwB,CAC9C,IAAI,EACJ,QAAQ,yHAAA,WAAY,EAAS,sBAAuB,EAAG,WAAW,KAA9C,SAAS,EAAuB,GAAG,GACvD,OAAO,CACR,CAAC;KACH;IAED,+BAAa,GAAb,UAAc,SAA0B,EAAE,GAAW,EAAE,OAA4B;QACjF,OAAO,aAAa,CAAC,GAAG,EAAwB,CAC9C,IAAI,EACJ,QAAQ,+HAAA,WAAY,EAAS,sBAAuB,EAAG,iBAAiB,KAApD,SAAS,EAAuB,GAAG,GACvD,OAAO,CACR,CAAC;KACH;IAED,2BAAS,GAAT,UAAU,SAA0B,EAAE,GAAW,EAAE,OAA4B;QAC7E,OAAO,aAAa,CAAC,GAAG,EAAyB,CAC/C,IAAI,EACJ,QAAQ,0HAAA,WAAY,EAAS,sBAAuB,EAAG,YAAY,KAA/C,SAAS,EAAuB,GAAG,GACvD,OAAO,CACR,CAAC;KACH;IACH,cAAC;AAAD,CA9HA,CAAwD,YAAY,GA8HnE;;;;IChNiE,qCAAsB;IACtF,2BAAY,OAA+B;;eAEzC,kBAAM,UAAU,EAAE,oBAAoB,EAAE,OAAO,CAAC;KACjD;IACH,wBAAC;AAAD,CALA,CAAkE,mBAAmB;;;IC/BnB,qCAAe;IAAjF;;KAwEC;IAvEC,+CAAmB,GAAnB,UAAoB,SAA0B,EAAE,OAAiC;QAC/E,OAAO,aAAa,CAAC,GAAG,EAA2D,CACjF,IAAI,EACJ,QAAQ,4GAAA,WAAY,EAAS,wBAAwB,KAAjC,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,6CAAiB,GAAjB,UAAkB,SAA0B,EAAE,OAAiC;QAC7E,OAAO,aAAa,CAAC,GAAG,EAA2D,CACjF,IAAI,EACJ,QAAQ,0GAAA,SAAU,EAAS,wBAAwB,KAAjC,SAAS,GAC3B,OAAO,CACR,CAAC;KACH;IAED,0CAAc,GAAd,UAAe,SAA0B,EAAE,YAAoB,EAAE,OAAc;QAC7E,OAAO,aAAa,CAAC,GAAG,EAA4B,CAClD,IAAI,EACJ,QAAQ,iHAAA,WAAY,EAAS,yBAA0B,EAAY,EAAE,KAAjD,SAAS,EAA0B,YAAY,GACnE,OAAO,CACR,CAAC;KACH;IAED,gCAAI,GAAJ,UAAK,SAA0B,EAAE,YAAoB,EAAE,OAAiC;QACtF,OAAO,aAAa,CAAC,GAAG,EAAqE,CAC3F,IAAI,EACJ,QAAQ,sHAAA,WAAY,EAAS,yBAA0B,EAAY,OAAO,KAAtD,SAAS,EAA0B,YAAY,GACnE,OAAO,CACR,CAAC;KACH;IAED,4CAAgB,GAAhB,UAAiB,SAA0B,EAAE,YAAoB,EAAE,OAAc;QAC/E,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJ,QAAQ,iHAAA,WAAY,EAAS,yBAA0B,EAAY,EAAE,KAAjD,SAAS,EAA0B,YAAY,GACnE,OAAO,CACR,CAAC;KACH;IAED,qCAAS,GAAT,UAAU,SAA0B,EAAE,YAAoB,EAAE,OAAe,EAAE,OAAc;QACzF,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJ,QAAQ,2HAAA,WAAY,EAAS,yBAA0B,EAAY,QAAS,EAAO,EAAE,KAAjE,SAAS,EAA0B,YAAY,EAAS,OAAO,GACnF,OAAO,CACR,CAAC;KACH;IAED,sCAAU,GAAV,UACE,SAA0B,EAC1B,YAAoB,EACpB,eAAuB,EACvB,OAA4E;QAE5E,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJ,QAAQ,sHAAA,WAAY,EAAS,yBAA0B,EAAY,OAAO,KAAtD,SAAS,EAA0B,YAAY,cAEjE,eAAe,iBAAA,IACZ,OAAO,EAEb,CAAC;KACH;IAED,mCAAO,GAAP,UAAQ,SAA0B,EAAE,YAAoB,EAAE,OAAe,EAAE,OAAc;QACvF,OAAO,aAAa,CAAC,GAAG,EAA+B,CACrD,IAAI,EACJ,QAAQ,2HAAA,WAAY,EAAS,yBAA0B,EAAY,QAAS,EAAO,EAAE,KAAjE,SAAS,EAA0B,YAAY,EAAS,OAAO,GACnF,OAAO,CACR,CAAC;KACH;IACH,wBAAC;AAAD,CAxEA,CAAkE,YAAY,GAwE7E;;;;ICzD2D,+BAAe;IAA3E;;KA0DC;IAzDC,yBAAG,GAAH,UAAI,SAA0B,EAAE,OAAiC;QAC/D,OAAO,aAAa,CAAC,GAAG,EAAsB,CAC5C,IAAI,EACJ,QAAQ,kGAAA,WAAY,EAAS,cAAc,KAAvB,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,4BAAM,GAAN,UACE,SAA0B,EAC1B,WAAmB,EACnB,GAAW,EACX,GAAW,EACX,GAAW,EACX,MAAwB,EACxB,OAAc;QAEd,OAAO,aAAa,CAAC,IAAI,EAAoB,CAC3C,IAAI,EACJ,QAAQ,kGAAA,WAAY,EAAS,cAAc,KAAvB,SAAS,cAE3B,WAAW,aAAA,EACX,GAAG,KAAA,EACH,GAAG,KAAA,EACH,GAAG,KAAA,EACH,MAAM,QAAA,IACH,OAAO,EAEb,CAAC;KACH;IAED,0BAAI,GAAJ,UAAK,SAA0B,EAAE,YAAoB,EAAE,MAAwB,EAAE,OAAc;QAC7F,OAAO,aAAa,CAAC,GAAG,EAAoB,CAC1C,IAAI,EACJ,QAAQ,uGAAA,WAAY,EAAS,eAAgB,EAAY,EAAE,KAAvC,SAAS,EAAgB,YAAY,cAEvD,MAAM,QAAA,IACH,OAAO,EAEb,CAAC;KACH;IAED,0BAAI,GAAJ,UAAK,SAA0B,EAAE,YAAoB,EAAE,OAAc;QACnE,OAAO,aAAa,CAAC,GAAG,EAAoB,CAC1C,IAAI,EACJ,QAAQ,uGAAA,WAAY,EAAS,eAAgB,EAAY,EAAE,KAAvC,SAAS,EAAgB,YAAY,GACzD,OAAO,CACR,CAAC;KACH;IAED,mCAAa,GAAb,UAAc,SAA0B,EAAE,YAAoB,EAAE,OAAc;QAC5E,OAAO,aAAa,CAAC,GAAG,EAAwB,CAC9C,IAAI,EACJ,QAAQ,sHAAA,WAAY,EAAS,eAAgB,EAAY,iBAAiB,KAAtD,SAAS,EAAgB,YAAY,GACzD,OAAO,CACR,CAAC;KACH;IACH,kBAAC;AAAD,CA1DA,CAA4D,YAAY,GA0DvE;;;;IClF0D,8BAAe;IAA1E;;KAgDC;IA/CC,wBAAG,GAAH,UAAI,SAA0B,EAAE,OAAc;QAC5C,OAAO,aAAa,CAAC,IAAI,EAAmB,CAC1C,IAAI,EACJ,QAAQ,kGAAA,WAAY,EAAS,cAAc,KAAvB,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,wBAAG,GAAH,UAAI,EAAyF;QAAzF,mBAAA,EAAA,OAAyF;QAAvF,IAAA,SAAS,eAAA,EAAK,OAAO,cAAvB,aAAyB,CAAF;QACzB,IAAI,GAAW,CAAC;QAEhB,IAAI,SAAS,EAAE;YACb,GAAG,GAAG,QAAQ,kGAAA,WAAY,EAAS,cAAc,KAAvB,SAAS,CAAc,CAAC;SACnD;aAAM;YACL,GAAG,GAAG,aAAa,CAAC;SACrB;QAED,OAAO,aAAa,CAAC,GAAG,EAAuC,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;KACrF;IAED,yBAAI,GAAJ,UAAK,SAA0B,EAAE,KAAa,EAAE,OAA4B;QAC1E,OAAO,aAAa,CAAC,GAAG,EAAmB,CACzC,IAAI,EACJ,QAAQ,uGAAA,WAAY,EAAS,eAAgB,EAAK,EAAE,KAAhC,SAAS,EAAgB,KAAK,GAClD,OAAO,CACR,CAAC;KACH;IAED,2BAAM,GAAN,UAAO,SAA0B,EAAE,KAAa,EAAE,OAAc;QAC9D,OAAO,aAAa,CAAC,IAAI,EAAqC,CAC5D,IAAI,EACJ,QAAQ,8GAAA,WAAY,EAAS,eAAgB,EAAK,SAAS,KAAvC,SAAS,EAAgB,KAAK,GAClD,OAAO,CACR,CAAC;KACH;IAED,2BAAM,GAAN,UAAO,SAA0B,EAAE,KAAa,EAAE,OAAc;QAC9D,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,QAAQ,uGAAA,WAAY,EAAS,eAAgB,EAAK,EAAE,KAAhC,SAAS,EAAgB,KAAK,GAAI,OAAO,CAAC,CAAC;KACjG;IAED,yBAAI,GAAJ,UAAK,SAA0B,EAAE,KAAa,EAAE,OAAc;QAC5D,OAAO,aAAa,CAAC,GAAG,EAAmB,CACzC,IAAI,EACJ,QAAQ,uGAAA,WAAY,EAAS,eAAgB,EAAK,EAAE,KAAhC,SAAS,EAAgB,KAAK,GAClD,OAAO,CACR,CAAC;KACH;IACH,iBAAC;AAAD,CAhDA,CAA2D,YAAY,GAgDtE;;;;IC3C4D,gCAAe;IAA5E;;KAgDC;IA/CC,0BAAG,GAAH,UAAI,SAA0B,EAAE,OAAiC;QAC/D,OAAO,aAAa,CAAC,GAAG,EAA+D,CACrF,IAAI,EACJ,QAAQ,mGAAA,WAAY,EAAS,eAAe,KAAxB,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,2BAAI,GAAJ,UAAK,SAA0B,EAAE,aAAqB,EAAE,OAAc;QACpE,OAAO,aAAa,CAAC,GAAG,EAAqB,CAC3C,IAAI,EACJ,QAAQ,wGAAA,WAAY,EAAS,gBAAiB,EAAa,EAAE,KAAzC,SAAS,EAAiB,aAAa,GAC3D,OAAO,CACR,CAAC;KACH;IAED,6BAAM,GAAN,UAAO,SAA0B,EAAE,OAA4B;QAC7D,OAAO,aAAa,CAAC,IAAI,EAA6D,CACpF,IAAI,EACJ,QAAQ,mGAAA,WAAY,EAAS,eAAe,KAAxB,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,2BAAI,GAAJ,UAAK,SAA0B,EAAE,aAAqB,EAAE,OAA4B;QAClF,OAAO,aAAa,CAAC,GAAG,EAA6D,CACnF,IAAI,EACJ,QAAQ,wGAAA,WAAY,EAAS,gBAAiB,EAAa,EAAE,KAAzC,SAAS,EAAiB,aAAa,GAC3D,OAAO,CACR,CAAC;KACH;IAED,6BAAM,GAAN,UAAO,SAA0B,EAAE,aAAqB,EAAE,OAAc;QACtE,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJ,QAAQ,wGAAA,WAAY,EAAS,gBAAiB,EAAa,EAAE,KAAzC,SAAS,EAAiB,aAAa,GAC3D,OAAO,CACR,CAAC;KACH;IAED,2BAAI,GAAJ,UAAK,SAA0B,EAAE,aAAqB,EAAE,OAAc;QACpE,OAAO,aAAa,CAAC,IAAI,EAA6D,CACpF,IAAI,EACJ,QAAQ,6GAAA,WAAY,EAAS,gBAAiB,EAAa,OAAO,KAA9C,SAAS,EAAiB,aAAa,GAC3D,OAAO,CACR,CAAC;KACH;IACH,mBAAC;AAAD,CAhDA,CAA6D,YAAY,GAgDxE;;;;ICnD6D,iCAAe;IAA7E;;KAsDC;IArDC,2BAAG,GAAH,UAAI,SAA0B,EAAE,OAA4B;QAC1D,OAAO,aAAa,CAAC,GAAG,EAAwB,CAC9C,IAAI,EACJ,QAAQ,qGAAA,WAAY,EAAS,iBAAiB,KAA1B,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,4BAAI,GAAJ,UAAK,SAA0B,EAAE,cAAsB,EAAE,OAA4B;QACnF,OAAO,aAAa,CAAC,GAAG,EAAsB,CAC5C,IAAI,EACJ,QAAQ,0GAAA,WAAY,EAAS,kBAAmB,EAAc,EAAE,KAA5C,SAAS,EAAmB,cAAc,GAC9D,OAAO,CACR,CAAC;KACH;IAED,8BAAM,GAAN,UACE,SAA0B,EAC1B,WAAmB,EACnB,SAAiB,EACjB,OAAkF;QAElF,OAAO,aAAa,CAAC,IAAI,EAAsB,CAC7C,IAAI,EACJ,QAAQ,qGAAA,WAAY,EAAS,iBAAiB,KAA1B,SAAS,cAE3B,WAAW,aAAA,EACX,SAAS,WAAA,IACN,OAAO,EAEb,CAAC;KACH;IAED,4BAAI,GAAJ,UACE,SAA0B,EAC1B,cAAsB,EACtB,OACoB;QAEpB,OAAO,aAAa,CAAC,GAAG,EAAsB,CAC5C,IAAI,EACJ,QAAQ,0GAAA,WAAY,EAAS,kBAAmB,EAAc,EAAE,KAA5C,SAAS,EAAmB,cAAc,GAC9D,OAAO,CACR,CAAC;KACH;IAED,8BAAM,GAAN,UAAO,SAA0B,EAAE,cAAsB,EAAE,OAA6B;QACtF,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJ,QAAQ,0GAAA,WAAY,EAAS,kBAAmB,EAAc,EAAE,KAA5C,SAAS,EAAmB,cAAc,GAC9D,OAAO,CACR,CAAC;KACH;IACH,oBAAC;AAAD,CAtDA,CAA8D,YAAY,GAsDzE;;;;ICwBsD,0BAAe;IAAtE;;KA2KC;IA1KC,6BAAY,GAAZ,UAAa,SAA0B,EAAE,QAAgB,EAAE,QAAgB,EAAE,OAAc;QACzF,OAAO,aAAa,CAAC,IAAI,EAAmB,CAC1C,IAAI,EACJ,QAAQ,iHAAA,WAAY,EAAS,UAAW,EAAQ,iBAAiB,KAA7C,SAAS,EAAW,QAAQ,cAE9C,QAAQ,UAAA,IACL,OAAO,EAEb,CAAC;KACH;IAED,gCAAe,GAAf,UAAgB,SAA0B,EAAE,QAAgB,EAAE,QAAgB,EAAE,OAAc;QAC5F,OAAO,aAAa,CAAC,IAAI,EAAmB,CAC1C,IAAI,EACJ,QAAQ,gHAAA,WAAY,EAAS,UAAW,EAAQ,gBAAgB,KAA5C,SAAS,EAAW,QAAQ,cAE9C,QAAQ,UAAA,IACL,OAAO,EAEb,CAAC;KACH;IAED,oBAAG,GAAH,UAAI,EAIwF;QAJxF,mBAAA,EAAA,OAIwF;QAH1F,IAAA,SAAS,eAAA,EACT,OAAO,aAAA,EACJ,OAAO,cAHR,wBAIH,CADW;QAEV,IAAI,GAAW,CAAC;QAEhB,IAAI,SAAS,EAAE;YACb,GAAG,GAAG,QAAQ,6FAAA,WAAY,EAAS,SAAS,KAAlB,SAAS,CAAS,CAAC;SAC9C;aAAM,IAAI,OAAO,EAAE;YAClB,GAAG,GAAG,QAAQ,2FAAA,SAAU,EAAO,SAAS,KAAhB,OAAO,CAAS,CAAC;SAC1C;aAAM;YACL,GAAG,GAAG,QAAQ,CAAC;SAChB;QAED,OAAO,aAAa,CAAC,GAAG,EAA+B,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;KAC7E;IAED,uBAAM,GAAN,UAAO,SAA0B,EAAE,OAA4B;QAC7D,OAAO,aAAa,CAAC,IAAI,EAAe,CAAC,IAAI,EAAE,QAAQ,6FAAA,WAAY,EAAS,SAAS,KAAlB,SAAS,GAAW,OAAO,CAAC,CAAC;KACjG;IAED,yBAAQ,GAAR,UAAS,SAA0B,EAAE,QAAgB,EAAE,OAA4B;QACjF,OAAO,aAAa,CAAC,GAAG,EAAwB,CAC9C,IAAI,EACJ,QAAQ,4GAAA,WAAY,EAAS,UAAW,EAAQ,YAAY,KAAxC,SAAS,EAAW,QAAQ,GAChD,OAAO,CACR,CAAC;KACH;IAED,qBAAI,GAAJ,UAAK,SAA0B,EAAE,QAAgB,EAAE,OAA4B;QAC7E,OAAO,aAAa,CAAC,GAAG,EAAe,CACrC,IAAI,EACJ,QAAQ,kGAAA,WAAY,EAAS,UAAW,EAAQ,EAAE,KAA9B,SAAS,EAAW,QAAQ,GAChD,OAAO,CACR,CAAC;KACH;;IAGD,qBAAI,GAAJ,UACE,SAA0B,EAC1B,QAAgB,EAChB,eAAgC,EAChC,cAAsB,EACtB,OAA4B;QAEtB,IAAA,KAAA,OAAyB,CAAC,eAAe,EAAE,cAAc,CAAC,CAAC,GAAG,CAAC,kBAAkB,CAAC,IAAA,EAAjF,SAAS,QAAA,EAAE,SAAS,QAA6D,CAAC;QAEzF,OAAO,aAAa,CAAC,IAAI,EAAmB,CAC1C,IAAI,EACJ,QAAQ,wGAAA,WAAY,EAAS,UAAW,EAAQ,QAAQ,KAApC,SAAS,EAAW,QAAQ,cAE9C,eAAe,EAAE,SAAS,EAC1B,cAAc,EAAE,SAAS,IACtB,OAAO,EAEb,CAAC;KACH;;IAGD,sBAAK,GAAL,UAAM,SAA0B,EAAE,QAAgB;QAChD,OAAO,aAAa,CAAC,GAAG,EAAqB,CAC3C,IAAI,EACJ,QAAQ,wGAAA,WAAY,EAAS,UAAW,EAAQ,QAAQ,KAApC,SAAS,EAAW,QAAQ,EACjD,CAAC;KACH;IAED,6BAAY,GAAZ,UAAa,SAA0B,EAAE,QAAgB,EAAE,OAAc;QACvE,OAAO,aAAa,CAAC,GAAG,EAAoC,CAC1D,IAAI,EACJ,QAAQ,iHAAA,WAAY,EAAS,UAAW,EAAQ,eAAe,KAA3C,SAAS,EAAW,QAAQ,GAChD,OAAO,CACR,CAAC;KACH;IAED,qCAAoB,GAApB,UAAqB,SAA0B,EAAE,QAAgB,EAAE,OAA4B;QAC7F,OAAO,aAAa,CAAC,GAAG,EAAwB,CAC9C,IAAI,EACJ,QAAQ,2HAAA,WAAY,EAAS,UAAW,EAAQ,yBAAyB,KAArD,SAAS,EAAW,QAAQ,GAChD,OAAO,CACR,CAAC;KACH;;IAGD,2BAAU,GAAV,UACE,SAA0B,EAC1B,QAAgB,EAChB,WAA4B,EAC5B,OAAqD;QAErD,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJ,QAAQ,+GAAA,WAAY,EAAS,UAAW,EAAQ,SAAU,EAAW,EAAE,KAAnD,SAAS,EAAW,QAAQ,EAAU,WAAW,GACrE,OAAO,CACR,CAAC;KACH;IAED,uBAAM,GAAN,UAAO,SAA0B,EAAE,QAAgB,EAAE,OAA6B;QAChF,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,QAAQ,oGAAA,WAAY,EAAS,UAAW,EAAQ,EAAE,KAA9B,SAAS,EAAW,QAAQ,GAAI,OAAO,CAAC,CAAC;KAC/F;IAED,+BAAc,GAAd,UAAe,SAA0B,EAAE,QAAgB,EAAE,OAA4B;QACvF,OAAO,aAAa,CAAC,IAAI,EAAmB,CAC1C,IAAI,EACJ,QAAQ,qHAAA,WAAY,EAAS,UAAW,EAAQ,mBAAmB,KAA/C,SAAS,EAAW,QAAQ,GAChD,OAAO,CACR,CAAC;KACH;IAED,kCAAiB,GAAjB,UAAkB,SAA0B,EAAE,QAAgB,EAAE,OAAc;QAC5E,OAAO,aAAa,CAAC,IAAI,EAAmB,CAC1C,IAAI,EACJ,QAAQ,wHAAA,WAAY,EAAS,UAAW,EAAQ,sBAAsB,KAAlD,SAAS,EAAW,QAAQ,GAChD,OAAO,CACR,CAAC;KACH;IAED,qBAAI,GAAJ,UAAK,SAA0B,EAAE,QAAgB,EAAE,OAAc;QAC/D,OAAO,aAAa,CAAC,GAAG,EAAe,CACrC,IAAI,EACJ,QAAQ,oGAAA,WAAY,EAAS,UAAW,EAAQ,EAAE,KAA9B,SAAS,EAAW,QAAQ,GAChD,OAAO,CACR,CAAC;KACH;IAED,0BAAS,GAAT,UAAU,SAA0B,EAAE,QAAgB,EAAE,OAAc;QACpE,OAAO,aAAa,CAAC,IAAI,EAAe,CACtC,IAAI,EACJ,QAAQ,8GAAA,WAAY,EAAS,UAAW,EAAQ,YAAY,KAAxC,SAAS,EAAW,QAAQ,GAChD,OAAO,CACR,CAAC;KACH;IAED,0BAAS,GAAT,UAAU,SAA0B,EAAE,QAAgB,EAAE,OAAc;QACpE,OAAO,aAAa,CAAC,GAAG,EAAmB,CACzC,IAAI,EACJ,QAAQ,+GAAA,WAAY,EAAS,UAAW,EAAQ,aAAa,KAAzC,SAAS,EAAW,QAAQ,GAChD,OAAO,CACR,CAAC;KACH;IAED,4BAAW,GAAX,UAAY,SAA0B,EAAE,QAAgB,EAAE,OAAc;QACtE,OAAO,aAAa,CAAC,IAAI,EAAe,CACtC,IAAI,EACJ,QAAQ,gHAAA,WAAY,EAAS,UAAW,EAAQ,cAAc,KAA1C,SAAS,EAAW,QAAQ,GAChD,OAAO,CACR,CAAC;KACH;IACH,aAAC;AAAD,CA3KA,CAAuD,YAAY,GA2KlE;;;;IC/PgE,oCAAe;IAAhF;;KAkBC;IAjBC,8BAAG,GAAH,UAAI,EAImF;QAJnF,mBAAA,EAAA,OAImF;QAHrF,IAAA,SAAS,eAAA,EACT,OAAO,aAAA,EACJ,OAAO,cAHR,wBAIH,CADW;QAEV,IAAI,GAAW,CAAC;QAEhB,IAAI,SAAS,EAAE;YACb,GAAG,GAAG,QAAQ,wGAAA,WAAY,EAAS,oBAAoB,KAA7B,SAAS,CAAoB,CAAC;SACzD;aAAM,IAAI,OAAO,EAAE;YAClB,GAAG,GAAG,QAAQ,sGAAA,SAAU,EAAO,oBAAoB,KAA3B,OAAO,CAAoB,CAAC;SACrD;aAAM;YACL,GAAG,GAAG,mBAAmB,CAAC;SAC3B;QAED,OAAO,aAAa,CAAC,GAAG,EAAoB,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;KAClE;IACH,uBAAC;AAAD,CAlBA,CAAiE,YAAY,GAkB5E;;;;ICyB0D,8BAAgB;IACzE,oBAAY,OAA+B;;eAEzC,kBAAM,UAAU,EAAE,QAAQ,EAAE,OAAO,CAAC;KACrC;IACH,iBAAC;AAAD,CALA,CAA2D,aAAa;;;ICjBH,wCAA0B;IAC7F,8BAAY,OAA+B;;eAEzC,kBAAM,QAAQ,EAAE,OAAO,CAAC;KACzB;IACH,2BAAC;AAAD,CALA,CAAqE,uBAAuB;;;ICkB3B,oCAAsB;IACrF,0BAAY,OAA+B;;eAEzC,kBAAM,UAAU,EAAE,QAAQ,EAAE,OAAO,CAAC;KACrC;IACH,uBAAC;AAAD,CALA,CAAiE,mBAAmB;;;ICvBnB,oCAAsB;IACrF,0BAAY,OAA+B;;eAEzC,kBAAM,QAAQ,EAAE,OAAO,CAAC;KACzB;IACH,uBAAC;AAAD,CALA,CAAiE,mBAAmB;;;IC2C/B,wBAAe;IAApE;;KAuIC;IAtIC,kBAAG,GAAH,UAAI,SAA0B,EAAE,OAAiC;QAC/D,OAAO,aAAa,CAAC,GAAG,EAAe,CAAC,IAAI,EAAE,QAAQ,2FAAA,WAAY,EAAS,OAAO,KAAhB,SAAS,GAAS,OAAO,CAAC,CAAC;KAC9F;IAED,qBAAM,GAAN,UAAO,SAA0B,EAAE,KAAa,EAAE,OAAc;QAC9D,OAAO,aAAa,CAAC,IAAI,EAAa,CACpC,IAAI,EACJ,QAAQ,uGAAA,WAAY,EAAS,QAAS,EAAK,SAAS,KAAhC,SAAS,EAAS,KAAK,GAC3C,OAAO,CACR,CAAC;KACH;;IAGD,yCAA0B,GAA1B,UACE,SAA0B,EAC1B,KAAa,EACb,YAAoB,EACpB,EAA8E;QAA9E,mBAAA,EAAA,OAA8E;QAA5E,IAAA,cAAc,EAAd,MAAM,mBAAG,KAAK,KAAA,EAAK,OAAO,cAA5B,UAA8B,CAAF;QAEtB,IAAA,KAAA,OAAa,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,GAAG,CAAC,kBAAkB,CAAC,IAAA,EAAtD,GAAG,QAAA,EAAE,GAAG,QAA8C,CAAC;QAC9D,IAAM,GAAG,GAAG,mBAAY,GAAG,mBAAS,GAAG,wBAAc,YAAY,CAAE,CAAC;QAEpE,IAAI,MAAM,EAAE;YACV,OAAO,aAAa,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;SACjD;QACD,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;KAChD;;IAGD,gDAAiC,GAAjC,UACE,SAA0B,EAC1B,GAAW,EACX,YAAoB,EACpB,OAAe,EACf,EAA8E;QAA9E,mBAAA,EAAA,OAA8E;QAA5E,IAAA,cAAc,EAAd,MAAM,mBAAG,KAAK,KAAA,EAAK,OAAO,cAA5B,UAA8B,CAAF;QAEtB,IAAA,KAAA,OAAmB,CAAC,SAAS,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,kBAAkB,CAAC,IAAA,EAAnE,GAAG,QAAA,EAAE,GAAG,QAAA,EAAE,IAAI,QAAqD,CAAC;QAC3E,IAAM,GAAG,GAAG,mBAAY,GAAG,6BAAmB,GAAG,kBAAQ,YAAY,kBAAQ,IAAI,CAAE,CAAC;QAEpF,IAAI,MAAM,EAAE;YACV,OAAO,aAAa,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;SACjD;QACD,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;KAChD;;IAGD,yCAA0B,GAA1B,UACE,SAA0B,EAC1B,GAAW,EACX,OAAe,EACf,EAA8E;QAA9E,mBAAA,EAAA,OAA8E;QAA5E,IAAA,cAAc,EAAd,MAAM,mBAAG,KAAK,KAAA,EAAK,OAAO,cAA5B,UAA8B,CAAF;QAEtB,IAAA,KAAA,OAAmB,CAAC,SAAS,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,kBAAkB,CAAC,IAAA,EAAnE,GAAG,QAAA,EAAE,GAAG,QAAA,EAAE,IAAI,QAAqD,CAAC;QAC3E,IAAM,GAAG,GAAG,mBAAY,GAAG,6BAAmB,GAAG,2BAAiB,IAAI,CAAE,CAAC;QAEzE,IAAI,MAAM,EAAE;YACV,OAAO,aAAa,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;SACjD;QACD,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;KAChD;IAED,gCAAiB,GAAjB,UAAkB,SAA0B,EAAE,KAAa,EAAE,OAAc;QACzE,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,QAAQ,sGAAA,WAAY,EAAS,QAAS,EAAK,QAAQ,KAA/B,SAAS,EAAS,KAAK,GAAU,OAAO,CAAC,CAAC;KAChG;IAED,oBAAK,GAAL,UAAM,SAA0B,EAAE,KAAa,EAAE,OAAc;QAC7D,OAAO,aAAa,CAAC,IAAI,EAAa,CACpC,IAAI,EACJ,QAAQ,sGAAA,WAAY,EAAS,QAAS,EAAK,QAAQ,KAA/B,SAAS,EAAS,KAAK,GAC3C,OAAO,CACR,CAAC;KACH;;IAGD,6BAAc,GAAd,UAAe,SAA0B,EAAE,KAAa,EAAE,OAAc;QAChE,IAAA,KAAA,OAAa,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,GAAG,CAAC,kBAAkB,CAAC,IAAA,EAAtD,GAAG,QAAA,EAAE,GAAG,QAA8C,CAAC;QAE9D,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,mBAAY,GAAG,mBAAS,GAAG,eAAY,EAAE,OAAO,CAAC,CAAC;KACpF;;IAGD,4BAAa,GAAb,UAAc,SAA0B,EAAE,KAAa,EAAE,OAAc;QAC/D,IAAA,KAAA,OAAa,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,GAAG,CAAC,kBAAkB,CAAC,IAAA,EAAtD,GAAG,QAAA,EAAE,GAAG,QAA8C,CAAC;QAE9D,OAAO,aAAa,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,mBAAY,GAAG,mBAAS,GAAG,oBAAiB,EAAE,OAAO,CAAC,CAAC;KAC1F;IAED,mBAAI,GAAJ,UAAK,SAA0B,EAAE,KAAa,EAAE,OAAc;QAC5D,OAAO,aAAa,CAAC,IAAI,EAAa,CACpC,IAAI,EACJ,QAAQ,qGAAA,WAAY,EAAS,QAAS,EAAK,OAAO,KAA9B,SAAS,EAAS,KAAK,GAC3C,OAAO,CACR,CAAC;KACH;IAED,oBAAK,GAAL,UAAM,SAA0B,EAAE,KAAa,EAAE,OAAc;QAC7D,OAAO,aAAa,CAAC,IAAI,EAAa,CACpC,IAAI,EACJ,QAAQ,sGAAA,WAAY,EAAS,QAAS,EAAK,QAAQ,KAA/B,SAAS,EAAS,KAAK,GAC3C,OAAO,CACR,CAAC;KACH;IAED,mBAAI,GAAJ,UAAK,SAA0B,EAAE,KAAa,EAAE,OAAc;QAC5D,OAAO,aAAa,CAAC,GAAG,EAAa,CACnC,IAAI,EACJ,QAAQ,gGAAA,WAAY,EAAS,QAAS,EAAK,EAAE,KAAzB,SAAS,EAAS,KAAK,GAC3C,OAAO,CACR,CAAC;KACH;IAED,+BAAgB,GAAhB,UACE,SAA0B,EAC1B,UAAkB,EAClB,OAAqC;QAErC,OAAO,aAAa,CAAC,GAAG,EAAe,CACrC,IAAI,EACJ,QAAQ,0GAAA,WAAY,EAAS,aAAc,EAAU,OAAO,KAAxC,SAAS,EAAc,UAAU,GACrD,OAAO,CACR,CAAC;KACH;IAED,kCAAmB,GAAnB,UACE,SAA0B,EAC1B,UAAkB,EAClB,OAAqC;QAErC,OAAO,aAAa,CAAC,GAAG,EAAkB,CACxC,IAAI,EACJ,QAAQ,6GAAA,WAAY,EAAS,aAAc,EAAU,UAAU,KAA3C,SAAS,EAAc,UAAU,GACrD,OAAO,CACR,CAAC;KACH;IACH,WAAC;AAAD,CAvIA,CAAqD,YAAY,GAuIhE;;;;ICxKsD,0BAAiB;IACtE,gBAAY,OAA+B;;eAEzC,kBAAM,UAAU,EAAE,OAAO,CAAC;KAC3B;IACH,aAAC;AAAD,CALA,CAAuD,cAAc;;;IC2IP,iCAAe;IAA7E;;KAkOC;IAjOC,8BAAM,GAAN,UACE,SAA0B,EAC1B,eAAuB,EACvB,OAAwD;QAExD,OAAO,aAAa,CAAC,GAAG,EAAsB,CAC5C,IAAI,EACJ,QAAQ,gHAAA,WAAY,EAAS,kBAAmB,EAAe,QAAQ,KAAnD,SAAS,EAAmB,eAAe,GAC/D,OAAO,CACR,CAAC;KACH;IAED,oCAAY,GAAZ,UACE,SAA0B,EAC1B,eAAuB,EACvB,QAAgB,EAChB,OAAc;QAEd,OAAO,aAAa,CAAC,IAAI,EAAmB,CAC1C,IAAI,EACJ,QAAQ,yHAAA,WAAY,EAAS,kBAAmB,EAAe,iBAAiB,KAA5D,SAAS,EAAmB,eAAe,cAE7D,QAAQ,UAAA,IACL,OAAO,EAEb,CAAC;KACH;IAED,uCAAe,GAAf,UACE,SAA0B,EAC1B,eAAuB,EACvB,QAAgB,EAChB,OAAc;QAEd,OAAO,aAAa,CAAC,IAAI,EAAmB,CAC1C,IAAI,EACJ,QAAQ,wHAAA,WAAY,EAAS,kBAAmB,EAAe,gBAAgB,KAA3D,SAAS,EAAmB,eAAe,cAE7D,QAAQ,UAAA,IACL,OAAO,EAEb,CAAC;KACH;IAED,2BAAG,GAAH,UAAI,EAK0B;QAL1B,mBAAA,EAAA,OAK0B;QAJ5B,IAAA,SAAS,eAAA,EACT,OAAO,aAAA,EACJ,OAAO,cAHR,wBAIH,CADW;QAGV,IAAI,GAAW,CAAC;QAEhB,IAAI,SAAS,EAAE;YACb,GAAG,GAAG,QAAQ,qGAAA,WAAY,EAAS,iBAAiB,KAA1B,SAAS,CAAiB,CAAC;SACtD;aAAM,IAAI,OAAO,EAAE;YAClB,GAAG,GAAG,QAAQ,mGAAA,SAAU,EAAO,iBAAiB,KAAxB,OAAO,CAAiB,CAAC;SAClD;aAAM;YACL,GAAG,GAAG,gBAAgB,CAAC;SACxB;QAED,OAAO,aAAa,CAAC,GAAG,EAAwB,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;KACtE;IAED,8CAAsB,GAAtB,UAAuB,SAA0B,EAAE,eAAuB,EAAE,OAAc;QACxF,OAAO,aAAa,CAAC,GAAG,EAAsB,CAC5C,IAAI,EACJ,QAAQ,8IAAA,WAAY,EAAS,kBAAmB,EAAe,sCAAsC,KAAjF,SAAS,EAAmB,eAAe,GAC/D,OAAO,CACR,CAAC;KACH;IAED,+BAAO,GAAP,UAAQ,SAA0B,EAAE,eAAuB,EAAE,OAAc;QACzE,OAAO,aAAa,CAAC,GAAG,EAAsB,CAC5C,IAAI,EACJ,QAAQ,kHAAA,WAAY,EAAS,kBAAmB,EAAe,UAAU,KAArD,SAAS,EAAmB,eAAe,GAC/D,OAAO,CACR,CAAC;KACH;IAED,oCAAY,GAAZ,UAAa,SAA0B,EAAE,eAAuB,EAAE,OAAc;QAC9E,OAAO,aAAa,CAAC,GAAG,EAAiB,CACvC,IAAI,EACJ,QAAQ,wHAAA,WAAY,EAAS,kBAAmB,EAAe,gBAAgB,KAA3D,SAAS,EAAmB,eAAe,GAC/D,OAAO,CACR,CAAC;KACH;IAED,+BAAO,GAAP,UAAQ,SAA0B,EAAE,eAAuB,EAAE,OAAc;QACzE,OAAO,aAAa,CAAC,GAAG,EAAkB,CACxC,IAAI,EACJ,QAAQ,kHAAA,WAAY,EAAS,kBAAmB,EAAe,UAAU,KAArD,SAAS,EAAmB,eAAe,GAC/D,OAAO,CACR,CAAC;KACH;IAED,8BAAM,GAAN,UACE,SAA0B,EAC1B,YAAoB,EACpB,YAAoB,EACpB,KAAa,EACb,OAAwD;QAExD,OAAO,aAAa,CAAC,IAAI,EAAsB,CAC7C,IAAI,EACJ,QAAQ,uGAAA,WAAY,EAAS,iBAAiB,KAA1B,SAAS,cAE3B,YAAY,cAAA,EACZ,YAAY,cAAA,EACZ,KAAK,OAAA,IACF,OAAO,EAEb,CAAC;KACH;IAED,4BAAI,GAAJ,UACE,SAA0B,EAC1B,eAAuB,EACvB,OAAwD;QAExD,OAAO,aAAa,CAAC,GAAG,EAAsB,CAC5C,IAAI,EACJ,QAAQ,4GAAA,WAAY,EAAS,kBAAmB,EAAe,EAAE,KAA7C,SAAS,EAAmB,eAAe,GAC/D,OAAO,CACR,CAAC;KACH;IAED,oCAAY,GAAZ,UAAa,SAA0B,EAAE,eAAuB,EAAE,OAAc;QAC9E,OAAO,aAAa,CAAC,GAAG,EAAoC,CAC1D,IAAI,EACJ,QAAQ,yHAAA,WAAY,EAAS,kBAAmB,EAAe,eAAe,KAA1D,SAAS,EAAmB,eAAe,GAC/D,OAAO,CACR,CAAC;KACH;IAED,iCAAS,GAAT,UAAU,SAA0B,EAAE,eAAuB,EAAE,OAAc;QAC3E,OAAO,aAAa,CAAC,GAAG,EAA2D,CACjF,IAAI,EACJ,QAAQ,sHAAA,WAAY,EAAS,kBAAmB,EAAe,YAAY,KAAvD,SAAS,EAAmB,eAAe,GAC/D,OAAO,CACR,CAAC;KACH;IAED,8BAAM,GAAN,UAAO,SAA0B,EAAE,eAAuB,EAAE,OAAc;QACxE,OAAO,aAAa,CAAC,GAAG,EAAgB,CACtC,IAAI,EACJ,QAAQ,mHAAA,WAAY,EAAS,kBAAmB,EAAe,SAAS,KAApD,SAAS,EAAmB,eAAe,GAC/D,OAAO,CACR,CAAC;KACH;IAED,8BAAM,GAAN,UAAO,SAA0B,EAAE,eAAuB,EAAE,OAAc;QACxE,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJ,QAAQ,4GAAA,WAAY,EAAS,kBAAmB,EAAe,EAAE,KAA7C,SAAS,EAAmB,eAAe,GAC/D,OAAO,CACR,CAAC;KACH;IAED,sCAAc,GAAd,UAAe,SAA0B,EAAE,eAAuB,EAAE,OAAc;QAChF,OAAO,aAAa,CAAC,IAAI,EAAmB,CAC1C,IAAI,EACJ,QAAQ,6HAAA,WAAY,EAAS,kBAAmB,EAAe,mBAAmB,KAA9D,SAAS,EAAmB,eAAe,GAC/D,OAAO,CACR,CAAC;KACH;IAED,yCAAiB,GAAjB,UAAkB,SAA0B,EAAE,eAAuB,EAAE,OAAc;QACnF,OAAO,aAAa,CAAC,IAAI,EAAmB,CAC1C,IAAI,EACJ,QAAQ,4HAAA,WAAY,EAAS,kBAAmB,EAAe,sBAAsB,KAAjE,SAAS,EAAmB,eAAe,GAC/D,OAAO,CACR,CAAC;KACH;IAED,4BAAI,GAAJ,UACE,SAA0B,EAC1B,eAAuB,EACvB,OAAsD;QAEtD,OAAO,aAAa,CAAC,GAAG,EAAsB,CAC5C,IAAI,EACJ,QAAQ,wGAAA,WAAY,EAAS,kBAAmB,EAAe,EAAE,KAA7C,SAAS,EAAmB,eAAe,GAC/D,OAAO,CACR,CAAC;KACH;IAED,iCAAS,GAAT,UAAU,SAA0B,EAAE,eAAuB,EAAE,OAAc;QAC3E,OAAO,aAAa,CAAC,IAAI,EAAsB,CAC7C,IAAI,EACJ,QAAQ,kHAAA,WAAY,EAAS,kBAAmB,EAAe,YAAY,KAAvD,SAAS,EAAmB,eAAe,GAC/D,OAAO,CACR,CAAC;KACH;IAED,iCAAS,GAAT,UAAU,SAA0B,EAAE,eAAuB,EAAE,OAAc;QAC3E,OAAO,aAAa,CAAC,GAAG,EAAmB,CACzC,IAAI,EACJ,QAAQ,mHAAA,WAAY,EAAS,kBAAmB,EAAe,aAAa,KAAxD,SAAS,EAAmB,eAAe,GAC/D,OAAO,CACR,CAAC;KACH;IAED,+BAAO,GAAP,UAAQ,SAA0B,EAAE,eAAuB,EAAE,SAAiB,EAAE,OAAc;QAC5F,OAAO,aAAa,CAAC,GAAG,EAAc,CACpC,IAAI,EACJ,QAAQ,sHAAA,WAAY,EAAS,kBAAmB,EAAe,YAAa,EAAS,EAAE,KAAnE,SAAS,EAAmB,eAAe,EAAa,SAAS,GACrF,OAAO,CACR,CAAC;KACH;IAED,gCAAQ,GAAR,UAAS,SAA0B,EAAE,eAAuB,EAAE,OAAc;QAC1E,OAAO,aAAa,CAAC,GAAG,EAAgB,CACtC,IAAI,EACJ,QAAQ,iHAAA,WAAY,EAAS,kBAAmB,EAAe,WAAW,KAAtD,SAAS,EAAmB,eAAe,GAC/D,OAAO,CACR,CAAC;KACH;IAED,mCAAW,GAAX,UAAY,SAA0B,EAAE,eAAuB,EAAE,OAAc;QAC7E,OAAO,aAAa,CAAC,IAAI,EAAsB,CAC7C,IAAI,EACJ,QAAQ,oHAAA,WAAY,EAAS,kBAAmB,EAAe,cAAc,KAAzD,SAAS,EAAmB,eAAe,GAC/D,OAAO,CACR,CAAC;KACH;IACH,oBAAC;AAAD,CAlOA,CAA8D,YAAY,GAkOzE;;;;IC1VqE,yCAAe;IAArF;;KAsNC;IA3MC,6CAAa,GAAb,UACE,SAA0B,EAC1B,EAAuF;QAAvF,mBAAA,EAAA,OAAuF;QAArF,IAAA,eAAe,qBAAA,EAAK,OAAO,cAA7B,mBAA+B,CAAF;QAE7B,IAAI,GAAW,CAAC;QAEhB,IAAI,eAAe,EAAE;YACnB,GAAG,GAAG,QAAQ,oHAAA,WAAY,EAAS,kBAAmB,EAAe,YAAY,KAAvD,SAAS,EAAmB,eAAe,CAAY,CAAC;SACnF;aAAM;YACL,GAAG,GAAG,QAAQ,gGAAA,WAAY,EAAS,YAAY,KAArB,SAAS,CAAY,CAAC;SACjD;QAED,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;KAChD;IAYD,iDAAiB,GAAjB,UACE,SAA0B,EAC1B,EAAuF;QAAvF,mBAAA,EAAA,OAAuF;QAArF,IAAA,eAAe,qBAAA,EAAK,OAAO,cAA7B,mBAA+B,CAAF;QAE7B,IAAI,GAAW,CAAC;QAEhB,IAAI,eAAe,EAAE;YACnB,GAAG,GAAG,QAAQ,oHAAA,WAAY,EAAS,kBAAmB,EAAe,YAAY,KAAvD,SAAS,EAAmB,eAAe,CAAY,CAAC;SACnF;aAAM;YACL,GAAG,GAAG,QAAQ,gGAAA,WAAY,EAAS,YAAY,KAArB,SAAS,CAAY,CAAC;SACjD;QAED,OAAO,aAAa,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;KACjD;IAED,4CAAY,GAAZ,UAAa,SAA0B,EAAE,cAAsB,EAAE,OAA2B;QAC1F,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJ,QAAQ,0GAAA,WAAY,EAAS,kBAAmB,EAAc,EAAE,KAA5C,SAAS,EAAmB,cAAc,GAC9D,OAAO,CACR,CAAC;KACH;IAYD,6CAAa,GAAb,UACE,SAA0B,EAC1B,EAAuF;QAAvF,mBAAA,EAAA,OAAuF;QAArF,IAAA,eAAe,qBAAA,EAAK,OAAO,cAA7B,mBAA+B,CAAF;QAE7B,IAAI,GAAW,CAAC;QAEhB,IAAI,eAAe,EAAE;YACnB,GAAG,GAAG,QAAQ,yHAAA,WAAY,EAAS,kBAAmB,EAAe,iBAAiB,KAA5D,SAAS,EAAmB,eAAe,CAAiB,CAAC;SACxF;aAAM;YACL,GAAG,GAAG,QAAQ,qGAAA,WAAY,EAAS,iBAAiB,KAA1B,SAAS,CAAiB,CAAC;SACtD;QAED,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;KAChD;IAgBD,+CAAe,GAAf,UACE,SAA0B,EAC1B,IAAY,EACZ,iBAAyB,EACzB,EAGuF;QAHvF,mBAAA,EAAA,OAGuF;QAFrF,IAAA,eAAe,qBAAA,EACZ,OAAO,cAFZ,mBAGC,CADW;QAGZ,IAAI,GAAW,CAAC;QAEhB,IAAI,eAAe,EAAE;YACnB,GAAG,GAAG,QAAQ,yHAAA,WAAY,EAAS,kBAAmB,EAAe,iBAAiB,KAA5D,SAAS,EAAmB,eAAe,CAAiB,CAAC;SACxF;aAAM;YACL,GAAG,GAAG,QAAQ,qGAAA,WAAY,EAAS,iBAAiB,KAA1B,SAAS,CAAiB,CAAC;SACtD;QAED,OAAO,aAAa,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,GAAG,aAAI,IAAI,MAAA,EAAE,iBAAiB,mBAAA,IAAK,OAAO,EAAG,CAAC;KACjF;IAED,6CAAa,GAAb,UACE,SAA0B,EAC1B,eAAuB,EACvB,OAA+C;QAE/C,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJ,QAAQ,2HAAA,WAAY,EAAS,kBAAmB,EAAe,iBAAiB,KAA5D,SAAS,EAAmB,eAAe,GAC/D,OAAO,CACR,CAAC;KACH;IAkBD,gDAAgB,GAAhB,UACE,SAA0B,EAC1B,cAAsB,EACtB,IAAY,EACZ,iBAAyB,EACzB,EAGuF;QAHvF,mBAAA,EAAA,OAGuF;QAFrF,IAAA,eAAe,qBAAA,EACZ,OAAO,cAFZ,mBAGC,CADW;QAGZ,IAAI,GAAW,CAAC;QAEhB,IAAI,eAAe,EAAE;YACnB,GAAG,GAAG,QAAQ,gIAAA,WAAY,EAAS,kBAAmB,EAAe,kBAAmB,EAAc,EAAE,KAA9E,SAAS,EAAmB,eAAe,EAAmB,cAAc,CAAE,CAAC;SAC1G;aAAM;YACL,GAAG,GAAG,QAAQ,4GAAA,WAAY,EAAS,kBAAmB,EAAc,EAAE,KAA5C,SAAS,EAAmB,cAAc,CAAE,CAAC;SACxE;QAED,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,GAAG,aAAI,IAAI,MAAA,EAAE,iBAAiB,mBAAA,IAAK,OAAO,EAAG,CAAC;KAChF;IAcD,kDAAkB,GAAlB,UACE,SAA0B,EAC1B,cAAsB,EACtB,EAAyE;QAAzE,mBAAA,EAAA,OAAyE;QAAvE,IAAA,eAAe,qBAAA,EAAK,OAAO,cAA7B,mBAA+B,CAAF;QAE7B,IAAI,GAAW,CAAC;QAEhB,IAAI,eAAe,EAAE;YACnB,GAAG,GAAG,QAAQ,gIAAA,WAAY,EAAS,kBAAmB,EAAe,kBAAmB,EAAc,EAAE,KAA9E,SAAS,EAAmB,eAAe,EAAmB,cAAc,CAAE,CAAC;SAC1G;aAAM;YACL,GAAG,GAAG,QAAQ,4GAAA,WAAY,EAAS,kBAAmB,EAAc,EAAE,KAA5C,SAAS,EAAmB,cAAc,CAAE,CAAC;SACxE;QAED,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,GAAG,eAAO,OAAO,EAAG,CAAC;KACvD;IAED,uCAAO,GAAP,UACE,SAA0B,EAC1B,eAAuB,EACvB,OAA+C;QAE/C,OAAO,aAAa,CAAC,IAAI,EAA+C,CACtE,IAAI,EACJ,QAAQ,oHAAA,WAAY,EAAS,kBAAmB,EAAe,UAAU,KAArD,SAAS,EAAmB,eAAe,GAC/D,OAAO,CACR,CAAC;KACH;IAED,yCAAS,GAAT,UAAU,SAA0B,EAAE,eAAuB,EAAE,OAAc;QAC3E,OAAO,aAAa,CAAC,IAAI,EAAQ,CAC/B,IAAI,EACJ,QAAQ,sHAAA,WAAY,EAAS,kBAAmB,EAAe,YAAY,KAAvD,SAAS,EAAmB,eAAe,GAC/D,OAAO,CACR,CAAC;KACH;IACH,4BAAC;AAAD,CAtNA,CAAsE,YAAY,GAsNjF;;;;ICnPuE,2CAAsB;IAC5F,iCAAY,OAA+B;;eAEzC,kBAAM,gBAAgB,EAAE,OAAO,CAAC;KACjC;IACH,8BAAC;AAAD,CALA,CAAwE,mBAAmB;;;ICuBnB,2CAAsB;IAC5F,iCAAY,OAA+B;;eAEzC,kBAAM,UAAU,EAAE,gBAAgB,EAAE,OAAO,CAAC;KAC7C;IACH,8BAAC;AAAD,CALA,CAAwE,mBAAmB;;;ICDzB,qCAAgB;IAChF,2BAAY,OAA+B;;eAEzC,kBAAM,UAAU,EAAE,gBAAgB,EAAE,OAAO,CAAC;KAC7C;IACH,wBAAC;AAAD,CALA,CAAkE,aAAa;;;ICjCtB,4BAAe;IAAxE;;KAkDC;IAjDC,sBAAG,GAAH,UAAI,EAIwF;QAJxF,mBAAA,EAAA,OAIwF;QAH1F,IAAA,SAAS,eAAA,EACT,OAAO,aAAA,EACJ,OAAO,cAHR,wBAIH,CADW;QAEV,IAAI,GAAW,CAAC;QAEhB,IAAI,SAAS,EAAE;YACb,GAAG,GAAG,QAAQ,+FAAA,WAAY,EAAS,WAAW,KAApB,SAAS,CAAW,CAAC;SAChD;aAAM,IAAI,OAAO,EAAE;YAClB,GAAG,GAAG,QAAQ,6FAAA,SAAU,EAAO,WAAW,KAAlB,OAAO,CAAW,CAAC;SAC5C;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;SACxD;QAED,OAAO,aAAa,CAAC,GAAG,EAAmB,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;KACjE;IAED,yBAAM,GAAN,UAAO,SAA0B,EAAE,SAAiB,EAAE,OAAc;QAClE,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJ,QAAQ,oGAAA,WAAY,EAAS,YAAa,EAAS,EAAE,KAAjC,SAAS,EAAa,SAAS,GACnD,OAAO,CACR,CAAC;KACH;IAED,6BAAU,GAAV,UAAW,SAA0B,EAAE,SAAiB,EAAE,aAAqB,EAAE,OAAc;QAC7F,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJ,QAAQ,uHAAA,WAAY,EAAS,YAAa,EAAS,iBAAkB,EAAa,EAAE,KAAhE,SAAS,EAAa,SAAS,EAAkB,aAAa,GAClF,OAAO,CACR,CAAC;KACH;IAED,uBAAI,GAAJ,UAAK,SAA0B,EAAE,SAAiB,EAAE,OAAc;QAChE,OAAO,aAAa,CAAC,GAAG,EAAiB,CACvC,IAAI,EACJ,QAAQ,oGAAA,WAAY,EAAS,YAAa,EAAS,EAAE,KAAjC,SAAS,EAAa,SAAS,GACnD,OAAO,CACR,CAAC;KACH;IAED,4BAAS,GAAT,UAAU,SAA0B,EAAE,SAAiB,EAAE,OAAc;QACrE,OAAO,aAAa,CAAC,GAAG,EAAuB,CAC7C,IAAI,EACJ,QAAQ,kHAAA,WAAY,EAAS,YAAa,EAAS,gBAAgB,KAA/C,SAAS,EAAa,SAAS,GACnD,OAAO,CACR,CAAC;KACH;IACH,eAAC;AAAD,CAlDA,CAAyD,YAAY,GAkDpE;;;;ICrE+D,mCAAe;IAA/E;;KAwCC;IAvCC,iCAAO,GAAP,UACE,SAA0B,EAC1B,WAAmB,EACnB,cAAsB,EACtB,QAAgB,EAChB,OAAe,EACf,EAA8F;QAA9F,mBAAA,EAAA,OAA8F;QAA5F,IAAA,WAAW,iBAAA,EAAK,OAAO,cAAzB,eAA2B,CAAF;QAEzB,IAAM,GAAG,GAAG,kBAAkB,CAAC,SAAS,CAAC,CAAC;QAC1C,IAAM,IAAI,GAAG,EAAE,QAAQ,UAAA,EAAE,WAAW,aAAA,EAAE,CAAC;QAEvC,IAAI,CAAC,IAAI,CAAC,WAAW;YAAE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,SAAS,CAAC;QAEnF,OAAO,aAAa,CAAC,GAAG,EAAuB,CAC7C,IAAI,EACJ,mBAAY,GAAG,+BAAqB,WAAW,cAAI,cAAc,cAAI,QAAQ,CAAE,aAE7E,MAAM,EAAE,IAAI,EACZ,IAAI,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC,IAClB,OAAO,EAEb,CAAC;KACH;IAED,kCAAQ,GAAR,UACE,SAA0B,EAC1B,WAAmB,EACnB,cAAsB,EACtB,QAAgB,EAChB,OAAc;QAEd,IAAM,GAAG,GAAG,kBAAkB,CAAC,SAAS,CAAC,CAAC;QAE1C,OAAO,aAAa,CAAC,GAAG,EAAuB,CAC7C,IAAI,EACJ,mBAAY,GAAG,+BAAqB,WAAW,cAAI,cAAc,cAAI,QAAQ,CAAE,EAC/E,OAAO,CACR,CAAC;KACH;IACH,sBAAC;AAAD,CAxCA,CAAgE,YAAY;;ACiD5E;;IAE0D,6BAAe;IAAzE;;KAuDC;IAtDC,uBAAG,GAAH,UAAI,SAA0B,EAAE,OAAiC;QAC/D,OAAO,aAAa,CAAC,GAAG,EAAoB,CAC1C,IAAI,EACJ,QAAQ,gGAAA,WAAY,EAAS,YAAY,KAArB,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,0BAAM,GAAN,UAAO,SAA0B,EAAE,GAAW,EAAE,OAA4B;QAC1E,OAAO,aAAa,CAAC,IAAI,EAAkB,CAAC,IAAI,EAAE,QAAQ,+FAAA,WAAY,EAAS,WAAW,KAApB,SAAS,cAC7E,GAAG,KAAA,IACA,OAAO,EACV,CAAC;KACJ;IAED,0BAAM,GAAN,UAAO,SAA0B,EAAE,UAAkB,EAAE,OAAc;QACnE,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJ,QAAQ,qGAAA,WAAY,EAAS,aAAc,EAAU,EAAE,KAAnC,SAAS,EAAc,UAAU,GACrD,OAAO,CACR,CAAC;KACH;IAED,wBAAI,GAAJ,UAAK,SAA0B,EAAE,UAAkB,EAAE,OAAc;QACjE,OAAO,aAAa,CAAC,GAAG,EAAkB,CACxC,IAAI,EACJ,QAAQ,qGAAA,WAAY,EAAS,aAAc,EAAU,EAAE,KAAnC,SAAS,EAAc,UAAU,GACrD,OAAO,CACR,CAAC;KACH;IAED,yBAAK,GAAL,UAAM,SAA0B,EAAE,UAAkB,EAAE,OAAc;QAClE,OAAO,aAAa,CAAC,IAAI,EAA0B,CACjD,IAAI,EACJ,QAAQ,2GAAA,WAAY,EAAS,aAAc,EAAU,QAAQ,KAAzC,SAAS,EAAc,UAAU,GACrD,OAAO,CACR,CAAC;KACH;IAED,0BAAM,GAAN,UAAO,SAA0B,EAAE,UAAkB,EAAE,OAAc;QACnE,OAAO,aAAa,CAAC,IAAI,EAA0B,CACjD,IAAI,EACJ,QAAQ,4GAAA,WAAY,EAAS,aAAc,EAAU,SAAS,KAA1C,SAAS,EAAc,UAAU,GACrD,OAAO,CACR,CAAC;KACH;IAED,gCAAY,GAAZ,UAAa,SAA0B,EAAE,UAAkB,EAAE,OAAiC;QAC5F,OAAO,aAAa,CAAC,GAAG,EAA4B,CAClD,IAAI,EACJ,QAAQ,+GAAA,WAAY,EAAS,aAAc,EAAU,YAAY,KAA7C,SAAS,EAAc,UAAU,GACrD,OAAO,CACR,CAAC;KACH;IACH,gBAAC;AAAD,CAvDA,CAA0D,YAAY,GAuDrE;;;;IClFiE,qCAAe;IAAjF;;KA2DC;IA1DC,+BAAG,GAAH,UAAI,SAA0B,EAAE,OAAiC;QAC/D,OAAO,aAAa,CAAC,GAAG,EAA4B,CAClD,IAAI,EACJ,QAAQ,yGAAA,WAAY,EAAS,qBAAqB,KAA9B,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,kCAAM,GAAN,UACE,SAA0B,EAC1B,WAAmB,EACnB,GAAW,EACX,IAAY,EACZ,OAA4B;QAE5B,OAAO,aAAa,CAAC,IAAI,EAAqE,CAC5F,IAAI,EACJ,QAAQ,yGAAA,WAAY,EAAS,qBAAqB,KAA9B,SAAS,cAE3B,WAAW,aAAA,EACX,GAAG,KAAA,EACH,IAAI,MAAA,IACD,OAAO,EAEb,CAAC;KACH;IAED,gCAAI,GAAJ,UAAK,SAA0B,EAAE,UAAkB,EAAE,OAA4B;QAC/E,OAAO,aAAa,CAAC,GAAG,EAAkC,CACxD,IAAI,EACJ,QAAQ,8GAAA,WAAY,EAAS,sBAAuB,EAAU,EAAE,KAA5C,SAAS,EAAuB,UAAU,GAC9D,OAAO,CACR,CAAC;KACH;IAED,kCAAM,GAAN,UAAO,SAA0B,EAAE,UAAkB,EAAE,OAAc;QACnE,OAAO,aAAa,CAAC,GAAG,EAAkC,CACxD,IAAI,EACJ,QAAQ,8GAAA,WAAY,EAAS,sBAAuB,EAAU,EAAE,KAA5C,SAAS,EAAuB,UAAU,GAC9D,OAAO,CACR,CAAC;KACH;IAED,gCAAI,GAAJ,UAAK,SAA0B,EAAE,UAAkB,EAAE,OAAc;QACjE,OAAO,aAAa,CAAC,GAAG,EAAkC,CACxD,IAAI,EACJ,QAAQ,8GAAA,WAAY,EAAS,sBAAuB,EAAU,EAAE,KAA5C,SAAS,EAAuB,UAAU,GAC9D,OAAO,CACR,CAAC;KACH;IAED,yCAAa,GAAb,UAAc,SAA0B,EAAE,UAAkB,EAAE,OAAc;QAC1E,OAAO,aAAa,CAAC,IAAI,EAAkC,CACzD,IAAI,EACJ,QAAQ,6HAAA,WAAY,EAAS,sBAAuB,EAAU,iBAAiB,KAA3D,SAAS,EAAuB,UAAU,GAC9D,OAAO,CACR,CAAC;KACH;IACH,wBAAC;AAAD,CA3DA,CAAkE,YAAY,GA2D7E;;;;IC9EyE,6CAAe;IAAzF;;KAuDC;IAtDC,uCAAG,GAAH,UAAI,SAA0B,EAAE,kBAA0B,EAAE,OAAiC;QAC3F,OAAO,aAAa,CAAC,GAAG,EAA4B,CAClD,IAAI,EACJ,QAAQ,wHAAA,WAAY,EAAS,sBAAuB,EAAkB,YAAY,KAA9D,SAAS,EAAuB,kBAAkB,GACtE,OAAO,CACR,CAAC;KACH;IAED,0CAAM,GAAN,UAAO,SAA0B,EAAE,kBAA0B,EAAE,OAA4B;QACzF,OAAO,aAAa,CAAC,IAAI,EAA0B,CACjD,IAAI,EACJ,QAAQ,wHAAA,WAAY,EAAS,sBAAuB,EAAkB,YAAY,KAA9D,SAAS,EAAuB,kBAAkB,GACtE,OAAO,CACR,CAAC;KACH;IAED,wCAAI,GAAJ,UACE,SAA0B,EAC1B,kBAA0B,EAC1B,KAAa,EACb,OAA4B;QAE5B,OAAO,aAAa,CAAC,GAAG,EAA0B,CAChD,IAAI,EACJ,QAAQ,6HAAA,WAAY,EAAS,sBAAuB,EAAkB,aAAc,EAAK,EAAE,KAAvE,SAAS,EAAuB,kBAAkB,EAAc,KAAK,GACzF,OAAO,CACR,CAAC;KACH;IAED,wCAAI,GAAJ,UACE,SAA0B,EAC1B,kBAA0B,EAC1B,KAAa,EACb,OAA4B;QAE5B,OAAO,aAAa,CAAC,GAAG,EAA0B,CAChD,IAAI,EACJ,QAAQ,6HAAA,WAAY,EAAS,sBAAuB,EAAkB,aAAc,EAAK,EAAE,KAAvE,SAAS,EAAuB,kBAAkB,EAAc,KAAK,GACzF,OAAO,CACR,CAAC;KACH;IAED,0CAAM,GAAN,UACE,SAA0B,EAC1B,kBAA0B,EAC1B,KAAa,EACb,OAA4B;QAE5B,OAAO,aAAa,CAAC,GAAG,EAA0B,CAChD,IAAI,EACJ,QAAQ,6HAAA,WAAY,EAAS,sBAAuB,EAAkB,aAAc,EAAK,EAAE,KAAvE,SAAS,EAAuB,kBAAkB,EAAc,KAAK,GACzF,OAAO,CACR,CAAC;KACH;IACH,gCAAC;AAAD,CAvDA,CAA0E,YAAY,GAuDrF;;;AClBM,IAAM,eAAe,GAAG;IAC7B,QAAQ,EAAE,UAAG,IAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE,YAAS;CAC5C,CAAC;;IAEkE,uCAAe;IAAnF;;KA6CC;IA5CC,sCAAQ,GAAR,UAAS,SAA0B,EAAE,OAAc;QACjD,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,QAAQ,sGAAA,WAAY,EAAS,kBAAkB,KAA3B,SAAS,GAAoB,OAAO,CAAC,CAAC;KAC5F;IAED,0CAAY,GAAZ,UAAa,SAA0B,EAAE,OAAc;QACrD,OAAO,aAAa,CAAC,GAAG,EAAsB,CAC5C,IAAI,EACJ,QAAQ,6FAAA,WAAY,EAAS,SAAS,KAAlB,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,oCAAM,GAAN,UACE,OAAe,EACf,IAAY,EACZ,EAAiF;QAAjF,mBAAA,EAAA,OAAiF;QAA/E,IAAA,QAAQ,cAAA,EAAK,OAAO,cAAtB,YAAwB,CAAF;QAEtB,IAAM,IAAI,yBAAQ,eAAe,GAAK,QAAQ,CAAE,CAAC;QAEjD,IAAI,CAAC,IAAI,CAAC,WAAW;YAAE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,SAAS,CAAC;QAEnF,OAAO,aAAa,CAAC,IAAI,EAAsB,CAAC,IAAI,EAAE,iBAAiB,sBACrE,MAAM,EAAE,IAAI,IACT,OAAO,KACV,IAAI,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC,EACrB,IAAI,MAAA,IACJ,CAAC;KACJ;IAED,0CAAY,GAAZ,UAAa,SAA0B,EAAE,OAAc;QACrD,OAAO,aAAa,CAAC,GAAG,EAAsB,CAC5C,IAAI,EACJ,QAAQ,6FAAA,WAAY,EAAS,SAAS,KAAlB,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,sCAAQ,GAAR,UAAS,SAA0B,EAAE,OAA4B;QAC/D,OAAO,aAAa,CAAC,IAAI,EAAuB,CAC9C,IAAI,EACJ,QAAQ,6FAAA,WAAY,EAAS,SAAS,KAAlB,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IACH,0BAAC;AAAD,CA7CA,CAAoE,YAAY,GA6C/E;;;;ICkDwD,4BAAe;IAAxE;;KA0JC;IAzJC,sBAAG,GAAH,UAAI,OAAiC;QACnC,OAAO,aAAa,CAAC,GAAG,EAAmB,CAAC,IAAI,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;KACxE;IAED,0BAAO,GAAP,UAAQ,SAA0B,EAAE,OAAc;QAChD,OAAO,aAAa,CAAC,IAAI,EAAyB,CAChD,IAAI,EACJ,QAAQ,8FAAA,WAAY,EAAS,UAAU,KAAnB,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,yBAAM,GAAN,UAAO,EAG4E;QAFjF,IAAA,MAAM,YAAA,EACH,OAAO,cAFL,UAGN,CADW;QAEV,IAAM,GAAG,GAAG,MAAM,GAAG,wBAAiB,MAAM,CAAE,GAAG,UAAU,CAAC;QAE5D,OAAO,aAAa,CAAC,IAAI,EAAyB,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;KACxE;IAED,uBAAI,GAAJ,UAAK,SAA0B,EAAE,OAA4B;QAC3D,OAAO,aAAa,CAAC,GAAG,EAAyB,CAC/C,IAAI,EACJ,QAAQ,sFAAA,WAAY,EAAS,EAAE,KAAX,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,uBAAI,GAAJ,UACE,SAA0B,EAC1B,EAAiF;QAAjF,mBAAA,EAAA,OAAiF;QAA/E,IAAA,YAAY,kBAAA,EAAK,OAAO,cAA1B,gBAA4B,CAAF;QAE1B,IAAI,GAAG,GAAG,QAAQ,2FAAA,WAAY,EAAS,OAAO,KAAhB,SAAS,CAAO,CAAC;QAE/C,IAAI,YAAY;YAAE,GAAG,IAAI,WAAI,kBAAkB,CAAC,YAAY,CAAC,CAAE,CAAC;QAEhE,OAAO,aAAa,CAAC,IAAI,EAAyB,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;KACxE;IAED,wBAAK,GAAL,UAAM,SAA0B,EAAE,OAA4B;QAC5D,OAAO,aAAa,CAAC,GAAG,EAA2B,CACjD,IAAI,EACJ,QAAQ,4FAAA,WAAY,EAAS,QAAQ,KAAjB,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,4BAAS,GAAT,UAAU,SAA0B,EAAE,OAAc;QAClD,OAAO,aAAa,CAAC,GAAG,EAA8B,CACpD,IAAI,EACJ,QAAQ,gGAAA,WAAY,EAAS,YAAY,KAArB,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,6BAAU,GAAV,UAAW,SAA0B,EAAE,OAAc;QACnD,OAAO,aAAa,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,QAAQ,kGAAA,WAAY,EAAS,cAAc,KAAvB,SAAS,GAAgB,OAAO,CAAC,CAAC;KACzF;IAED,yBAAM,GAAN,UAAO,SAA0B,EAAE,OAAc;QAC/C,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,QAAQ,sFAAA,WAAY,EAAS,EAAE,KAAX,SAAS,GAAI,OAAO,CAAC,CAAC;KAC5E;IAED,6BAAU,GAAV,UAAW,SAA0B,EAAE,OAAc;QACnD,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,QAAQ,uFAAA,WAAY,EAAS,OAAO,KAAhB,SAAS,GAAS,OAAO,CAAC,CAAC;KACjF;IAED,yBAAM,GAAN,UAAO,WAAmB,EAAE,OAA4B;QACtD,OAAO,aAAa,CAAC,GAAG,EAAmB,CAAC,IAAI,EAAE,UAAU,aAC1D,MAAM,EAAE,WAAW,IAChB,OAAO,EACV,CAAC;KACJ;IAED,wBAAK,GAAL,UACE,SAA0B,EAC1B,OAAwB,EACxB,WAAmB,EACnB,OAA4B;QAE5B,OAAO,aAAa,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,QAAQ,wFAAA,WAAY,EAAS,QAAQ,KAAjB,SAAS,cAC7D,OAAO,SAAA,EACP,WAAW,aAAA,IACR,OAAO,EACV,CAAC;KACJ;IAED,uBAAI,GAAJ,UAAK,SAA0B,EAAE,OAA4B;QAC3D,OAAO,aAAa,CAAC,GAAG,EAAyB,CAC/C,IAAI,EACJ,QAAQ,oFAAA,WAAY,EAAS,EAAE,KAAX,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,uBAAI,GAAJ,UAAK,SAA0B,EAAE,OAAc;QAC7C,OAAO,aAAa,CAAC,IAAI,EAAyB,CAChD,IAAI,EACJ,QAAQ,yFAAA,WAAY,EAAS,OAAO,KAAhB,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,2BAAQ,GAAR,UAAS,SAA0B,EAAE,WAA4B;QAC/D,OAAO,aAAa,CAAC,GAAG,EAAyB,CAC/C,IAAI,EACJ,QAAQ,6FAAA,WAAY,EAAS,WAAW,KAApB,SAAS,GAC7B;YACE,SAAS,EAAE,WAAW;SACvB,CACF,CAAC;KACH;IAED,4BAAS,GAAT,UAAU,SAA0B,EAAE,OAAc;QAClD,OAAO,aAAa,CAAC,IAAI,EAAyB,CAChD,IAAI,EACJ,QAAQ,8FAAA,WAAY,EAAS,YAAY,KAArB,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,0BAAO,GAAP,UAAQ,SAA0B,EAAE,OAAwB,EAAE,OAAc;QAC1E,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,QAAQ,+FAAA,WAAY,EAAS,SAAU,EAAO,EAAE,KAA5B,SAAS,EAAU,OAAO,GAAI,OAAO,CAAC,CAAC;KAC7F;IAED,yBAAM,GAAN,UAAO,SAA0B,EAAE,OAAc;QAC/C,OAAO,aAAa,CAAC,IAAI,EAAyB,CAChD,IAAI,EACJ,QAAQ,2FAAA,WAAY,EAAS,SAAS,KAAlB,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,yBAAM,GAAN,UACE,SAA0B,EAC1B,OAAe,EACf,EAAiF;QAAjF,mBAAA,EAAA,OAAiF;QAA/E,IAAA,QAAQ,cAAA,EAAK,OAAO,cAAtB,YAAwB,CAAF;QAEtB,IAAM,IAAI,yBAAQ,eAAe,GAAK,QAAQ,CAAE,CAAC;QAEjD,IAAI,CAAC,IAAI,CAAC,WAAW;YAAE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,SAAS,CAAC;QAEnF,OAAO,aAAa,CAAC,IAAI,EAA2B,CAClD,IAAI,EACJ,QAAQ,4FAAA,WAAY,EAAS,UAAU,KAAnB,SAAS,cAE3B,MAAM,EAAE,IAAI,EACZ,IAAI,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC,IAClB,OAAO,EAEb,CAAC;KACH;IACH,eAAC;AAAD,CA1JA,CAAyD,YAAY,GA0JpE;;;;ICvRqE,yCAAyB;IAC7F,+BAAY,OAA+B;;eAEzC,kBAAM,UAAU,EAAE,OAAO,CAAC;KAC3B;IACH,4BAAC;AAAD,CALA,CAAsE,sBAAsB;;;IC2B9B,iCAAiB;IAC7E,uBAAY,OAA+B;;eAEzC,kBAAM,UAAU,EAAE,OAAO,CAAC;KAC3B;IACH,oBAAC;AAAD,CALA,CAA8D,cAAc;;;ICnBZ,2CAA2B;IACzF,iCAAY,OAA+B;;eAEzC,kBAAM,UAAU,EAAE,OAAO,CAAC;KAC3B;IACH,8BAAC;AAAD,CALA,CAAgE,wBAAwB;;;IC0DrB,sCAAsB;IACvF,4BAAY,OAA+B;;eAEzC,kBAAM,UAAU,EAAE,OAAO,CAAC;KAC3B;IACH,yBAAC;AAAD,CALA,CAAmE,mBAAmB;;;ICxDzB,gCAAe;IAA5E;;KAsCC;IArCC,0BAAG,GAAH,UAAI,SAA0B,EAAE,OAAiC;QAC/D,OAAO,aAAa,CAAC,GAAG,EAAuB,CAC7C,IAAI,EACJ,QAAQ,4FAAA,WAAY,EAAS,QAAQ,KAAjB,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,2BAAI,GAAJ,UAAK,SAA0B,EAAE,MAAc,EAAE,OAAc;QAC7D,OAAO,aAAa,CAAC,GAAG,EAAqB,CAC3C,IAAI,EACJ,QAAQ,iGAAA,WAAY,EAAS,SAAU,EAAM,EAAE,KAA3B,SAAS,EAAU,MAAM,GAC7C,OAAO,CACR,CAAC;KACH;IAED,0BAAG,GAAH,UAAI,SAA0B,EAAE,GAAW,EAAE,OAA4B;QACvE,OAAO,aAAa,CAAC,IAAI,EAAqB,CAAC,IAAI,EAAE,QAAQ,4FAAA,WAAY,EAAS,QAAQ,KAAjB,SAAS,cAChF,GAAG,KAAA,IACA,OAAO,EACV,CAAC;KACJ;IAED,2BAAI,GAAJ,UAAK,SAA0B,EAAE,MAAc,EAAE,GAAW,EAAE,OAA4B;QACxF,OAAO,aAAa,CAAC,GAAG,EAAqB,CAC3C,IAAI,EACJ,QAAQ,iGAAA,WAAY,EAAS,SAAU,EAAM,EAAE,KAA3B,SAAS,EAAU,MAAM,cAE3C,GAAG,KAAA,IACA,OAAO,EAEb,CAAC;KACH;IAED,6BAAM,GAAN,UAAO,SAA0B,EAAE,MAAc,EAAE,OAAc;QAC/D,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,QAAQ,iGAAA,WAAY,EAAS,SAAU,EAAM,EAAE,KAA3B,SAAS,EAAU,MAAM,GAAI,OAAO,CAAC,CAAC;KAC5F;IACH,mBAAC;AAAD,CAtCA,CAA6D,YAAY,GAsCxE;;;;IC7B8D,kCAAkB;IAC/E,wBAAY,OAA+B;;eAEzC,kBAAM,UAAU,EAAE,OAAO,CAAC;KAC3B;IACH,qBAAC;AAAD,CALA,CAA+D,eAAe;;;ICUZ,qCAAqB;IACrF,2BAAY,OAA+B;;eAEzC,kBAAM,UAAU,EAAE,OAAO,CAAC;KAC3B;IACH,wBAAC;AAAD,CALA,CAAkE,kBAAkB;;;ICzBpB,mCAAe;IAA/E;;KAqEC;IApEC,6BAAG,GAAH,UAAI,SAA0B,EAAE,OAAiC;QAC/D,OAAO,aAAa,CAAC,GAAG,EAA0B,CAChD,IAAI,EACJ,QAAQ,+FAAA,WAAY,EAAS,WAAW,KAApB,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,iCAAO,GAAP,UAAQ,SAA0B,EAAE,SAAiB,EAAE,OAAc;QACnE,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJ,QAAQ,wGAAA,WAAY,EAAS,YAAa,EAAS,MAAM,KAArC,SAAS,EAAa,SAAS,GACnD,OAAO,CACR,CAAC;KACH;IAED,gCAAM,GAAN,UACE,SAA0B,EAC1B,KAAa,EACb,QAAgB,EAChB,IAAY,EACZ,UAA6B,EAC7B,OAA4B;QAE5B,OAAO,aAAa,CAAC,IAAI,EAAwB,CAC/C,IAAI,EACJ,QAAQ,+FAAA,WAAY,EAAS,WAAW,KAApB,SAAS,cAE3B,KAAK,OAAA,EACL,QAAQ,UAAA,EACR,IAAI,MAAA,EACJ,UAAU,YAAA,IACP,OAAO,EAEb,CAAC;KACH;IAED,8BAAI,GAAJ,UAAK,SAA0B,EAAE,SAAiB,EAAE,OAA4B;QAC9E,OAAO,aAAa,CAAC,GAAG,EAAwB,CAC9C,IAAI,EACJ,QAAQ,oGAAA,WAAY,EAAS,YAAa,EAAS,EAAE,KAAjC,SAAS,EAAa,SAAS,GACnD,OAAO,CACR,CAAC;KACH;IAED,gCAAM,GAAN,UAAO,SAA0B,EAAE,SAAiB,EAAE,OAAc;QAClE,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJ,QAAQ,oGAAA,WAAY,EAAS,YAAa,EAAS,EAAE,KAAjC,SAAS,EAAa,SAAS,GACnD,OAAO,CACR,CAAC;KACH;IAED,8BAAI,GAAJ,UAAK,SAA0B,EAAE,SAAiB,EAAE,OAAc;QAChE,OAAO,aAAa,CAAC,GAAG,EAAwB,CAC9C,IAAI,EACJ,QAAQ,oGAAA,WAAY,EAAS,YAAa,EAAS,EAAE,KAAjC,SAAS,EAAa,SAAS,GACnD,OAAO,CACR,CAAC;KACH;IAED,0CAAgB,GAAhB,UAAiB,SAA0B,EAAE,SAAiB,EAAE,OAAc;QAC5E,OAAO,aAAa,CAAC,GAAG,EAIpB,CAAC,IAAI,EAAE,QAAQ,sHAAA,WAAY,EAAS,YAAa,EAAS,oBAAoB,KAAnD,SAAS,EAAa,SAAS,GAAsB,OAAO,CAAC,CAAC;KAC9F;IACH,sBAAC;AAAD,CArEA,CAAgE,YAAY,GAqE3E;;;;ICzCmE,uCAAgB;IAClF,6BAAY,OAA+B;;eAEzC,kBAAM,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC;KACvC;IACH,0BAAC;AAAD,CALA,CAAoE,aAAa;;;ICMP,6CAAsB;IAC9F,mCAAY,OAA+B;;eAEzC,kBAAM,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC;KACvC;IACH,gCAAC;AAAD,CALA,CAA0E,mBAAmB;;;ICvBnB,6CAAsB;IAC9F,mCAAY,OAA+B;;eAEzC,kBAAM,UAAU,EAAE,OAAO,CAAC;KAC3B;IACH,gCAAC;AAAD,CALA,CAA0E,mBAAmB;;;ICV3B,qCAAe;IAAjF;;KAqCC;IApCC,+BAAG,GAAH,UAAI,SAA0B,EAAE,OAA2D;QAA3D,wBAAA,EAAA,YAA2D;QACzF,OAAO,aAAa,CAAC,GAAG,EAA2B,CACjD,IAAI,EACJ,QAAQ,yGAAA,WAAY,EAAS,qBAAqB,KAA9B,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,mCAAO,GAAP,UAAQ,SAA0B,EAAE,UAAkB,EAAE,OAA4B;QAClF,OAAO,aAAa,CAAC,IAAI,EAAyB,CAChD,IAAI,EACJ,QAAQ,yGAAA,WAAY,EAAS,qBAAqB,KAA9B,SAAS,GAC7B;YACE,KAAK,aACH,IAAI,EAAE,UAAU,IACb,OAAO,CACX;SACF,CACF,CAAC;KACH;IAED,gCAAI,GAAJ,UAAK,SAA0B,EAAE,UAAkB,EAAE,OAAc;QACjE,OAAO,aAAa,CAAC,GAAG,EAAyB,CAC/C,IAAI,EACJ,QAAQ,8GAAA,WAAY,EAAS,sBAAuB,EAAU,EAAE,KAA5C,SAAS,EAAuB,UAAU,GAC9D,OAAO,CACR,CAAC;KACH;IAED,qCAAS,GAAT,UAAU,SAA0B,EAAE,UAAkB,EAAE,OAAc;QACtE,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJ,QAAQ,8GAAA,WAAY,EAAS,sBAAuB,EAAU,EAAE,KAA5C,SAAS,EAAuB,UAAU,GAC9D,OAAO,CACR,CAAC;KACH;IACH,wBAAC;AAAD,CArCA,CAAkE,YAAY,GAqC7E;;;;IC3C6D,iCAAe;IAA7E;;KAmCC;IAlCC,2BAAG,GAAH,UAAI,SAA0B,EAAE,OAAiC;QAC/D,OAAO,aAAa,CAAC,GAAG,EAAwB,CAC9C,IAAI,EACJ,QAAQ,qGAAA,WAAY,EAAS,iBAAiB,KAA1B,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,+BAAO,GAAP,UAAQ,SAA0B,EAAE,OAAe,EAAE,OAA4B;QAC/E,OAAO,aAAa,CAAC,IAAI,EAAsB,CAC7C,IAAI,EACJ,QAAQ,qGAAA,WAAY,EAAS,iBAAiB,KAA1B,SAAS,cAE3B,IAAI,EAAE,OAAO,IACV,OAAO,EAEb,CAAC;KACH;IAED,4BAAI,GAAJ,UAAK,SAA0B,EAAE,OAAe,EAAE,OAAc;QAC9D,OAAO,aAAa,CAAC,GAAG,EAAsB,CAC5C,IAAI,EACJ,QAAQ,0GAAA,WAAY,EAAS,kBAAmB,EAAO,EAAE,KAArC,SAAS,EAAmB,OAAO,GACvD,OAAO,CACR,CAAC;KACH;IAED,iCAAS,GAAT,UAAU,SAA0B,EAAE,OAAe,EAAE,OAAc;QACnE,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJ,QAAQ,0GAAA,WAAY,EAAS,kBAAmB,EAAO,EAAE,KAArC,SAAS,EAAmB,OAAO,GACvD,OAAO,CACR,CAAC;KACH;IACH,oBAAC;AAAD,CAnCA,CAA8D,YAAY,GAmCzE;;;;ICnBgE,oCAAoB;IACnF,0BAAY,OAA+B;;eAEzC,kBAAM,UAAU,EAAE,OAAO,CAAC;KAC3B;IACH,uBAAC;AAAD,CALA,CAAiE,iBAAiB;;;ICVd,uCAAuB;IACzF,6BAAY,OAA+B;;eAEzC,kBAAM,UAAU,EAAE,OAAO,CAAC;KAC3B;IACH,0BAAC;AAAD,CALA,CAAoE,oBAAoB;;;ICL9B,6BAAe;IAAzE;;KAgCC;IA/BC,0BAAM,GAAN,UAAO,SAA0B,EAAE,OAA4B;QAC7D,OAAO,aAAa,CAAC,IAAI,EAAmB,CAC1C,IAAI,EACJ,QAAQ,gGAAA,WAAY,EAAS,YAAY,KAArB,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,wBAAI,GAAJ,UAAK,SAA0B,EAAE,OAA4B;QAC3D,OAAO,aAAa,CAAC,GAAG,EAAmB,CACzC,IAAI,EACJ,QAAQ,gGAAA,WAAY,EAAS,YAAY,KAArB,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,0BAAM,GAAN,UAAO,SAA0B,EAAE,OAAc;QAC/C,OAAO,aAAa,CAAC,GAAG,EAAmB,CACzC,IAAI,EACJ,QAAQ,gGAAA,WAAY,EAAS,YAAY,KAArB,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,wBAAI,GAAJ,UAAK,SAA0B,EAAE,OAAc;QAC7C,OAAO,aAAa,CAAC,GAAG,EAAmB,CACzC,IAAI,EACJ,QAAQ,gGAAA,WAAY,EAAS,YAAY,KAArB,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IACH,gBAAC;AAAD,CAhCA,CAA0D,YAAY,GAgCrE;;;ACAD;;IACyD,4BAAe;IAAxE;;KAoCC;IAnCC,sBAAG,GAAH,UAAI,SAA0B,EAAE,OAAiC;QAC/D,OAAO,aAAa,CAAC,GAAG,EAAmB,CACzC,IAAI,EACJ,QAAQ,+FAAA,WAAY,EAAS,WAAW,KAApB,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,yBAAM,GAAN,UAAO,SAA0B,EAAE,OAA4B;QAC7D,OAAO,aAAa,CAAC,IAAI,EAAiB,CACxC,IAAI,EACJ,QAAQ,+FAAA,WAAY,EAAS,WAAW,KAApB,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,uBAAI,GAAJ,UAAK,SAA0B,EAAE,OAAe,EAAE,OAA4B;QAC5E,OAAO,aAAa,CAAC,GAAG,EAAiB,CACvC,IAAI,EACJ,QAAQ,oGAAA,WAAY,EAAS,YAAa,EAAO,EAAE,KAA/B,SAAS,EAAa,OAAO,GACjD,OAAO,CACR,CAAC;KACH;IAED,yBAAM,GAAN,UAAO,SAA0B,EAAE,OAAe,EAAE,OAAc;QAChE,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,QAAQ,oGAAA,WAAY,EAAS,YAAa,EAAO,EAAE,KAA/B,SAAS,EAAa,OAAO,GAAI,OAAO,CAAC,CAAC;KAChG;IAED,uBAAI,GAAJ,UAAK,SAA0B,EAAE,OAAe,EAAE,OAAc;QAC9D,OAAO,aAAa,CAAC,GAAG,EAAiB,CACvC,IAAI,EACJ,QAAQ,oGAAA,WAAY,EAAS,YAAa,EAAO,EAAE,KAA/B,SAAS,EAAa,OAAO,GACjD,OAAO,CACR,CAAC;KACH;IACH,eAAC;AAAD,CApCA,CAAyD,YAAY,GAoCpE;;;;IC9E4D,gCAAe;IAA5E;;KAuDC;IAtDC,0BAAG,GAAH,UAAI,SAA0B,EAAE,OAAe,EAAE,OAAiC;QAChF,OAAO,aAAa,CAAC,GAAG,EAAuB,CAC7C,IAAI,EACJ,QAAQ,iHAAA,WAAY,EAAS,YAAa,EAAO,eAAe,KAA5C,SAAS,EAAa,OAAO,GACjD,OAAO,CACR,CAAC;KACH;IAED,6BAAM,GAAN,UACE,SAA0B,EAC1B,OAAe,EACf,IAAY,EACZ,GAAW,EACX,OAAyD;QAEzD,OAAO,aAAa,CAAC,IAAI,EAAqB,CAC5C,IAAI,EACJ,QAAQ,iHAAA,WAAY,EAAS,YAAa,EAAO,eAAe,KAA5C,SAAS,EAAa,OAAO,cAE/C,IAAI,MAAA,EACJ,GAAG,KAAA,IACA,OAAO,EAEb,CAAC;KACH;IAED,2BAAI,GAAJ,UACE,SAA0B,EAC1B,OAAe,EACf,MAAc,EACd,OAAsF;QAEtF,OAAO,aAAa,CAAC,GAAG,EAAqB,CAC3C,IAAI,EACJ,QAAQ,sHAAA,WAAY,EAAS,YAAa,EAAO,gBAAiB,EAAM,EAAE,KAAtD,SAAS,EAAa,OAAO,EAAiB,MAAM,GACxE,OAAO,CACR,CAAC;KACH;IAED,6BAAM,GAAN,UAAO,SAA0B,EAAE,OAAe,EAAE,MAAc,EAAE,OAAc;QAChF,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJ,QAAQ,sHAAA,WAAY,EAAS,YAAa,EAAO,gBAAiB,EAAM,EAAE,KAAtD,SAAS,EAAa,OAAO,EAAiB,MAAM,GACxE,OAAO,CACR,CAAC;KACH;IAED,2BAAI,GAAJ,UAAK,SAA0B,EAAE,OAAe,EAAE,MAAc,EAAE,OAAc;QAC9E,OAAO,aAAa,CAAC,GAAG,EAAqB,CAC3C,IAAI,EACJ,QAAQ,sHAAA,WAAY,EAAS,YAAa,EAAO,gBAAiB,EAAM,EAAE,KAAtD,SAAS,EAAa,OAAO,EAAiB,MAAM,GACxE,OAAO,CACR,CAAC;KACH;IACH,mBAAC;AAAD,CAvDA,CAA6D,YAAY,GAuDxE;;;;IC9B4D,gCAAe;IAA5E;;KAkEC;IAjEC,8BAAO,GAAP,UAAQ,SAA0B,EAAE,IAAY,EAAE,EAAU,EAAE,OAAc;QAC1E,OAAO,aAAa,CAAC,GAAG,EAA2B,CACjD,IAAI,EACJ,QAAQ,yGAAA,WAAY,EAAS,qBAAqB,KAA9B,SAAS,cAE3B,IAAI,MAAA,EACJ,EAAE,IAAA,IACC,OAAO,EAEb,CAAC;KACH;IAED,mCAAY,GAAZ,UAAa,SAA0B,EAAE,OAAc;QACrD,OAAO,aAAa,CAAC,GAAG,EAAiC,CACvD,IAAI,EACJ,QAAQ,8GAAA,WAAY,EAAS,0BAA0B,KAAnC,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,gCAAS,GAAT,UAAU,SAA0B,EAAE,IAAc,EAAE,OAAc;QAClE,OAAO,aAAa,CAAC,GAAG,EAAgB,CACtC,IAAI,EACJ,QAAQ,4GAAA,WAAY,EAAS,wBAAwB,KAAjC,SAAS,cAE3B,IAAI,MAAA,IACD,OAAO,EAEb,CAAC;KACH;IAED,kCAAW,GAAX,UACE,SAA0B,EAC1B,EAA2E;QAA3E,mBAAA,EAAA,OAA2E;QAAzE,IAAA,gBAAmB,EAAnB,QAAQ,mBAAG,QAAQ,KAAA,EAAK,OAAO,cAAjC,YAAmC,CAAF;QAEjC,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJ,QAAQ,8GAAA,WAAY,EAAS,sBAAuB,EAAQ,EAAE,KAA1C,SAAS,EAAuB,QAAQ,GAC5D,OAAkC,CACL,CAAC;KACjC;IAED,+BAAQ,GAAR,UAAS,SAA0B,EAAE,GAAW,EAAE,OAAc;QAC9D,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJ,QAAQ,4GAAA,WAAY,EAAS,oBAAqB,EAAG,EAAE,KAAnC,SAAS,EAAqB,GAAG,GACrD,OAAO,CACoB,CAAC;KAC/B;IAED,kCAAW,GAAX,UAAY,SAA0B,EAAE,GAAW,EAAE,OAAc;QACjE,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJ,QAAQ,gHAAA,WAAY,EAAS,oBAAqB,EAAG,MAAM,KAAvC,SAAS,EAAqB,GAAG,GACrD,OAAO,CACoB,CAAC;KAC/B;IAED,2BAAI,GAAJ,UAAK,SAA0B,EAAE,OAA4B;QAC3D,OAAO,aAAa,CAAC,GAAG,EAA0B,CAChD,IAAI,EACJ,QAAQ,kGAAA,WAAY,EAAS,kBAAkB,KAA3B,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IACH,mBAAC;AAAD,CAlEA,CAA6D,YAAY,GAkExE;;;;IC3E+D,mCAAe;IAA/E;;KAiFC;IAhFC,gCAAM,GAAN,UACE,SAA0B,EAC1B,QAAgB,EAChB,MAAc,EACd,OAAe,EACf,aAAqB,EACrB,OAA4B;QAE5B,OAAO,aAAa,CAAC,IAAI,EAAwB,CAC/C,IAAI,EACJ,QAAQ,4GAAA,WAAY,EAAS,oBAAqB,EAAQ,EAAE,KAAxC,SAAS,EAAqB,QAAQ,cAExD,MAAM,QAAA,EACN,OAAO,SAAA,EACP,aAAa,eAAA,IACV,OAAO,EAEb,CAAC;KACH;IAED,8BAAI,GAAJ,UACE,SAA0B,EAC1B,QAAgB,EAChB,MAAc,EACd,OAAe,EACf,aAAqB,EACrB,OAA4B;QAE5B,OAAO,aAAa,CAAC,GAAG,EAAwB,CAC9C,IAAI,EACJ,QAAQ,4GAAA,WAAY,EAAS,oBAAqB,EAAQ,EAAE,KAAxC,SAAS,EAAqB,QAAQ,cAExD,MAAM,QAAA,EACN,OAAO,SAAA,EACP,aAAa,eAAA,IACV,OAAO,EAEb,CAAC;KACH;IAED,gCAAM,GAAN,UACE,SAA0B,EAC1B,QAAgB,EAChB,MAAc,EACd,aAAqB,EACrB,OAA4B;QAE5B,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,QAAQ,4GAAA,WAAY,EAAS,oBAAqB,EAAQ,EAAE,KAAxC,SAAS,EAAqB,QAAQ,cACzF,MAAM,QAAA,EACN,aAAa,eAAA,IACV,OAAO,EACV,CAAC;KACJ;IAED,8BAAI,GAAJ,UAAK,SAA0B,EAAE,QAAgB,EAAE,GAAW,EAAE,OAAc;QAC5E,OAAO,aAAa,CAAC,GAAG,EAAgC,CACtD,IAAI,EACJ,QAAQ,4GAAA,WAAY,EAAS,oBAAqB,EAAQ,EAAE,KAAxC,SAAS,EAAqB,QAAQ,cAExD,GAAG,KAAA,IACA,OAAO,EAEb,CAAC;KACH;IAED,mCAAS,GAAT,UAAU,SAA0B,EAAE,QAAgB,EAAE,OAAc;QACpE,OAAO,aAAa,CAAC,GAAG,EAA+B,CACrD,IAAI,EACJ,QAAQ,kHAAA,WAAY,EAAS,oBAAqB,EAAQ,QAAQ,KAA9C,SAAS,EAAqB,QAAQ,GAC1D,OAAO,CACR,CAAC;KACH;IAED,iCAAO,GAAP,UAAQ,SAA0B,EAAE,QAAgB,EAAE,OAA4B;QAChF,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJ,QAAQ,gHAAA,WAAY,EAAS,oBAAqB,EAAQ,MAAM,KAA5C,SAAS,EAAqB,QAAQ,GAC1D,OAAO,CACsB,CAAC;KACjC;IACH,sBAAC;AAAD,CAjFA,CAAgE,YAAY,GAiF3E;;;;ICzFoE,wCAAe;IAApF;;KAkBC;IAjBC,mCAAI,GAAJ,UACE,SAA0B,EAC1B,SAAiB,EACjB,MAAc,EACd,UAAkB,EAClB,OAA4B;QAE5B,OAAO,aAAa,CAAC,GAAG,EAA6B,CACnD,IAAI,EACJ,QAAQ,iHAAA,WAAY,EAAS,yBAA0B,EAAS,EAAE,KAA9C,SAAS,EAA0B,SAAS,cAE9D,MAAM,QAAA,EACN,UAAU,YAAA,IACP,OAAO,EAEb,CAAC;KACH;IACH,2BAAC;AAAD,CAlBA,CAAqE,YAAY,GAkBhF;;;;ICCuD,2BAAe;IAAvE;;KAqCC;IApCC,qBAAG,GAAH,UAAI,EAAyF;QAAzF,mBAAA,EAAA,OAAyF;QAAvF,IAAA,SAAS,eAAA,EAAK,OAAO,cAAvB,aAAyB,CAAF;QACzB,IAAM,GAAG,GAAG,SAAS,GAAG,QAAQ,8FAAA,WAAY,EAAS,UAAU,KAAnB,SAAS,IAAa,aAAa,CAAC;QAEhF,OAAO,aAAa,CAAC,GAAG,EAAkB,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;KAChE;IAED,0BAAQ,GAAR,UAAS,OAA4B;QACnC,OAAO,aAAa,CAAC,GAAG,EAAkB,CAAC,IAAI,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;KACtE;IAED,sBAAI,GAAJ,UAAK,QAAgB,EAAE,OAA4B;QACjD,OAAO,aAAa,CAAC,GAAG,EAAwB,CAAC,IAAI,EAAE,kBAAW,QAAQ,CAAE,EAAE,OAAO,CAAC,CAAC;KACxF;IAED,wBAAM,GAAN,UAAO,SAA0B,EAAE,QAAgB,EAAE,OAAc;QACjE,OAAO,aAAa,CAAC,IAAI,EAAgB,CAAC,IAAI,EAAE,QAAQ,8FAAA,WAAY,EAAS,UAAU,KAAnB,SAAS,cAC3E,QAAQ,UAAA,IACL,OAAO,EACV,CAAC;KACJ;IAED,yBAAO,GAAP,UAAQ,SAA0B,EAAE,QAAgB,EAAE,OAAc;QAClE,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,QAAQ,mGAAA,WAAY,EAAS,WAAY,EAAQ,EAAE,KAA/B,SAAS,EAAY,QAAQ,GAAI,OAAO,CAAC,CAAC;KAChG;IAED,sBAAI,GAAJ,UAAK,QAAgB,EAAE,OAAc;QACnC,OAAO,aAAa,CAAC,GAAG,EAAe,CAAC,IAAI,EAAE,kBAAW,QAAQ,UAAO,EAAE,OAAO,CAAC,CAAC;KACpF;IAED,wBAAM,GAAN,UAAO,QAAgB,EAAE,OAAc;QACrC,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,kBAAW,QAAQ,CAAE,EAAE,OAAO,CAAC,CAAC;KAClE;IAED,sBAAI,GAAJ,UAAK,QAAgB,EAAE,OAAc;QACnC,OAAO,aAAa,CAAC,GAAG,EAAwB,CAAC,IAAI,EAAE,kBAAW,QAAQ,CAAE,EAAE,OAAO,CAAC,CAAC;KACxF;IACH,cAAC;AAAD,CArCA,CAAwD,YAAY,GAqCnE;;;;ICXwD,4BAAe;IAAxE;;KAgCC;IA/BC,sBAAG,GAAH,UAAI,SAA0B,EAAE,OAAiC;QAC/D,OAAO,aAAa,CAAC,GAAG,EAAmB,CACzC,IAAI,EACJ,QAAQ,+FAAA,WAAY,EAAS,WAAW,KAApB,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,uBAAI,GAAJ,UAAK,SAA0B,EAAE,WAA6B,EAAE,OAA4B;QAC1F,OAAO,aAAa,CAAC,GAAG,EAAiB,CACvC,IAAI,EACJ,QAAQ,oGAAA,WAAY,EAAS,YAAa,EAAW,EAAE,KAAnC,SAAS,EAAa,WAAW,GACrD,OAAO,CACR,CAAC;KACH;IAED,yBAAM,GAAN,UAAO,SAA0B,EAAE,WAA6B,EAAE,OAAc;QAC9E,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJ,QAAQ,oGAAA,WAAY,EAAS,YAAa,EAAW,EAAE,KAAnC,SAAS,EAAa,WAAW,GACrD,OAAO,CACR,CAAC;KACH;IAED,uBAAI,GAAJ,UAAK,SAA0B,EAAE,WAA6B,EAAE,OAAc;QAC5E,OAAO,aAAa,CAAC,GAAG,EAAiB,CACvC,IAAI,EACJ,QAAQ,oGAAA,WAAY,EAAS,YAAa,EAAW,EAAE,KAAnC,SAAS,EAAa,WAAW,GACrD,OAAO,CACR,CAAC;KACH;IACH,eAAC;AAAD,CAhCA,CAAyD,YAAY,GAgCpE;;;;IC5EoD,wBAAe;IAApE;;KAkCC;IAjCC,kBAAG,GAAH,UAAI,SAA0B,EAAE,OAAiC;QAC/D,OAAO,aAAa,CAAC,GAAG,EAAe,CACrC,IAAI,EACJ,QAAQ,sGAAA,WAAY,EAAS,kBAAkB,KAA3B,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,qBAAM,GAAN,UAAO,SAA0B,EAAE,OAAe,EAAE,GAAW,EAAE,OAA4B;QAC3F,OAAO,aAAa,CAAC,IAAI,EAAa,CAAC,IAAI,EAAE,QAAQ,sGAAA,WAAY,EAAS,kBAAkB,KAA3B,SAAS,cACxE,KAAK,EAAE;gBACL,OAAO,SAAA;gBACP,GAAG,KAAA;aACJ,IACE,OAAO,EACV,CAAC;KACJ;IAED,qBAAM,GAAN,UAAO,SAA0B,EAAE,OAAe,EAAE,OAAc;QAChE,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJ,QAAQ,2GAAA,WAAY,EAAS,mBAAoB,EAAO,EAAE,KAAtC,SAAS,EAAoB,OAAO,GACxD,OAAO,CACR,CAAC;KACH;IAED,mBAAI,GAAJ,UAAK,SAA0B,EAAE,OAAe,EAAE,OAAc;QAC9D,OAAO,aAAa,CAAC,GAAG,EAAa,CACnC,IAAI,EACJ,QAAQ,2GAAA,WAAY,EAAS,mBAAoB,EAAO,EAAE,KAAtC,SAAS,EAAoB,OAAO,GACxD,OAAO,CACR,CAAC;KACH;IACH,WAAC;AAAD,CAlCA,CAAqD,YAAY,GAkChE;;;;ICRqD,yBAAe;IAArE;;KAsCC;IArCC,mBAAG,GAAH,UAAI,OAAiC;QACnC,OAAO,aAAa,CAAC,GAAG,EAAgB,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;KAClE;IAED,sBAAM,GAAN,UACE,SAA0B,EAC1B,UAAkB,EAClB,YAAsC,EACtC,OAAc;QAEd,IAAM,WAAW,GAAG,YAAY,KAAK,OAAO,GAAG,QAAQ,GAAG,gBAAgB,CAAC;QAE3E,OAAO,aAAa,CAAC,IAAI,EAAc,CACrC,IAAI,EACJ,QAAQ,qGAAA,WAAY,EAAS,GAAI,EAAW,GAAI,EAAU,OAAO,KAA7C,SAAS,EAAI,WAAW,EAAI,UAAU,GAC1D,OAAO,CACR,CAAC;KACH;IAED,oBAAI,GAAJ,UAAK,EAAuD;QAAvD,mBAAA,EAAA,OAAuD;QAArD,IAAA,MAAM,YAAA,EAAK,OAAO,cAApB,UAAsB,CAAF;QACvB,IAAM,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC;QAEtB,IAAI,MAAM;YAAE,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;QAExC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;;QAGzB,IAAI,MAAM,EAAE;YACV,OAAO,aAAa,CAAC,IAAI,EAAc,CACrC,IAAI,EACJ,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EACb,OAAkC,CACnC,CAAC;SACH;QAED,OAAO,aAAa,CAAC,IAAI,EAAQ,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,OAAkC,CAAC,CAAC;KAC5F;IACH,YAAC;AAAD,CAtCA,CAAsD,YAAY,GAsCjE;;;AChED;;IACyD,4BAAe;IAAxE;;KA8DC;IA7DC,sBAAG,GAAH,UAAI,SAA0B,EAAE,OAA4B;QAC1D,OAAO,aAAa,CAAC,IAAI,EAAyB,CAChD,IAAI,EACJ,QAAQ,+FAAA,WAAY,EAAS,WAAW,KAApB,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,sBAAG,GAAH,UAAI,SAA0B,EAAE,OAAiC;QAC/D,OAAO,aAAa,CAAC,GAAG,EAA2B,CACjD,IAAI,EACJ,QAAQ,+FAAA,WAAY,EAAS,WAAW,KAApB,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,uBAAI,GAAJ,UAAK,SAA0B,EAAE,SAAiB,EAAE,OAA4B;QAC9E,OAAO,aAAa,CAAC,GAAG,EAAyB,CAC/C,IAAI,EACJ,QAAQ,oGAAA,WAAY,EAAS,YAAa,EAAS,EAAE,KAAjC,SAAS,EAAa,SAAS,GACnD,OAAO,CACR,CAAC;KACH;IAED,2BAAQ,GAAR,UACE,SAA0B,EAC1B,GAAW,EACX,KAAa,EACb,EAA0D;YAA1D,qBAAwD,EAAE,KAAA,EAAxD,SAAS,eAAA;QAEX,IAAM,aAAa,GAAG,EAAE,CAAC;QAEzB,IAAI,SAAS,EAAE;YACb,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,UAAC,EAAM;oBAAN,KAAA,aAAM,EAAL,CAAC,QAAA,EAAE,CAAC,QAAA;gBACtC,aAAa,CAAC,oBAAa,CAAC,MAAG,CAAC,GAAG,CAAC,CAAC;aACtC,CAAC,CAAC;SACJ;QAED,OAAO,aAAa,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,QAAQ,uGAAA,WAAY,EAAS,mBAAmB,KAA5B,SAAS,cAC7D,MAAM,EAAE,IAAI,EACZ,GAAG,KAAA,EACH,KAAK,OAAA,IACF,aAAa,EAChB,CAAC;KACJ;IAED,yBAAM,GAAN,UAAO,SAA0B,EAAE,SAAiB,EAAE,OAAc;QAClE,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJ,QAAQ,oGAAA,WAAY,EAAS,YAAa,EAAS,EAAE,KAAjC,SAAS,EAAa,SAAS,GACnD,OAAO,CACR,CAAC;KACH;IAED,uBAAI,GAAJ,UAAK,SAA0B,EAAE,SAAiB,EAAE,OAAc;QAChE,OAAO,aAAa,CAAC,GAAG,EAAyB,CAC/C,IAAI,EACJ,QAAQ,gGAAA,WAAY,EAAS,YAAa,EAAS,EAAE,KAAjC,SAAS,EAAa,SAAS,GACnD,OAAO,CACR,CAAC;KACH;IACH,eAAC;AAAD,CA9DA,CAAyD,YAAY,GA8DpE;;;;ICpBqE,yCAAe;IAArF;;KAiBC;IAhBC,mCAAG,GAAH,UACE,SAA0B,EAC1B,OAM2B;QAE3B,OAAO,aAAa,CAAC,GAAG,EAAgC,CACtD,IAAI,EACJ,QAAQ,6GAAA,WAAY,EAAS,yBAAyB,KAAlC,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IACH,4BAAC;AAAD,CAjBA,CAAsE,YAAY,GAiBjF;;;;ICbmE,uCAAe;IAAnF;;KAQC;IAPC,iCAAG,GAAH,UAAI,OAAc;QAChB,OAAO,aAAa,CAAC,GAAG,EAA6B,CAAC,IAAI,EAAE,sBAAsB,EAAE,OAAO,CAAC,CAAC;KAC9F;IAED,kCAAI,GAAJ,UAAK,OAA4B;QAC/B,OAAO,aAAa,CAAC,GAAG,EAA6B,CAAC,IAAI,EAAE,sBAAsB,EAAE,OAAO,CAAC,CAAC;KAC9F;IACH,0BAAC;AAAD,CARA,CAAoE,YAAY;;;IC7Cd,qCAAe;IAAjF;;KA4BC;IA3BC,+BAAG,GAAH,UAAI,OAAiC;QACnC,OAAO,aAAa,CAAC,GAAG,EAA4B,CAAC,IAAI,EAAE,oBAAoB,EAAE,OAAO,CAAC,CAAC;KAC3F;IAED,kCAAM,GAAN,UAAO,OAA6D;QAClE,OAAO,aAAa,CAAC,IAAI,EAA0B,CAAC,IAAI,EAAE,oBAAoB,EAAE,OAAO,CAAC,CAAC;KAC1F;IAED,gCAAI,GAAJ,UAAK,kBAA0B,EAAE,OAA6D;QAC5F,OAAO,aAAa,CAAC,GAAG,EAA0B,CAChD,IAAI,EACJ,6BAAsB,kBAAkB,CAAE,EAC1C,OAAO,CACR,CAAC;KACH;IAED,kCAAM,GAAN,UAAO,kBAA0B,EAAE,OAAc;QAC/C,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,6BAAsB,kBAAkB,CAAE,EAAE,OAAO,CAAC,CAAC;KACvF;IAED,gCAAI,GAAJ,UAAK,kBAA0B,EAAE,OAA4B;QAC3D,OAAO,aAAa,CAAC,GAAG,EAA0B,CAChD,IAAI,EACJ,6BAAsB,kBAAkB,CAAE,EAC1C,OAAO,CACR,CAAC;KACH;IACH,wBAAC;AAAD,CA5BA,CAAkE,YAAY;;;ICgBvB,0BAAe;IAAtE;;KAeC;IAdC,oBAAG,GAAH,UAAI,EAG4E;QAH5E,mBAAA,EAAA,OAG4E;QAF9E,IAAA,SAAS,eAAA,EACN,OAAO,cAFR,aAGH,CADW;QAEV,IAAI,GAAW,CAAC;QAEhB,IAAI,SAAS,EAAE;YACb,GAAG,GAAG,QAAQ,6FAAA,WAAY,EAAS,SAAS,KAAlB,SAAS,CAAS,CAAC;SAC9C;aAAM;YACL,GAAG,GAAG,QAAQ,CAAC;SAChB;QAED,OAAO,aAAa,CAAC,GAAG,EAAiB,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;KAC/D;IACH,aAAC;AAAD,CAfA,CAAuD,YAAY,GAelE;;;;ICpB4D,gCAAe;IAA5E;;KAoDC;IAnDC,0BAAG,GAAH,UACE,SAA0B,EAC1B,OAA2E;QAA3E,wBAAA,EAAA,YAA2E;QAE3E,OAAO,aAAa,CAAC,GAAG,EAAuB,CAC7C,IAAI,EACJ,QAAQ,oGAAA,WAAY,EAAS,gBAAgB,KAAzB,SAAS,GAC7B,OAAO,CACR,CAAC;KACH;IAED,6BAAM,GAAN,UACE,SAA0B,EAC1B,QAAgB,EAChB,OAAe,EACf,OAA4B;QAE5B,OAAO,aAAa,CAAC,IAAI,EAAqB,CAC5C,IAAI,EACJ,QAAQ,oGAAA,WAAY,EAAS,gBAAgB,KAAzB,SAAS,cAE3B,IAAI,EAAE,QAAQ,EACd,OAAO,SAAA,IACJ,OAAO,EAEb,CAAC;KACH;IAED,2BAAI,GAAJ,UAAK,SAA0B,EAAE,QAAgB,EAAE,OAA4B;QAC7E,OAAO,aAAa,CAAC,GAAG,EAAqB,CAC3C,IAAI,EACJ,QAAQ,yGAAA,WAAY,EAAS,iBAAkB,EAAQ,EAAE,KAArC,SAAS,EAAkB,QAAQ,GACvD,OAAO,CACR,CAAC;KACH;IAED,6BAAM,GAAN,UAAO,SAA0B,EAAE,QAAgB,EAAE,OAAc;QACjE,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJ,QAAQ,yGAAA,WAAY,EAAS,iBAAkB,EAAQ,EAAE,KAArC,SAAS,EAAkB,QAAQ,GACvD,OAAO,CACR,CAAC;KACH;IAED,2BAAI,GAAJ,UAAK,SAA0B,EAAE,QAAgB,EAAE,OAAc;QAC/D,OAAO,aAAa,CAAC,GAAG,EAAqB,CAC3C,IAAI,EACJ,QAAQ,yGAAA,WAAY,EAAS,iBAAkB,EAAQ,EAAE,KAArC,SAAS,EAAkB,QAAQ,GACvD,OAAO,CACR,CAAC;KACH;IACH,mBAAC;AAAD,CApDA,CAA6D,YAAY,GAoDxE;;;;ICwDwD,4BAAe;IAAxE;;KAoCC;IAnCC,sBAAG,GAAH,UAAI,OAAiC;QACnC,OAAO,aAAa,CAAC,GAAG,EAAmB,CAAC,IAAI,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC;KACzE;IAED,yBAAM,GAAN,UAAO,SAAiB,EAAE,OAA4B;QACpD,OAAO,aAAa,CAAC,IAAI,EAAiB,CAAC,IAAI,EAAE,oBAAa,SAAS,CAAE,EAAE,OAAO,CAAC,CAAC;KACrF;IAED,uBAAI,GAAJ,UAAK,SAAiB,EAAE,OAA4B;QAClD,OAAO,aAAa,CAAC,GAAG,EAAiB,CAAC,IAAI,EAAE,oBAAa,SAAS,CAAE,EAAE,OAAO,CAAC,CAAC;KACpF;IAED,2BAAQ,GAAR,UAAS,OAA4B;QACnC,OAAO,aAAa,CAAC,GAAG,EAA0B,CAAC,IAAI,EAAE,4BAA4B,EAAE,OAAO,CAAC,CAAC;KACjG;IAED,yBAAM,GAAN,UAAO,SAAiB,EAAE,OAAc;QACtC,OAAO,aAAa,CAAC,IAAI,EAAiB,CAAC,IAAI,EAAE,oBAAa,SAAS,YAAS,EAAE,OAAO,CAAC,CAAC;KAC5F;IAED,yBAAM,GAAN,UAAO,SAAiB,EAAE,OAAc;QACtC,OAAO,aAAa,CAAC,GAAG,EAAiB,CAAC,IAAI,EAAE,oBAAa,SAAS,CAAE,EAAE,OAAO,CAAC,CAAC;KACpF;IAED,uBAAI,GAAJ,UAAK,SAAiB,EAAE,OAAc;QACpC,OAAO,aAAa,CAAC,GAAG,EAAiB,CAAC,IAAI,EAAE,oBAAa,SAAS,CAAE,EAAE,OAAO,CAAC,CAAC;KACpF;IAED,yBAAM,GAAN,UAAO,SAAiB,EAAE,OAAc;QACtC,OAAO,aAAa,CAAC,GAAG,EAAuB,CAAC,IAAI,EAAE,oBAAa,SAAS,YAAS,EAAE,OAAO,CAAC,CAAC;KACjG;IAED,2BAAQ,GAAR,UAAS,OAAiC;QACxC,OAAO,aAAa,CAAC,GAAG,EAAyB,CAAC,IAAI,EAAE,oBAAoB,EAAE,OAAO,CAAC,CAAC;KACxF;IACH,eAAC;AAAD,CApCA,CAAyD,YAAY;;;IC1IF,sCAAoB;IACrF,4BAAY,OAA+B;;eAEzC,kBAAM,YAAY,EAAE,OAAO,CAAC;KAC7B;IACH,yBAAC;AAAD,CALA,CAAmE,iBAAiB;;;ICAf,wCAAoB;IACvF,8BAAY,OAA+B;;eAEzC,kBAAM,gBAAgB,EAAE,OAAO,CAAC;KACjC;IACH,2BAAC;AAAD,CALA,CAAqE,iBAAiB;;;ICUjC,wBAAe;IAApE;;KAIC;IAHC,mBAAI,GAAJ,UAAK,KAAa,EAAE,OAAc;QAChC,OAAO,aAAa,CAAC,GAAG,EAAa,CAAC,IAAI,EAAE,QAAQ,kFAAA,OAAQ,EAAK,EAAE,KAAP,KAAK,GAAI,OAAO,CAAC,CAAC;KAC/E;IACH,WAAC;AAAD,CAJA,CAAqD,YAAY,GAIhE;;;;ICOuD,2BAAe;IAAvE;;KAgBC;IAfC,qBAAG,GAAH,UAAI,OAAe,EAAE,OAAc;QACjC,OAAO,aAAa,CAAC,IAAI,EAAiB,CAAC,IAAI,EAAE,SAAS,aAAI,OAAO,SAAA,IAAK,OAAO,EAAG,CAAC;KACtF;IAED,qBAAG,GAAH,UAAI,OAAc;QAChB,OAAO,aAAa,CAAC,GAAG,EAAmB,CAAC,IAAI,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;KACxE;IAED,sBAAI,GAAJ,UAAK,OAAc;QACjB,OAAO,aAAa,CAAC,GAAG,EAAiB,CAAC,IAAI,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;KACrE;IAED,wBAAM,GAAN,UAAO,SAAiB,EAAE,OAAc;QACtC,OAAO,aAAa,CAAC,GAAG,EAAiB,CAAC,IAAI,EAAE,kBAAW,SAAS,CAAE,EAAE,OAAO,CAAC,CAAC;KAClF;IACH,cAAC;AAAD,CAhBA,CAAwD,YAAY;;;ICDH,oCAAoB;IACnF,0BAAY,OAA+B;;eAEzC,kBAAM,UAAU,EAAE,OAAO,CAAC;KAC3B;IACH,uBAAC;AAAD,CALA,CAAiE,iBAAiB;;;ICT7B,wBAAe;IAApE;;KAmBC;IAlBC,mBAAI,GAAJ,UAAK,OAAe,EAAE,OAA4B;;;;QAIhD,OAAO,aAAa,CAAC,IAAI,EAAc,CAAC,IAAI,EAAE,SAAS,aAAI,OAAO,SAAA,IAAK,OAAO,EAAG,CAAC;KACnF;;IAGD,gCAAiB,GAAjB,UAAkB,SAA0B,EAAE,OAAe,EAAE,OAA4B;;;;;QAKzF,OAAO,aAAa,CAAC,IAAI,EAAwB,CAAC,IAAI,EAAE,mBAAY,SAAS,aAAU,aACrF,OAAO,SAAA,IACJ,OAAO,EACV,CAAC;KACJ;IACH,WAAC;AAAD,CAnBA,CAAqD,YAAY;;ACIjE;;IAC2D,8BAAe;IAA1E;;KAQC;IAPC,wBAAG,GAAH,UAAI,OAAiC;QACnC,OAAO,aAAa,CAAC,GAAG,EAAqB,CAAC,IAAI,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;KAC5E;IAED,yBAAI,GAAJ,UAAK,WAA4B,EAAE,OAAoC;QACrE,OAAO,aAAa,CAAC,GAAG,EAAmB,CAAC,IAAI,EAAE,QAAQ,wFAAA,aAAc,EAAW,EAAE,KAAb,WAAW,GAAI,OAAO,CAAC,CAAC;KACjG;IACH,iBAAC;AAAD,CARA,CAA2D,YAAY,GAQtE;;;ACCD,SAAS,GAAG,CAAC,EAAwC;QAAtC,SAAS,eAAA,EAAE,OAAO,aAAA;IAC/B,IAAI,GAAW,CAAC;IAEhB,IAAI,SAAS,EAAE;QACb,GAAG,GAAG,QAAQ,uFAAA,WAAY,EAAS,GAAG,KAAZ,SAAS,CAAG,CAAC;KACxC;SAAM,IAAI,OAAO,EAAE;QAClB,GAAG,GAAG,QAAQ,qFAAA,SAAU,EAAO,GAAG,KAAV,OAAO,CAAG,CAAC;KACpC;SAAM;QACL,GAAG,GAAG,EAAE,CAAC;KACV;IAED,OAAO,UAAG,GAAG,0BAAuB,CAAC;AACvC,CAAC;;IAEoE,wCAAe;IAApF;;KA6BC;IA5BC,kCAAG,GAAH,UAAI,EAK0B;QAL1B,mBAAA,EAAA,OAK0B;QAJ5B,IAAA,SAAS,eAAA,EACT,OAAO,aAAA,EACJ,OAAO,cAHR,wBAIH,CADW;QAGV,OAAO,aAAa,CAAC,GAAG,EAA+B,CACrD,IAAI,EACJ,GAAG,CAAC,EAAE,OAAO,SAAA,EAAE,SAAS,WAAA,EAAsB,CAAC,EAC/C,OAAO,CACR,CAAC;KACH;IAED,mCAAI,GAAJ,UAAK,EAQoB;QARpB,mBAAA,EAAA,OAQoB;QAPvB,IAAA,SAAS,eAAA,EACT,OAAO,aAAA,EACJ,OAAO,cAHP,wBAIJ,CADW;QAMV,OAAO,aAAa,CAAC,GAAG,EAA6B,CACnD,IAAI,EACJ,GAAG,CAAC,EAAE,OAAO,SAAA,EAAE,SAAS,WAAA,EAAsB,CAAC,EAC/C,OAAO,CACR,CAAC;KACH;IACH,2BAAC;AAAD,CA7BA,CAAqE,YAAY,GA6BhF;;;;IChEwD,4BAAe;IAAxE;;KAIC;IAHC,yBAAM,GAAN,UAAO,IAAY,EAAE,OAA4D;QAC/E,OAAO,aAAa,CAAC,IAAI,EAAkB,CAAC,IAAI,EAAE,UAAU,aAAI,IAAI,MAAA,IAAK,OAAO,EAAG,CAAC;KACrF;IACH,eAAC;AAAD,CAJA,CAAyD,YAAY;;ACarE;;IAE6D,gCAAe;IAA5E;;KAyCC;IAxCC,0BAAG,GAAH,UAAI,EAAyF;QAAzF,mBAAA,EAAA,OAAyF;QAAvF,IAAA,SAAS,eAAA,EAAK,OAAO,cAAvB,aAAyB,CAAF;QACzB,IAAM,GAAG,GAAG,SAAS,GAAG,QAAQ,uFAAA,WAAY,EAAS,GAAG,KAAZ,SAAS,IAAM,EAAE,CAAC;QAE9D,OAAO,aAAa,CAAC,GAAG,EAAuB,CAAC,IAAI,EAAE,UAAG,GAAG,kBAAe,EAAE,OAAO,CAAC,CAAC;KACvF;IAED,6BAAM,GAAN,UAAO,SAA0B,EAAE,MAAc,EAAE,OAA4B;QAC7E,OAAO,aAAa,CAAC,IAAI,EAAqB,CAC5C,IAAI,EACJ,QAAQ,oGAAA,WAAY,EAAS,gBAAgB,KAAzB,SAAS,cAE3B,MAAM,QAAA,IACH,OAAO,EAEb,CAAC;KACH;IAED,2BAAI,GAAJ,UAAK,SAA0B,EAAE,MAAc,EAAE,OAA4B;QAC3E,OAAO,aAAa,CAAC,GAAG,EAAqB,CAC3C,IAAI,EACJ,QAAQ,yGAAA,WAAY,EAAS,iBAAkB,EAAM,EAAE,KAAnC,SAAS,EAAkB,MAAM,GACrD,OAAO,CACR,CAAC;KACH;IAED,2BAAI,GAAJ,UAAK,SAA0B,EAAE,MAAc,EAAE,OAAc;QAC7D,OAAO,aAAa,CAAC,GAAG,EAAqB,CAC3C,IAAI,EACJ,QAAQ,yGAAA,WAAY,EAAS,iBAAkB,EAAM,EAAE,KAAnC,SAAS,EAAkB,MAAM,GACrD,OAAO,CACR,CAAC;KACH;IAED,6BAAM,GAAN,UAAO,SAA0B,EAAE,MAAc,EAAE,OAAc;QAC/D,OAAO,aAAa,CAAC,GAAG,EAAE,CACxB,IAAI,EACJ,QAAQ,yGAAA,WAAY,EAAS,iBAAkB,EAAM,EAAE,KAAnC,SAAS,EAAkB,MAAM,GACrD,OAAO,CACR,CAAC;KACH;IACH,mBAAC;AAAD,CAzCA,CAA6D,YAAY,GAyCxE;;;;ICzCsD,0BAAe;IAAtE;;KA0BC;IAzBC,oBAAG,GAAH,UACE,KAAa,EACb,MAAc,EACd,EAIuF;QAJvF,mBAAA,EAAA,OAIuF;QAHrF,IAAA,SAAS,eAAA,EACT,OAAO,aAAA,EACJ,OAAO,cAHZ,wBAIC,CADW;QAGZ,IAAI,GAAW,CAAC;QAEhB,IAAI,SAAS,EAAE;YACb,GAAG,GAAG,QAAQ,uFAAA,WAAY,EAAS,GAAG,KAAZ,SAAS,CAAG,CAAC;SACxC;aAAM,IAAI,OAAO,EAAE;YAClB,GAAG,GAAG,QAAQ,qFAAA,SAAU,EAAO,GAAG,KAAV,OAAO,CAAG,CAAC;SACpC;aAAM;YACL,GAAG,GAAG,EAAE,CAAC;SACV;QAED,OAAO,aAAa,CAAC,GAAG,EAAwB,CAAC,IAAI,EAAE,UAAG,GAAG,WAAQ,aACnE,KAAK,OAAA,EACL,MAAM,QAAA,IACH,OAAO,EACV,CAAC;KACJ;IACH,aAAC;AAAD,CA1BA,CAAuD,YAAY,GA0BlE;;;;ICR8D,kCAAe;IAA9E;;KAgBC;IAfC,qCAAY,GAAZ;QACE,OAAO,aAAa,CAAC,GAAG,EAA8B,CAAC,IAAI,EAAE,uBAAuB,CAAC,CAAC;KACvF;IAED,uCAAc,GAAd;QACE,OAAO,aAAa,CAAC,GAAG,EAAgC,CAAC,IAAI,EAAE,yBAAyB,CAAC,CAAC;KAC3F;IAED,iCAAQ,GAAR;QACE,OAAO,aAAa,CAAC,GAAG,EAA0B,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;KAC/E;IAED,wCAAe,GAAf;QACE,OAAO,aAAa,CAAC,GAAG,EAAiC,CAAC,IAAI,EAAE,0BAA0B,CAAC,CAAC;KAC7F;IACH,qBAAC;AAAD,CAhBA,CAA+D,YAAY;;;ICClB,4BAAe;IAAxE;;KA8CC;IA7CC,sBAAG,GAAH,UAAI,EAA8E;QAA9E,mBAAA,EAAA,OAA8E;QAA5E,IAAQ,CAAC,YAAA,EAAK,OAAO,cAAvB,UAAyB,CAAF;QACzB,IAAM,GAAG,GAAG,CAAC,GAAG,iBAAiB,GAAG,UAAU,CAAC;QAE/C,OAAO,aAAa,CAAC,GAAG,EAAmB,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;KACjE;IAED,0BAAO,GAAP,UAAQ,SAAiB,EAAE,OAAc;QACvC,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,mBAAY,SAAS,SAAM,EAAE,OAAO,CAAC,CAAC;KACxE;IAED,yBAAM,GAAN,UACE,KAAa,EACb,QAAgB,EAChB,OAAe,EACf,UAA6B,EAC7B,OAA4B;QAE5B,OAAO,aAAa,CAAC,IAAI,EAAyB,CAAC,IAAI,EAAE,UAAU,aACjE,KAAK,OAAA,EACL,QAAQ,UAAA,EACR,OAAO,SAAA,EACP,UAAU,YAAA,IACP,OAAO,EACV,CAAC;KACJ;IAED,uBAAI,GAAJ,UAAK,SAAiB,EAAE,OAA4B;QAClD,OAAO,aAAa,CAAC,GAAG,EAAyB,CAAC,IAAI,EAAE,mBAAY,SAAS,CAAE,EAAE,OAAO,CAAC,CAAC;KAC3F;IAED,yBAAM,GAAN,UAAO,SAAiB,EAAE,OAAc;QACtC,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,mBAAY,SAAS,CAAE,EAAE,OAAO,CAAC,CAAC;KACpE;IAED,uBAAI,GAAJ,UAAK,SAAiB,EAAE,OAAc;QACpC,OAAO,aAAa,CAAC,GAAG,EAAiB,CAAC,IAAI,EAAE,mBAAY,SAAS,CAAE,EAAE,OAAO,CAAC,CAAC;KACnF;IAED,mCAAgB,GAAhB,UAAiB,SAAiB,EAAE,OAAc;QAChD,OAAO,aAAa,CAAC,GAAG,EAAyB,CAC/C,IAAI,EACJ,mBAAY,SAAS,uBAAoB,EACzC,OAAO,CACR,CAAC;KACH;IACH,eAAC;AAAD,CA9CA,CAAyD,YAAY;;;ICtBT,+BAAe;IAA3E;;KAgBC;IAfC,yBAAG,GAAH,UAAI,GAAW,EAAE,OAA4B;QAC3C,OAAO,aAAa,CAAC,IAAI,EAAoB,CAAC,IAAI,EAAE,OAAO,aAAI,GAAG,KAAA,IAAK,OAAO,EAAG,CAAC;KACnF;IAED,yBAAG,GAAH,UAAI,OAAiC;QACnC,OAAO,aAAa,CAAC,GAAG,EAAsB,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;KACxE;IAED,0BAAI,GAAJ,UAAK,MAAc,EAAE,GAAW,EAAE,OAA4B;QAC5D,OAAO,aAAa,CAAC,GAAG,EAAoB,CAAC,IAAI,EAAE,gBAAS,MAAM,CAAE,aAAI,GAAG,KAAA,IAAK,OAAO,EAAG,CAAC;KAC5F;IAED,4BAAM,GAAN,UAAO,MAAc,EAAE,OAAc;QACnC,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,gBAAS,MAAM,CAAE,EAAE,OAAO,CAAC,CAAC;KAC9D;IACH,kBAAC;AAAD,CAhBA,CAA4D,YAAY;;;ICXhB,2BAAe;IAAvE;;KAIC;IAHC,sBAAI,GAAJ,UAAK,OAAc;QACjB,OAAO,aAAa,CAAC,GAAG,EAAiB,CAAC,IAAI,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;KACrE;IACH,cAAC;AAAD,CAJA,CAAwD,YAAY;;;ICQd,yBAAe;IAArE;;KA4BC;IA3BC,mBAAG,GAAH,UAAI,SAA0B,EAAE,OAAiC;QAC/D,OAAO,aAAa,CAAC,GAAG,EAAgB,CAAC,IAAI,EAAE,QAAQ,wFAAA,WAAY,EAAS,QAAQ,KAAjB,SAAS,GAAU,OAAO,CAAC,CAAC;KAChG;IAED,sBAAM,GAAN,UAAO,SAA0B,EAAE,OAA4B;QAC7D,OAAO,aAAa,CAAC,IAAI,EAAc,CAAC,IAAI,EAAE,QAAQ,wFAAA,WAAY,EAAS,QAAQ,KAAjB,SAAS,GAAU,OAAO,CAAC,CAAC;KAC/F;IAED,oBAAI,GAAJ,UAAK,SAA0B,EAAE,IAAY,EAAE,OAA4B;QACzE,OAAO,aAAa,CAAC,GAAG,EAAc,CACpC,IAAI,EACJ,QAAQ,6FAAA,WAAY,EAAS,SAAU,EAAI,EAAE,KAAzB,SAAS,EAAU,IAAI,GAC3C,OAAO,CACR,CAAC;KACH;IAED,oBAAI,GAAJ,UAAK,SAA0B,EAAE,IAAY,EAAE,OAAc;QAC3D,OAAO,aAAa,CAAC,GAAG,EAAc,CACpC,IAAI,EACJ,QAAQ,6FAAA,WAAY,EAAS,SAAU,EAAI,EAAE,KAAzB,SAAS,EAAU,IAAI,GAC3C,OAAO,CACR,CAAC;KACH;IAED,sBAAM,GAAN,UAAO,SAA0B,EAAE,IAAY,EAAE,OAAc;QAC7D,OAAO,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,QAAQ,6FAAA,WAAY,EAAS,SAAU,EAAI,EAAE,KAAzB,SAAS,EAAU,IAAI,GAAI,OAAO,CAAC,CAAC;KAC1F;IACH,YAAC;AAAD,CA5BA,CAAsD,YAAY,GA4BjE;;;AC5CD;AA4MA,IAAM,SAAS,GAAG;IAChB,MAAM,QAAA;IACN,mBAAmB,qBAAA;IACnB,WAAW,aAAA;IACX,qBAAqB,uBAAA;IACrB,gBAAgB,kBAAA;IAChB,YAAY,cAAA;IACZ,eAAe,iBAAA;IACf,YAAY,cAAA;IACZ,cAAc,gBAAA;IACd,WAAW,aAAA;IACX,iBAAiB,mBAAA;IACjB,KAAK,OAAA;IACL,UAAU,YAAA;IACV,SAAS,WAAA;IACT,eAAe,iBAAA;IACf,KAAK,OAAA;IACL,oBAAoB,sBAAA;IACpB,UAAU,YAAA;IACV,uBAAuB,yBAAA;IACvB,WAAW,aAAA;IACX,WAAW,aAAA;IACX,QAAQ,UAAA;IACR,OAAO,SAAA;IACP,iBAAiB,mBAAA;IACjB,iBAAiB,mBAAA;IACjB,WAAW,aAAA;IACX,UAAU,YAAA;IACV,YAAY,cAAA;IACZ,aAAa,eAAA;IACb,MAAM,QAAA;IACN,gBAAgB,kBAAA;IAChB,UAAU,YAAA;IACV,oBAAoB,sBAAA;IACpB,gBAAgB,kBAAA;IAChB,gBAAgB,kBAAA;IAChB,IAAI,MAAA;IACJ,MAAM,QAAA;IACN,aAAa,eAAA;IACb,qBAAqB,uBAAA;IACrB,uBAAuB,yBAAA;IACvB,uBAAuB,yBAAA;IACvB,iBAAiB,mBAAA;IACjB,QAAQ,UAAA;IACR,eAAe,iBAAA;IACf,SAAS,WAAA;IACT,iBAAiB,mBAAA;IACjB,yBAAyB,2BAAA;IACzB,QAAQ,UAAA;IACR,qBAAqB,uBAAA;IACrB,aAAa,eAAA;IACb,uBAAuB,yBAAA;IACvB,mBAAmB,qBAAA;IACnB,kBAAkB,oBAAA;IAClB,YAAY,cAAA;IACZ,cAAc,gBAAA;IACd,iBAAiB,mBAAA;IACjB,eAAe,iBAAA;IACf,mBAAmB,qBAAA;IACnB,yBAAyB,2BAAA;IACzB,yBAAyB,2BAAA;IACzB,iBAAiB,mBAAA;IACjB,aAAa,eAAA;IACb,gBAAgB,kBAAA;IAChB,mBAAmB,qBAAA;IACnB,SAAS,WAAA;IACT,QAAQ,UAAA;IACR,YAAY,cAAA;IACZ,YAAY,cAAA;IACZ,eAAe,iBAAA;IACf,oBAAoB,sBAAA;IACpB,OAAO,SAAA;IACP,QAAQ,UAAA;IACR,IAAI,MAAA;IACJ,KAAK,OAAA;IACL,QAAQ,UAAA;IACR,qBAAqB,uBAAA;IACrB,mBAAmB,qBAAA;IACnB,iBAAiB,mBAAA;IACjB,MAAM,QAAA;IACN,YAAY,cAAA;IACZ,QAAQ,UAAA;IACR,kBAAkB,oBAAA;IAClB,oBAAoB,sBAAA;IACpB,IAAI,MAAA;IACJ,OAAO,SAAA;IACP,gBAAgB,kBAAA;IAChB,IAAI,MAAA;IACJ,UAAU,YAAA;IACV,oBAAoB,sBAAA;IACpB,QAAQ,UAAA;IACR,YAAY,cAAA;IACZ,MAAM,QAAA;IACN,cAAc,gBAAA;IACd,QAAQ,UAAA;IACR,WAAW,aAAA;IACX,OAAO,SAAA;IACP,KAAK,OAAA;CACN,CAAC;;IAEqD,0BAAsC;IAC3F,gBAAY,OAA+B;QAA3C,YACE,iBAAO,SAKR;QAHC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,UAAC,CAAC;YAC/B,KAAI,CAAC,CAAC,CAAC,GAAG,IAAI,SAAS,CAAC,CAAC,CAAC,CAAI,OAAO,CAAC,CAAC;SACxC,CAAC,CAAC;;KACJ;IACH,aAAC;AAAD,CAAC;IARuD;KAAQ;IAAD,cAAC;AAAD,CAAP;;AChTxD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}